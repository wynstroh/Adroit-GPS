
Adroit_GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00004346  000043da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ae  008001be  008001be  00004498  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000044f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000137c4  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d35  00000000  00000000  000183d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000041f3  00000000  00000000  0001b105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001790  00000000  00000000  0001f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002cd2  00000000  00000000  00020a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000092d6  00000000  00000000  0002375a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  0002ca30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 01 	jmp	0x280	; 0x280 <__dtors_end>
       4:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__vector_1>
       8:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__vector_2>
       c:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_3>
      10:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_3>
      14:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_3>
      18:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      1c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      20:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      24:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      28:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      2c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      30:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      34:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      38:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      3c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      40:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__vector_16>
      44:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      48:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__vector_18>
      4c:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_19>
      50:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      54:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      58:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      5c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      60:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      64:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_Z16processGPSString6String+0x20>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	4e 41       	sbci	r20, 0x1E	; 30
      ec:	4e 49       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <pstr_inity>:
      ed:	49 4e 49 54 59                                      INITY

000000f2 <pstr_inf>:
      f2:	49 4e 46                                            INF

000000f5 <pwr_m10>:
      f5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     105:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000010d <pwr_p10>:
     10d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     11d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     12d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     13d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     14d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     15d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     16d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     17d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     18d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     19d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     1ad:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     1bd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1cd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1dd:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1ed:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1fd:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     20d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     21d:	3d 27                                               ='

0000021f <digital_pin_to_timer_PGM>:
     21f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     22f:	00 00 00 00                                         ....

00000233 <digital_pin_to_bit_mask_PGM>:
     233:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     243:	04 08 10 20                                         ... 

00000247 <digital_pin_to_port_PGM>:
     247:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     257:	03 03 03 03                                         ....

0000025b <port_to_input_PGM>:
     25b:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000265 <port_to_output_PGM>:
     265:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000026f <port_to_mode_PGM>:
     26f:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000027a <__ctors_start>:
     27a:	23 09       	sbc	r18, r3
     27c:	58 14       	cp	r5, r8

0000027e <__ctors_end>:
     27e:	30 09       	sbc	r19, r0

00000280 <__dtors_end>:
     280:	11 24       	eor	r1, r1
     282:	1f be       	out	0x3f, r1	; 63
     284:	cf ef       	ldi	r28, 0xFF	; 255
     286:	d8 e0       	ldi	r29, 0x08	; 8
     288:	de bf       	out	0x3e, r29	; 62
     28a:	cd bf       	out	0x3d, r28	; 61

0000028c <__do_copy_data>:
     28c:	11 e0       	ldi	r17, 0x01	; 1
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	e6 e4       	ldi	r30, 0x46	; 70
     294:	f3 e4       	ldi	r31, 0x43	; 67
     296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x10>
     298:	05 90       	lpm	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	ae 3b       	cpi	r26, 0xBE	; 190
     29e:	b1 07       	cpc	r27, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0xc>

000002a2 <__do_clear_bss>:
     2a2:	23 e0       	ldi	r18, 0x03	; 3
     2a4:	ae eb       	ldi	r26, 0xBE	; 190
     2a6:	b1 e0       	ldi	r27, 0x01	; 1
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
     2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
     2ac:	ac 36       	cpi	r26, 0x6C	; 108
     2ae:	b2 07       	cpc	r27, r18
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>

000002b2 <__do_global_ctors>:
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	cf e3       	ldi	r28, 0x3F	; 63
     2b6:	d1 e0       	ldi	r29, 0x01	; 1
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <__do_global_ctors+0x10>
     2ba:	21 97       	sbiw	r28, 0x01	; 1
     2bc:	fe 01       	movw	r30, r28
     2be:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__tablejump2__>
     2c2:	cd 33       	cpi	r28, 0x3D	; 61
     2c4:	d1 07       	cpc	r29, r17
     2c6:	c9 f7       	brne	.-14     	; 0x2ba <__do_global_ctors+0x8>
     2c8:	0e 94 86 14 	call	0x290c	; 0x290c <main>
     2cc:	0c 94 96 21 	jmp	0x432c	; 0x432c <__do_global_dtors>

000002d0 <__bad_interrupt>:
     2d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d4 <_Z15ISR_keypadPressv>:

void generateKeycode() {
	doorKeycode = rand();									// assigns a number between 0 and 0x7FFF to newKeycode
	if (doorKeycode < 10000) doorKeycode+=10000;			// if the number starts with a 0, add 10000 so that the code starts with a 1 (to avoid confusion)
	setAlarmKeycode = rand();
	if (setAlarmKeycode < 10000) setAlarmKeycode+=10000;
     2d4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <interruptReactivated>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <keyHasBeenPressed>
     2de:	08 95       	ret

000002e0 <_Z8keyClearv>:
     2e0:	eb e1       	ldi	r30, 0x1B	; 27
     2e2:	f2 e0       	ldi	r31, 0x02	; 2
     2e4:	10 82       	st	Z, r1
     2e6:	11 82       	std	Z+1, r1	; 0x01
     2e8:	12 82       	std	Z+2, r1	; 0x02
     2ea:	13 82       	std	Z+3, r1	; 0x03
     2ec:	14 82       	std	Z+4, r1	; 0x04
     2ee:	15 82       	std	Z+5, r1	; 0x05
     2f0:	08 95       	ret

000002f2 <_Z15checkKeyPressedPj>:
     2f2:	4f 92       	push	r4
     2f4:	5f 92       	push	r5
     2f6:	6f 92       	push	r6
     2f8:	7f 92       	push	r7
     2fa:	af 92       	push	r10
     2fc:	bf 92       	push	r11
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	6c 97       	sbiw	r28, 0x1c	; 28
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	6c 01       	movw	r12, r24
     320:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <keyHasBeenPressed>
     324:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <millis>
     328:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <timerStart_keyPress>
     32c:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <timerStart_keyPress+0x1>
     330:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timerStart_keyPress+0x2>
     334:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <timerStart_keyPress+0x3>
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	8e e0       	ldi	r24, 0x0E	; 14
     344:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	89 e0       	ldi	r24, 0x09	; 9
     34c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     350:	65 e0       	ldi	r22, 0x05	; 5
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     35c:	85 e0       	ldi	r24, 0x05	; 5
     35e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     362:	89 2b       	or	r24, r25
     364:	41 f0       	breq	.+16     	; 0x376 <_Z15checkKeyPressedPj+0x84>
     366:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     36a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     36e:	e5 5e       	subi	r30, 0xE5	; 229
     370:	fd 4f       	sbci	r31, 0xFD	; 253
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	19 c0       	rjmp	.+50     	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     37c:	89 2b       	or	r24, r25
     37e:	41 f0       	breq	.+16     	; 0x390 <_Z15checkKeyPressedPj+0x9e>
     380:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     384:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     388:	e5 5e       	subi	r30, 0xE5	; 229
     38a:	fd 4f       	sbci	r31, 0xFD	; 253
     38c:	84 e0       	ldi	r24, 0x04	; 4
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     390:	87 e0       	ldi	r24, 0x07	; 7
     392:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     396:	89 2b       	or	r24, r25
     398:	c1 f0       	breq	.+48     	; 0x3ca <_Z15checkKeyPressedPj+0xd8>
     39a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     39e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     3a2:	e5 5e       	subi	r30, 0xE5	; 229
     3a4:	fd 4f       	sbci	r31, 0xFD	; 253
     3a6:	87 e0       	ldi	r24, 0x07	; 7
     3a8:	80 83       	st	Z, r24
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     3b2:	62 e3       	ldi	r22, 0x32	; 50
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	8a e0       	ldi	r24, 0x0A	; 10
     3c2:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <_Z15checkKeyPressedPj+0x102>
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     3d0:	89 2b       	or	r24, r25
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <_Z15checkKeyPressedPj+0xe4>
     3d4:	2e c1       	rjmp	.+604    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     3d6:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <keycodeIndex+0x1>
     3da:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <keycodeIndex>
     3de:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <keycodeEntered>
     3e2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z8keyClearv>
     3e6:	63 e2       	ldi	r22, 0x23	; 35
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 ec       	ldi	r24, 0xC0	; 192
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN5Print7printlnEPKc>
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <keycodeIndex>
     3f8:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <keycodeIndex+0x1>
     3fc:	25 30       	cpi	r18, 0x05	; 5
     3fe:	31 05       	cpc	r19, r1
     400:	0c f4       	brge	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	ea c0       	rjmp	.+468    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     404:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <previousKeycode>
     408:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <previousKeycode+0x1>
     40c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <previousKeycode+0x2>
     410:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <previousKeycode+0x3>
     414:	00 91 19 02 	lds	r16, 0x0219	; 0x800219 <keycodeIndex>
     418:	10 91 1a 02 	lds	r17, 0x021A	; 0x80021a <keycodeIndex+0x1>
     41c:	01 50       	subi	r16, 0x01	; 1
     41e:	11 09       	sbc	r17, r1
     420:	8b e1       	ldi	r24, 0x1B	; 27
     422:	e8 2e       	mov	r14, r24
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	f8 2e       	mov	r15, r24
     428:	17 fd       	sbrc	r17, 7
     42a:	98 c0       	rjmp	.+304    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     42c:	57 01       	movw	r10, r14
     42e:	b8 01       	movw	r22, r16
     430:	01 2e       	mov	r0, r17
     432:	00 0c       	add	r0, r0
     434:	88 0b       	sbc	r24, r24
     436:	99 0b       	sbc	r25, r25
     438:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__floatsisf>
     43c:	9b 01       	movw	r18, r22
     43e:	ac 01       	movw	r20, r24
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e2       	ldi	r24, 0x20	; 32
     446:	91 e4       	ldi	r25, 0x41	; 65
     448:	0e 94 54 11 	call	0x22a8	; 0x22a8 <pow>
     44c:	2b 01       	movw	r4, r22
     44e:	3c 01       	movw	r6, r24
     450:	f7 01       	movw	r30, r14
     452:	60 81       	ld	r22, Z
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__floatsisf>
     45e:	a3 01       	movw	r20, r6
     460:	92 01       	movw	r18, r4
     462:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
     466:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <ceil>
     46a:	ab 01       	movw	r20, r22
     46c:	bc 01       	movw	r22, r24
     46e:	22 e0       	ldi	r18, 0x02	; 2
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN6StringC1Edh>
     478:	4a e0       	ldi	r20, 0x0A	; 10
     47a:	f7 01       	movw	r30, r14
     47c:	61 91       	ld	r22, Z+
     47e:	7f 01       	movw	r14, r30
     480:	ce 01       	movw	r24, r28
     482:	07 96       	adiw	r24, 0x07	; 7
     484:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN6StringC1Ehh>
     488:	4a e0       	ldi	r20, 0x0A	; 10
     48a:	b8 01       	movw	r22, r16
     48c:	ce 01       	movw	r24, r28
     48e:	43 96       	adiw	r24, 0x13	; 19
     490:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
     494:	6e e0       	ldi	r22, 0x0E	; 14
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	ce 01       	movw	r24, r28
     49a:	0d 96       	adiw	r24, 0x0d	; 13
     49c:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
     4a0:	be 01       	movw	r22, r28
     4a2:	6d 5e       	subi	r22, 0xED	; 237
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	ce 01       	movw	r24, r28
     4a8:	0d 96       	adiw	r24, 0x0d	; 13
     4aa:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     4ae:	6f e1       	ldi	r22, 0x1F	; 31
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     4b6:	be 01       	movw	r22, r28
     4b8:	69 5f       	subi	r22, 0xF9	; 249
     4ba:	7f 4f       	sbci	r23, 0xFF	; 255
     4bc:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     4c0:	6f e1       	ldi	r22, 0x1F	; 31
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     4c8:	be 01       	movw	r22, r28
     4ca:	6f 5f       	subi	r22, 0xFF	; 255
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     4d2:	bc 01       	movw	r22, r24
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN5Print7printlnERK6String>
     4dc:	ce 01       	movw	r24, r28
     4de:	0d 96       	adiw	r24, 0x0d	; 13
     4e0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     4e4:	ce 01       	movw	r24, r28
     4e6:	43 96       	adiw	r24, 0x13	; 19
     4e8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     4ec:	ce 01       	movw	r24, r28
     4ee:	07 96       	adiw	r24, 0x07	; 7
     4f0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     4fc:	f5 01       	movw	r30, r10
     4fe:	60 81       	ld	r22, Z
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__floatsisf>
     50a:	a3 01       	movw	r20, r6
     50c:	92 01       	movw	r18, r4
     50e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
     512:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <ceil>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <previousKeycode>
     51e:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <previousKeycode+0x1>
     522:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <previousKeycode+0x2>
     526:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <previousKeycode+0x3>
     52a:	29 8f       	std	Y+25, r18	; 0x19
     52c:	3a 8f       	std	Y+26, r19	; 0x1a
     52e:	4b 8f       	std	Y+27, r20	; 0x1b
     530:	5c 8f       	std	Y+28, r21	; 0x1c
     532:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__floatunsisf>
     536:	29 8d       	ldd	r18, Y+25	; 0x19
     538:	3a 8d       	ldd	r19, Y+26	; 0x1a
     53a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     53c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     53e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3>
     542:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     546:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <previousKeycode>
     54a:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <previousKeycode+0x1>
     54e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <previousKeycode+0x2>
     552:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <previousKeycode+0x3>
     556:	01 50       	subi	r16, 0x01	; 1
     558:	11 09       	sbc	r17, r1
     55a:	66 cf       	rjmp	.-308    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     55c:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <previousKeycode>
     560:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <previousKeycode+0x1>
     564:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <previousKeycode+0x2>
     568:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <previousKeycode+0x3>
     56c:	2a e0       	ldi	r18, 0x0A	; 10
     56e:	ce 01       	movw	r24, r28
     570:	07 96       	adiw	r24, 0x07	; 7
     572:	0e 94 48 18 	call	0x3090	; 0x3090 <_ZN6StringC1Emh>
     576:	65 e1       	ldi	r22, 0x15	; 21
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
     582:	be 01       	movw	r22, r28
     584:	69 5f       	subi	r22, 0xF9	; 249
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     590:	bc 01       	movw	r22, r24
     592:	80 ec       	ldi	r24, 0xC0	; 192
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN5Print7printlnERK6String>
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     5a2:	ce 01       	movw	r24, r28
     5a4:	07 96       	adiw	r24, 0x07	; 7
     5a6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     5aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z8keyClearv>
     5ae:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <keycodeIndex+0x1>
     5b2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <keycodeIndex>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <keycodeEntered>
     5bc:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <previousKeycode>
     5c0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <previousKeycode+0x1>
     5c4:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <previousKeycode+0x2>
     5c8:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <previousKeycode+0x3>
     5cc:	f6 01       	movw	r30, r12
     5ce:	91 8b       	std	Z+17, r25	; 0x11
     5d0:	80 8b       	std	Z+16, r24	; 0x10
     5d2:	b3 8b       	std	Z+19, r27	; 0x13
     5d4:	a2 8b       	std	Z+18, r26	; 0x12
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5d8:	91 11       	cpse	r25, r1
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5dc:	2f 5f       	subi	r18, 0xFF	; 255
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <keycodeIndex+0x1>
     5e4:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <keycodeIndex>
     5e8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <keycodeEntered>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	8f e0       	ldi	r24, 0x0F	; 15
     5f0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	8e e0       	ldi	r24, 0x0E	; 14
     5f8:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	89 e0       	ldi	r24, 0x09	; 9
     600:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     604:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <keyHasBeenPressed>
     608:	6c 96       	adiw	r28, 0x1c	; 28
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	7f 90       	pop	r7
     62a:	6f 90       	pop	r6
     62c:	5f 90       	pop	r5
     62e:	4f 90       	pop	r4
     630:	08 95       	ret
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	8f e0       	ldi	r24, 0x0F	; 15
     636:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	8e e0       	ldi	r24, 0x0E	; 14
     63e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     64a:	65 e0       	ldi	r22, 0x05	; 5
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     656:	85 e0       	ldi	r24, 0x05	; 5
     658:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     65c:	89 2b       	or	r24, r25
     65e:	41 f0       	breq	.+16     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     660:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     664:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     668:	e5 5e       	subi	r30, 0xE5	; 229
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	9c ce       	rjmp	.-712    	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     670:	86 e0       	ldi	r24, 0x06	; 6
     672:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     676:	89 2b       	or	r24, r25
     678:	41 f0       	breq	.+16     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     67a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     67e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     682:	e5 5e       	subi	r30, 0xE5	; 229
     684:	fd 4f       	sbci	r31, 0xFD	; 253
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	8f ce       	rjmp	.-738    	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     68a:	87 e0       	ldi	r24, 0x07	; 7
     68c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     690:	89 2b       	or	r24, r25
     692:	41 f0       	breq	.+16     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
     694:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     698:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     69c:	e5 5e       	subi	r30, 0xE5	; 229
     69e:	fd 4f       	sbci	r31, 0xFD	; 253
     6a0:	89 e0       	ldi	r24, 0x09	; 9
     6a2:	82 ce       	rjmp	.-764    	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     6a4:	88 e0       	ldi	r24, 0x08	; 8
     6a6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     6aa:	89 2b       	or	r24, r25
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     6ae:	aa ce       	rjmp	.-684    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	8f e0       	ldi	r24, 0x0F	; 15
     6b4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	8e e0       	ldi	r24, 0x0E	; 14
     6bc:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	89 e0       	ldi	r24, 0x09	; 9
     6c4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     6c8:	65 e0       	ldi	r22, 0x05	; 5
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     6d4:	85 e0       	ldi	r24, 0x05	; 5
     6d6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     6da:	89 2b       	or	r24, r25
     6dc:	41 f0       	breq	.+16     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     6de:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     6e2:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     6e6:	e5 5e       	subi	r30, 0xE5	; 229
     6e8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	5d ce       	rjmp	.-838    	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     6f4:	89 2b       	or	r24, r25
     6f6:	f1 f0       	breq	.+60     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     6f8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     6fc:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     700:	e5 5e       	subi	r30, 0xE5	; 229
     702:	fd 4f       	sbci	r31, 0xFD	; 253
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	80 83       	st	Z, r24
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	8a e0       	ldi	r24, 0x0A	; 10
     70c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     710:	62 e3       	ldi	r22, 0x32	; 50
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
     724:	62 e3       	ldi	r22, 0x32	; 50
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	46 ce       	rjmp	.-884    	; 0x3c0 <_Z15checkKeyPressedPj+0xce>
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     73a:	89 2b       	or	r24, r25
     73c:	41 f0       	breq	.+16     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
     73e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     742:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     746:	e5 5e       	subi	r30, 0xE5	; 229
     748:	fd 4f       	sbci	r31, 0xFD	; 253
     74a:	88 e0       	ldi	r24, 0x08	; 8
     74c:	2d ce       	rjmp	.-934    	; 0x3a8 <_Z15checkKeyPressedPj+0xb6>
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalRead>
     754:	89 2b       	or	r24, r25
     756:	09 f4       	brne	.+2      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     758:	49 cf       	rjmp	.-366    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     75a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <keycodeIndex>
     75e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <keycodeIndex+0x1>
     762:	e5 5e       	subi	r30, 0xE5	; 229
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	10 82       	st	Z, r1
     768:	20 ce       	rjmp	.-960    	; 0x3aa <_Z15checkKeyPressedPj+0xb8>

0000076a <_Z11checkKeyPadPj>:


/////////////////////////////////////////////////////////////////////

void checkKeyPad(unsigned int* _regs)
{
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
	
	//Check for key pressed
	if ( (keyHasBeenPressed) && (!debounce) ) 
     76e:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <keyHasBeenPressed>
     772:	22 23       	and	r18, r18
     774:	21 f0       	breq	.+8      	; 0x77e <_Z11checkKeyPadPj+0x14>
     776:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <debounce>
     77a:	22 23       	and	r18, r18
     77c:	79 f1       	breq	.+94     	; 0x7dc <_Z11checkKeyPadPj+0x72>
			////unlockDoor();
		//} else incorrectKeycodeEntered = true;
		//keycodeEntered = false;         // reset flag
	//}//if
//
	timerCurrent_keyPress = millis();
     77e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <millis>
     782:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <timerCurrent_keyPress>
     786:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <timerCurrent_keyPress+0x1>
     78a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <timerCurrent_keyPress+0x2>
     78e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <timerCurrent_keyPress+0x3>
	//Reactivate interrupt after [timerInterval_quickestKeypress] ms to debounce
	if (!interruptReactivated)
     792:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <interruptReactivated>
     796:	21 11       	cpse	r18, r1
     798:	27 c0       	rjmp	.+78     	; 0x7e8 <_Z11checkKeyPadPj+0x7e>
	{
		if ((timerCurrent_keyPress - timerStart_keyPress) >= timerInterval_quickestKeypress) 
     79a:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <timerStart_keyPress>
     79e:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <timerStart_keyPress+0x1>
     7a2:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <timerStart_keyPress+0x2>
     7a6:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <timerStart_keyPress+0x3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	80 1b       	sub	r24, r16
     7b0:	91 0b       	sbc	r25, r17
     7b2:	a2 0b       	sbc	r26, r18
     7b4:	b3 0b       	sbc	r27, r19
     7b6:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <timerInterval_quickestKeypress>
     7ba:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <timerInterval_quickestKeypress+0x1>
     7be:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <timerInterval_quickestKeypress+0x2>
     7c2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <timerInterval_quickestKeypress+0x3>
     7c6:	80 17       	cp	r24, r16
     7c8:	91 07       	cpc	r25, r17
     7ca:	a2 07       	cpc	r26, r18
     7cc:	b3 07       	cpc	r27, r19
     7ce:	60 f0       	brcs	.+24     	; 0x7e8 <_Z11checkKeyPadPj+0x7e>
		{
			//attachInterrupt(digitalPinToInterrupt(pin_RFID_RX1_D19), ISR_keypadPress, RISING);
			interruptReactivated = true;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <interruptReactivated>
			debounce = false;
     7d6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <debounce>
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <_Z11checkKeyPadPj+0x7e>
{
	
	//Check for key pressed
	if ( (keyHasBeenPressed) && (!debounce) ) 
	{
		checkKeyPressed(_regs);
     7dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z15checkKeyPressedPj>
		debounce = true;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <debounce>
     7e6:	cb cf       	rjmp	.-106    	; 0x77e <_Z11checkKeyPadPj+0x14>
		//newKeycodeGenerated=true;       //Set flag to ensure keycode is only generated once at midnight
	//}
	//if (rtcHour==1 && newKeycodeGenerated)
	//newKeycodeGenerated=false;        //Reset keycode flag once at 1am

}
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <setup>:
String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

void processGPSString(String s_GPSData);

void setup() {
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	0f 93       	push	r16

	//memset(&keyBuffer[0],0xff,5);

	//Digital IO
	pinMode(pin_keypadColumn1, OUTPUT);
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	8f e0       	ldi	r24, 0x0F	; 15
     7fe:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	pinMode(pin_keypadColumn2, OUTPUT);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	8e e0       	ldi	r24, 0x0E	; 14
     806:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	pinMode(pin_keypadColumn3, OUTPUT);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	89 e0       	ldi	r24, 0x09	; 9
     80e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>

	digitalWrite(pin_keypadColumn1, HIGH);
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	8f e0       	ldi	r24, 0x0F	; 15
     816:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
	digitalWrite(pin_keypadColumn2, HIGH);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	8e e0       	ldi	r24, 0x0E	; 14
     81e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
	digitalWrite(pin_keypadColumn3, HIGH);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	89 e0       	ldi	r24, 0x09	; 9
     826:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>

	pinMode(pin_keypadRow1, INPUT);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	pinMode(pin_keypadRow2, INPUT);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	pinMode(pin_keypadRow3, INPUT);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	pinMode(pin_keypadRow4, INPUT);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>

	pinMode(pin_keypadINT, INPUT);
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>

	modbus_configure(&RS485_Serial, 9600, SERIAL_8N2, MODBUS_Station, pin_RS485_DE, HOLDING_REGS_SIZE, holdingRegs);
     852:	84 ee       	ldi	r24, 0xE4	; 228
     854:	a8 2e       	mov	r10, r24
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	b8 2e       	mov	r11, r24
     85a:	92 e1       	ldi	r25, 0x12	; 18
     85c:	c9 2e       	mov	r12, r25
     85e:	d1 2c       	mov	r13, r1
     860:	23 e1       	ldi	r18, 0x13	; 19
     862:	e2 2e       	mov	r14, r18
     864:	01 e0       	ldi	r16, 0x01	; 1
     866:	2e e0       	ldi	r18, 0x0E	; 14
     868:	40 e8       	ldi	r20, 0x80	; 128
     86a:	55 e2       	ldi	r21, 0x25	; 37
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	85 ec       	ldi	r24, 0xC5	; 197
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_Z16modbus_configureP14SoftwareSeriallhhhjPj>

	//initialize interrupt 4 for Keypad press
	digitalWrite(pin_keypadINT, LOW);  // D19_RX1 RFID
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
	attachInterrupt(digitalPinToInterrupt(pin_keypadINT), ISR_keypadPress, RISING);
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	6a e6       	ldi	r22, 0x6A	; 106
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <attachInterrupt>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     88e:	26 e0       	ldi	r18, 0x06	; 6
     890:	40 e8       	ldi	r20, 0x80	; 128
     892:	55 e2       	ldi	r21, 0x25	; 37
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 ec       	ldi	r24, 0xC0	; 192
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN14HardwareSerial5beginEmh>
	while (!Serial) {
		; // wait for serial port to connect. Needed for native USB port only
	}

	#ifdef DEBUG
	Serial.println("Serial Startup");
     8a0:	67 e3       	ldi	r22, 0x37	; 55
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	80 ec       	ldi	r24, 0xC0	; 192
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN5Print7printlnEPKc>
	RS485_Serial.println("Modbus Startup");
     8ac:	66 e4       	ldi	r22, 0x46	; 70
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	85 ec       	ldi	r24, 0xC5	; 197
     8b2:	91 e0       	ldi	r25, 0x01	; 1
	#endif

}
     8b4:	0f 91       	pop	r16
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
		; // wait for serial port to connect. Needed for native USB port only
	}

	#ifdef DEBUG
	Serial.println("Serial Startup");
	RS485_Serial.println("Modbus Startup");
     8c0:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN5Print7printlnEPKc>

000008c4 <_Z16processGPSString6String>:
		}
	}
}

void processGPSString(String s_GPSData)
{
     8c4:	2f 92       	push	r2
     8c6:	3f 92       	push	r3
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	ca 55       	subi	r28, 0x5A	; 90
     8ee:	d1 09       	sbc	r29, r1
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	8c 01       	movw	r16, r24
	if (s_GPSData.startsWith("$GPGGA,",0))
     8fc:	65 e5       	ldi	r22, 0x55	; 85
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	be 01       	movw	r22, r28
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	c8 01       	movw	r24, r16
     914:	0e 94 61 19 	call	0x32c2	; 0x32c2 <_ZNK6String10startsWithERKS_j>
     918:	f8 2e       	mov	r15, r24
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     922:	ff 20       	and	r15, r15
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	85 c2       	rjmp	.+1290   	; 0xe32 <__stack+0x533>
	{
		String s_Time = getValue(s_GPSData,',',1);
     928:	b8 01       	movw	r22, r16
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	4c e2       	ldi	r20, 0x2C	; 44
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	ce 01       	movw	r24, r28
     940:	87 5b       	subi	r24, 0xB7	; 183
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Lat = getValue(s_GPSData,',',2);
     950:	b8 01       	movw	r22, r16
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	4c e2       	ldi	r20, 0x2C	; 44
     960:	be 01       	movw	r22, r28
     962:	6f 5f       	subi	r22, 0xFF	; 255
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	ce 01       	movw	r24, r28
     968:	8d 5b       	subi	r24, 0xBD	; 189
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Lat_NS = getValue(s_GPSData,',',3);
     978:	b8 01       	movw	r22, r16
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     982:	23 e0       	ldi	r18, 0x03	; 3
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	4c e2       	ldi	r20, 0x2C	; 44
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	cd 96       	adiw	r24, 0x3d	; 61
     992:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Lon = getValue(s_GPSData,',',4);
     99e:	b8 01       	movw	r22, r16
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     9a8:	24 e0       	ldi	r18, 0x04	; 4
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	4c e2       	ldi	r20, 0x2C	; 44
     9ae:	be 01       	movw	r22, r28
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	ce 01       	movw	r24, r28
     9b6:	c7 96       	adiw	r24, 0x37	; 55
     9b8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Lon_EW = getValue(s_GPSData,',',5);
     9c4:	b8 01       	movw	r22, r16
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     9ce:	25 e0       	ldi	r18, 0x05	; 5
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	4c e2       	ldi	r20, 0x2C	; 44
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	c1 96       	adiw	r24, 0x31	; 49
     9de:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_GPSFix = getValue(s_GPSData,',',6);
     9ea:	b8 01       	movw	r22, r16
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     9f4:	26 e0       	ldi	r18, 0x06	; 6
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	4c e2       	ldi	r20, 0x2C	; 44
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	8b 96       	adiw	r24, 0x2b	; 43
     a04:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

		String s_Alt = getValue(s_GPSData,',',9);
     a10:	b8 01       	movw	r22, r16
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     a1a:	29 e0       	ldi	r18, 0x09	; 9
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	4c e2       	ldi	r20, 0x2C	; 44
     a20:	be 01       	movw	r22, r28
     a22:	6f 5f       	subi	r22, 0xFF	; 255
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	ce 01       	movw	r24, r28
     a28:	85 96       	adiw	r24, 0x25	; 37
     a2a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

		float _fLat = 0.0;
		float _fLon = 0.0;
		float _fAlt = 0.0;

		int _iGPSFix = s_GPSFix.toInt();
     a36:	ce 01       	movw	r24, r28
     a38:	8b 96       	adiw	r24, 0x2b	; 43
     a3a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>

		if (_iGPSFix > 0)
     a3e:	16 16       	cp	r1, r22
     a40:	17 06       	cpc	r1, r23
     a42:	1c f4       	brge	.+6      	; 0xa4a <__stack+0x14b>
			gpsFix = true;
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <gpsFix>

		holdingRegs[GPS_FIX_IND] = _iGPSFix;
     a4a:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <holdingRegs+0x3>
     a4e:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <holdingRegs+0x2>

		if (gpsFix)
     a52:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <gpsFix>
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	62 c1       	rjmp	.+708    	; 0xd20 <__stack+0x421>
		{
			String s_Lat_deg = s_Lat.substring(0,2);
     a5c:	22 e0       	ldi	r18, 0x02	; 2
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	6d 5b       	subi	r22, 0xBD	; 189
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	ce 01       	movw	r24, r28
     a6c:	4f 96       	adiw	r24, 0x1f	; 31
     a6e:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     a72:	29 96       	adiw	r28, 0x09	; 9
     a74:	2e ad       	ldd	r18, Y+62	; 0x3e
     a76:	3f ad       	ldd	r19, Y+63	; 0x3f
     a78:	29 97       	sbiw	r28, 0x09	; 9
     a7a:	42 e0       	ldi	r20, 0x02	; 2
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	be 01       	movw	r22, r28
     a80:	6d 5b       	subi	r22, 0xBD	; 189
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	ce 01       	movw	r24, r28
     a86:	49 96       	adiw	r24, 0x19	; 25
     a88:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
			String s_Lat_min = s_Lat.substring(2);

			_fLat = (s_Lat_deg.toFloat());
     a8c:	ce 01       	movw	r24, r28
     a8e:	4f 96       	adiw	r24, 0x1f	; 31
     a90:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZNK6String7toFloatEv>
     a94:	6b 01       	movw	r12, r22
     a96:	7c 01       	movw	r14, r24
			_fLat = _fLat + (s_Lat_min.toFloat() / 60.0);
     a98:	ce 01       	movw	r24, r28
     a9a:	49 96       	adiw	r24, 0x19	; 25
     a9c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZNK6String7toFloatEv>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e7       	ldi	r20, 0x70	; 112
     aa6:	52 e4       	ldi	r21, 0x42	; 66
     aa8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__divsf3>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c7 01       	movw	r24, r14
     ab2:	b6 01       	movw	r22, r12
     ab4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24

			String s_Lon_deg = s_Lon.substring(0,3);
     abc:	23 e0       	ldi	r18, 0x03	; 3
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	be 01       	movw	r22, r28
     ac6:	69 5c       	subi	r22, 0xC9	; 201
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	ce 01       	movw	r24, r28
     acc:	43 96       	adiw	r24, 0x13	; 19
     ace:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     ad2:	2b ad       	ldd	r18, Y+59	; 0x3b
     ad4:	3c ad       	ldd	r19, Y+60	; 0x3c
     ad6:	43 e0       	ldi	r20, 0x03	; 3
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	be 01       	movw	r22, r28
     adc:	69 5c       	subi	r22, 0xC9	; 201
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	ce 01       	movw	r24, r28
     ae2:	0d 96       	adiw	r24, 0x0d	; 13
     ae4:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
			String s_Lon_min = s_Lon.substring(3);

			_fLon = (s_Lon_deg.toFloat());
     ae8:	ce 01       	movw	r24, r28
     aea:	43 96       	adiw	r24, 0x13	; 19
     aec:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZNK6String7toFloatEv>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
			_fLon = _fLon + (s_Lon_min.toFloat() / 60.0);
     af4:	ce 01       	movw	r24, r28
     af6:	0d 96       	adiw	r24, 0x0d	; 13
     af8:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZNK6String7toFloatEv>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e7       	ldi	r20, 0x70	; 112
     b02:	52 e4       	ldi	r21, 0x42	; 66
     b04:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__divsf3>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3>
     b14:	6b 01       	movw	r12, r22
     b16:	7c 01       	movw	r14, r24

			_fAlt = (s_Alt.toFloat());
     b18:	ce 01       	movw	r24, r28
     b1a:	85 96       	adiw	r24, 0x25	; 37
     b1c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZNK6String7toFloatEv>
     b20:	2b 01       	movw	r4, r22
     b22:	3c 01       	movw	r6, r24
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b24:	6d e5       	ldi	r22, 0x5D	; 93
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	ce 01       	movw	r24, r28
     b2a:	cd 96       	adiw	r24, 0x3d	; 61
     b2c:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZNK6String6equalsEPKc>

			unsigned long _dw;

			if (s_Lat_NS == "S")
     b30:	88 23       	and	r24, r24
     b32:	21 f0       	breq	.+8      	; 0xb3c <__stack+0x23d>
			{
				_fLat = _fLat * -1;
     b34:	b7 fa       	bst	r11, 7
     b36:	b0 94       	com	r11
     b38:	b7 f8       	bld	r11, 7
     b3a:	b0 94       	com	r11
     b3c:	6f e5       	ldi	r22, 0x5F	; 95
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	ce 01       	movw	r24, r28
     b42:	cd 96       	adiw	r24, 0x3d	; 61
     b44:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZNK6String6equalsEPKc>
			}

			if (s_Lat_NS == "W")
     b48:	88 23       	and	r24, r24
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__stack+0x255>
			{
				_fLon = _fLon * -1;
     b4c:	f7 fa       	bst	r15, 7
     b4e:	f0 94       	com	r15
     b50:	f7 f8       	bld	r15, 7
     b52:	f0 94       	com	r15
			}
		
			if (fLat != _fLat)
     b54:	a5 01       	movw	r20, r10
     b56:	94 01       	movw	r18, r8
     b58:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <fLat>
     b5c:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <fLat+0x1>
     b60:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <fLat+0x2>
     b64:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <fLat+0x3>
     b68:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__cmpsf2>
     b6c:	88 23       	and	r24, r24
     b6e:	81 f0       	breq	.+32     	; 0xb90 <__stack+0x291>
			{
				memcpy(&_dw,&_fLat,4);
				holdingRegs[LAT_VAL_LOW] = _dw&0xffff;
     b70:	90 92 e9 01 	sts	0x01E9, r9	; 0x8001e9 <holdingRegs+0x5>
     b74:	80 92 e8 01 	sts	0x01E8, r8	; 0x8001e8 <holdingRegs+0x4>
				holdingRegs[LAT_VAL_HIGH] = (_dw >> 16)&0xffff;
     b78:	b0 92 eb 01 	sts	0x01EB, r11	; 0x8001eb <holdingRegs+0x7>
     b7c:	a0 92 ea 01 	sts	0x01EA, r10	; 0x8001ea <holdingRegs+0x6>
				fLat = _fLat;
     b80:	80 92 28 02 	sts	0x0228, r8	; 0x800228 <fLat>
     b84:	90 92 29 02 	sts	0x0229, r9	; 0x800229 <fLat+0x1>
     b88:	a0 92 2a 02 	sts	0x022A, r10	; 0x80022a <fLat+0x2>
     b8c:	b0 92 2b 02 	sts	0x022B, r11	; 0x80022b <fLat+0x3>
			}

			if (fLon != _fLon)
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <fLon>
     b98:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <fLon+0x1>
     b9c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <fLon+0x2>
     ba0:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <fLon+0x3>
     ba4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__cmpsf2>
     ba8:	88 23       	and	r24, r24
     baa:	81 f0       	breq	.+32     	; 0xbcc <__stack+0x2cd>
			{
				memcpy(&_dw,&_fLon,4);
				holdingRegs[LON_VAL_LOW] = _dw&0xffff;
     bac:	d0 92 ed 01 	sts	0x01ED, r13	; 0x8001ed <holdingRegs+0x9>
     bb0:	c0 92 ec 01 	sts	0x01EC, r12	; 0x8001ec <holdingRegs+0x8>
				holdingRegs[LON_VAL_HIGH] = (_dw >> 16)&0xffff;
     bb4:	f0 92 ef 01 	sts	0x01EF, r15	; 0x8001ef <holdingRegs+0xb>
     bb8:	e0 92 ee 01 	sts	0x01EE, r14	; 0x8001ee <holdingRegs+0xa>
				fLon = _fLon;
     bbc:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <fLon>
     bc0:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <fLon+0x1>
     bc4:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <fLon+0x2>
     bc8:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <fLon+0x3>
			}

			if (fAlt != _fAlt)
     bcc:	a3 01       	movw	r20, r6
     bce:	92 01       	movw	r18, r4
     bd0:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <fAlt>
     bd4:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <fAlt+0x1>
     bd8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <fAlt+0x2>
     bdc:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <fAlt+0x3>
     be0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	81 f0       	breq	.+32     	; 0xc08 <__stack+0x309>
			{
				memcpy(&_dw,&_fAlt,4);
				holdingRegs[ALT_VAL_LOW] = _dw&0xffff;
     be8:	50 92 f1 01 	sts	0x01F1, r5	; 0x8001f1 <holdingRegs+0xd>
     bec:	40 92 f0 01 	sts	0x01F0, r4	; 0x8001f0 <holdingRegs+0xc>
				holdingRegs[ALT_VAL_HIGH] = (_dw >> 16)&0xffff;
     bf0:	70 92 f3 01 	sts	0x01F3, r7	; 0x8001f3 <holdingRegs+0xf>
     bf4:	60 92 f2 01 	sts	0x01F2, r6	; 0x8001f2 <holdingRegs+0xe>
				fAlt = _fAlt;
     bf8:	40 92 20 02 	sts	0x0220, r4	; 0x800220 <fAlt>
     bfc:	50 92 21 02 	sts	0x0221, r5	; 0x800221 <fAlt+0x1>
     c00:	60 92 22 02 	sts	0x0222, r6	; 0x800222 <fAlt+0x2>
     c04:	70 92 23 02 	sts	0x0223, r7	; 0x800223 <fAlt+0x3>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c08:	be 01       	movw	r22, r28
     c0a:	67 5b       	subi	r22, 0xB7	; 183
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
			}

			#ifdef DEBUG_GPS
			Serial.print(s_Time + ",");
     c16:	6b e5       	ldi	r22, 0x5B	; 91
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     c22:	bc 01       	movw	r22, r24
     c24:	80 ec       	ldi	r24, 0xC0	; 192
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
			Serial.print(String(fLat) + ",");
     c34:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <fLat>
     c38:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <fLat+0x1>
     c3c:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <fLat+0x2>
     c40:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <fLat+0x3>
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	ce 01       	movw	r24, r28
     c48:	07 96       	adiw	r24, 0x07	; 7
     c4a:	0e 94 75 18 	call	0x30ea	; 0x30ea <_ZN6StringC1Efh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c4e:	be 01       	movw	r22, r28
     c50:	69 5f       	subi	r22, 0xF9	; 249
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     c5c:	6b e5       	ldi	r22, 0x5B	; 91
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     c68:	bc 01       	movw	r22, r24
     c6a:	80 ec       	ldi	r24, 0xC0	; 192
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     c7a:	ce 01       	movw	r24, r28
     c7c:	07 96       	adiw	r24, 0x07	; 7
     c7e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
			Serial.print(String(fLon) + ",");
     c82:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <fLon>
     c86:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <fLon+0x1>
     c8a:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <fLon+0x2>
     c8e:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <fLon+0x3>
     c92:	22 e0       	ldi	r18, 0x02	; 2
     c94:	ce 01       	movw	r24, r28
     c96:	07 96       	adiw	r24, 0x07	; 7
     c98:	0e 94 75 18 	call	0x30ea	; 0x30ea <_ZN6StringC1Efh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c9c:	be 01       	movw	r22, r28
     c9e:	69 5f       	subi	r22, 0xF9	; 249
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     caa:	6b e5       	ldi	r22, 0x5B	; 91
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     cb6:	bc 01       	movw	r22, r24
     cb8:	80 ec       	ldi	r24, 0xC0	; 192
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     cc8:	ce 01       	movw	r24, r28
     cca:	07 96       	adiw	r24, 0x07	; 7
     ccc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
			Serial.println(String(fAlt));
     cd0:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <fAlt>
     cd4:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <fAlt+0x1>
     cd8:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <fAlt+0x2>
     cdc:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <fAlt+0x3>
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 75 18 	call	0x30ea	; 0x30ea <_ZN6StringC1Efh>
     cea:	be 01       	movw	r22, r28
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	80 ec       	ldi	r24, 0xC0	; 192
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN5Print7printlnERK6String>
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

			_fLat = (s_Lat_deg.toFloat());
			_fLat = _fLat + (s_Lat_min.toFloat() / 60.0);

			String s_Lon_deg = s_Lon.substring(0,3);
			String s_Lon_min = s_Lon.substring(3);
     d00:	ce 01       	movw	r24, r28
     d02:	0d 96       	adiw	r24, 0x0d	; 13
     d04:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
			String s_Lat_min = s_Lat.substring(2);

			_fLat = (s_Lat_deg.toFloat());
			_fLat = _fLat + (s_Lat_min.toFloat() / 60.0);

			String s_Lon_deg = s_Lon.substring(0,3);
     d08:	ce 01       	movw	r24, r28
     d0a:	43 96       	adiw	r24, 0x13	; 19
     d0c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		holdingRegs[GPS_FIX_IND] = _iGPSFix;

		if (gpsFix)
		{
			String s_Lat_deg = s_Lat.substring(0,2);
			String s_Lat_min = s_Lat.substring(2);
     d10:	ce 01       	movw	r24, r28
     d12:	49 96       	adiw	r24, 0x19	; 25
     d14:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

			#ifdef DEBUG_GPS
			Serial.print(s_Time + ",");
			Serial.print(String(fLat) + ",");
			Serial.print(String(fLon) + ",");
			Serial.println(String(fAlt));
     d18:	ce 01       	movw	r24, r28
     d1a:	4f 96       	adiw	r24, 0x1f	; 31
     d1c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     d20:	be 01       	movw	r22, r28
     d22:	67 5b       	subi	r22, 0xB7	; 183
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
			#endif
		}
		
		#ifdef DEBUG_GPS
		Serial.print(s_Time + ",");
     d2e:	6b e5       	ldi	r22, 0x5B	; 91
     d30:	71 e0       	ldi	r23, 0x01	; 1
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     d3a:	bc 01       	movw	r22, r24
     d3c:	80 ec       	ldi	r24, 0xC0	; 192
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     d4c:	be 01       	movw	r22, r28
     d4e:	6d 5b       	subi	r22, 0xBD	; 189
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	ce 01       	movw	r24, r28
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
		Serial.print(s_Lat + " " + s_Lat_NS + ",");
     d5a:	61 e2       	ldi	r22, 0x21	; 33
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     d66:	be 01       	movw	r22, r28
     d68:	63 5c       	subi	r22, 0xC3	; 195
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     d70:	6b e5       	ldi	r22, 0x5B	; 91
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     d78:	bc 01       	movw	r22, r24
     d7a:	80 ec       	ldi	r24, 0xC0	; 192
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     d8a:	be 01       	movw	r22, r28
     d8c:	69 5c       	subi	r22, 0xC9	; 201
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
		Serial.print(s_Lon + " " + s_Lon_EW + ",");
     d98:	61 e2       	ldi	r22, 0x21	; 33
     d9a:	71 e0       	ldi	r23, 0x01	; 1
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     da4:	be 01       	movw	r22, r28
     da6:	6f 5c       	subi	r22, 0xCF	; 207
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
     dae:	6b e5       	ldi	r22, 0x5B	; 91
     db0:	71 e0       	ldi	r23, 0x01	; 1
     db2:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
     db6:	bc 01       	movw	r22, r24
     db8:	80 ec       	ldi	r24, 0xC0	; 192
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		Serial.println(String(fAlt));
     dc8:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <fAlt>
     dcc:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <fAlt+0x1>
     dd0:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <fAlt+0x2>
     dd4:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <fAlt+0x3>
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 75 18 	call	0x30ea	; 0x30ea <_ZN6StringC1Efh>
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	80 ec       	ldi	r24, 0xC0	; 192
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN5Print7printlnERK6String>
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Lat_NS = getValue(s_GPSData,',',3);
		String s_Lon = getValue(s_GPSData,',',4);
		String s_Lon_EW = getValue(s_GPSData,',',5);
		String s_GPSFix = getValue(s_GPSData,',',6);

		String s_Alt = getValue(s_GPSData,',',9);
     df8:	ce 01       	movw	r24, r28
     dfa:	85 96       	adiw	r24, 0x25	; 37
     dfc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Time = getValue(s_GPSData,',',1);
		String s_Lat = getValue(s_GPSData,',',2);
		String s_Lat_NS = getValue(s_GPSData,',',3);
		String s_Lon = getValue(s_GPSData,',',4);
		String s_Lon_EW = getValue(s_GPSData,',',5);
		String s_GPSFix = getValue(s_GPSData,',',6);
     e00:	ce 01       	movw	r24, r28
     e02:	8b 96       	adiw	r24, 0x2b	; 43
     e04:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
	{
		String s_Time = getValue(s_GPSData,',',1);
		String s_Lat = getValue(s_GPSData,',',2);
		String s_Lat_NS = getValue(s_GPSData,',',3);
		String s_Lon = getValue(s_GPSData,',',4);
		String s_Lon_EW = getValue(s_GPSData,',',5);
     e08:	ce 01       	movw	r24, r28
     e0a:	c1 96       	adiw	r24, 0x31	; 49
     e0c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
	if (s_GPSData.startsWith("$GPGGA,",0))
	{
		String s_Time = getValue(s_GPSData,',',1);
		String s_Lat = getValue(s_GPSData,',',2);
		String s_Lat_NS = getValue(s_GPSData,',',3);
		String s_Lon = getValue(s_GPSData,',',4);
     e10:	ce 01       	movw	r24, r28
     e12:	c7 96       	adiw	r24, 0x37	; 55
     e14:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
{
	if (s_GPSData.startsWith("$GPGGA,",0))
	{
		String s_Time = getValue(s_GPSData,',',1);
		String s_Lat = getValue(s_GPSData,',',2);
		String s_Lat_NS = getValue(s_GPSData,',',3);
     e18:	ce 01       	movw	r24, r28
     e1a:	cd 96       	adiw	r24, 0x3d	; 61
     e1c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
void processGPSString(String s_GPSData)
{
	if (s_GPSData.startsWith("$GPGGA,",0))
	{
		String s_Time = getValue(s_GPSData,',',1);
		String s_Lat = getValue(s_GPSData,',',2);
     e20:	ce 01       	movw	r24, r28
     e22:	8d 5b       	subi	r24, 0xBD	; 189
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		
		#ifdef DEBUG_GPS
		Serial.print(s_Time + ",");
		Serial.print(s_Lat + " " + s_Lat_NS + ",");
		Serial.print(s_Lon + " " + s_Lon_EW + ",");
		Serial.println(String(fAlt));
     e2a:	ce 01       	movw	r24, r28
     e2c:	87 5b       	subi	r24, 0xB7	; 183
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	be c1       	rjmp	.+892    	; 0x11ae <__stack+0x8af>
		#endif
	}
	else if (s_GPSData.startsWith("$GPRMC,",0) || s_GPSData.startsWith("$GNRMC,",0))
     e32:	61 e6       	ldi	r22, 0x61	; 97
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	ce 01       	movw	r24, r28
     e38:	07 96       	adiw	r24, 0x07	; 7
     e3a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	be 01       	movw	r22, r28
     e44:	69 5f       	subi	r22, 0xF9	; 249
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <_ZNK6String10startsWithERKS_j>
     e4e:	81 11       	cpse	r24, r1
     e50:	18 c0       	rjmp	.+48     	; 0xe82 <__stack+0x583>
     e52:	69 e6       	ldi	r22, 0x69	; 105
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	ce 01       	movw	r24, r28
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	be 01       	movw	r22, r28
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <_ZNK6String10startsWithERKS_j>
     e6e:	ff 24       	eor	r15, r15
     e70:	f3 94       	inc	r15
     e72:	81 11       	cpse	r24, r1
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <__stack+0x579>
     e76:	f1 2c       	mov	r15, r1
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <__stack+0x587>
     e82:	ff 24       	eor	r15, r15
     e84:	f3 94       	inc	r15
     e86:	ce 01       	movw	r24, r28
     e88:	07 96       	adiw	r24, 0x07	; 7
     e8a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
     e8e:	ff 20       	and	r15, r15
     e90:	09 f4       	brne	.+2      	; 0xe94 <__stack+0x595>
     e92:	8f c1       	rjmp	.+798    	; 0x11b2 <__stack+0x8b3>
	{
		String s_Time = getValue(s_GPSData,',',1);
     e94:	b8 01       	movw	r22, r16
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4c e2       	ldi	r20, 0x2C	; 44
     ea4:	be 01       	movw	r22, r28
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	ce 01       	movw	r24, r28
     eac:	85 96       	adiw	r24, 0x25	; 37
     eae:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		String s_Date = getValue(s_GPSData,',',9);
     eba:	b8 01       	movw	r22, r16
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
     ec4:	29 e0       	ldi	r18, 0x09	; 9
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4c e2       	ldi	r20, 0x2C	; 44
     eca:	be 01       	movw	r22, r28
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	ce 01       	movw	r24, r28
     ed2:	4f 96       	adiw	r24, 0x1f	; 31
     ed4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z8getValue6Stringci>
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

		int ihour = s_Time.substring(0,2).toInt();
     ee0:	22 e0       	ldi	r18, 0x02	; 2
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	be 01       	movw	r22, r28
     eea:	6b 5d       	subi	r22, 0xDB	; 219
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     efe:	67 96       	adiw	r28, 0x17	; 23
     f00:	6c af       	std	Y+60, r22	; 0x3c
     f02:	7d af       	std	Y+61, r23	; 0x3d
     f04:	8e af       	std	Y+62, r24	; 0x3e
     f06:	9f af       	std	Y+63, r25	; 0x3f
     f08:	67 97       	sbiw	r28, 0x17	; 23
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		int iminute = s_Time.substring(2,4).toInt();
     f12:	24 e0       	ldi	r18, 0x04	; 4
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	42 e0       	ldi	r20, 0x02	; 2
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	be 01       	movw	r22, r28
     f1c:	6b 5d       	subi	r22, 0xDB	; 219
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     f30:	63 96       	adiw	r28, 0x13	; 19
     f32:	6c af       	std	Y+60, r22	; 0x3c
     f34:	7d af       	std	Y+61, r23	; 0x3d
     f36:	8e af       	std	Y+62, r24	; 0x3e
     f38:	9f af       	std	Y+63, r25	; 0x3f
     f3a:	63 97       	sbiw	r28, 0x13	; 19
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		int isecond = s_Time.substring(4,6).toInt();
     f44:	26 e0       	ldi	r18, 0x06	; 6
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	44 e0       	ldi	r20, 0x04	; 4
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	be 01       	movw	r22, r28
     f4e:	6b 5d       	subi	r22, 0xDB	; 219
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     f62:	2b 01       	movw	r4, r22
     f64:	3c 01       	movw	r6, r24
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>

		int iday = s_Date.substring(0,2).toInt();
     f6e:	22 e0       	ldi	r18, 0x02	; 2
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	be 01       	movw	r22, r28
     f78:	61 5e       	subi	r22, 0xE1	; 225
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     f8c:	4b 01       	movw	r8, r22
     f8e:	5c 01       	movw	r10, r24
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		int imonth = s_Date.substring(2,4).toInt();
     f98:	24 e0       	ldi	r18, 0x04	; 4
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	be 01       	movw	r22, r28
     fa2:	61 5e       	subi	r22, 0xE1	; 225
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		int iyear = s_Date.substring(4,6).toInt();
     fc2:	26 e0       	ldi	r18, 0x06	; 6
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	44 e0       	ldi	r20, 0x04	; 4
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	be 01       	movw	r22, r28
     fcc:	61 5e       	subi	r22, 0xE1	; 225
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZNK6String5toIntEv>
     fe0:	6b 96       	adiw	r28, 0x1b	; 27
     fe2:	6c af       	std	Y+60, r22	; 0x3c
     fe4:	7d af       	std	Y+61, r23	; 0x3d
     fe6:	8e af       	std	Y+62, r24	; 0x3e
     fe8:	9f af       	std	Y+63, r25	; 0x3f
     fea:	6b 97       	sbiw	r28, 0x1b	; 27
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		int idayofweek = dayofweek((iyear + 2000), imonth, iday);
     ff4:	69 96       	adiw	r28, 0x19	; 25
     ff6:	0e ad       	ldd	r16, Y+62	; 0x3e
     ff8:	1f ad       	ldd	r17, Y+63	; 0x3f
     ffa:	69 97       	sbiw	r28, 0x19	; 25
     ffc:	00 53       	subi	r16, 0x30	; 48
     ffe:	18 4f       	sbci	r17, 0xF8	; 248
    1000:	a4 01       	movw	r20, r8
    1002:	b6 01       	movw	r22, r12
    1004:	c8 01       	movw	r24, r16
    1006:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z9dayofweekiii>

		int itimezone = holdingRegs[TIME_ZONE];
    100a:	20 90 f8 01 	lds	r2, 0x01F8	; 0x8001f8 <holdingRegs+0x14>
    100e:	30 90 f9 01 	lds	r3, 0x01F9	; 0x8001f9 <holdingRegs+0x15>

		if (gpsFix)
    1012:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <gpsFix>
    1016:	65 96       	adiw	r28, 0x15	; 21
    1018:	4e ad       	ldd	r20, Y+62	; 0x3e
    101a:	5f ad       	ldd	r21, Y+63	; 0x3f
    101c:	65 97       	sbiw	r28, 0x15	; 21
    101e:	24 0e       	add	r2, r20
    1020:	35 1e       	adc	r3, r21
    1022:	22 23       	and	r18, r18
    1024:	01 f1       	breq	.+64     	; 0x1066 <__stack+0x767>
		{	
			holdingRegs[YEAR] = iyear + 2000;
    1026:	10 93 fb 01 	sts	0x01FB, r17	; 0x8001fb <holdingRegs+0x17>
    102a:	00 93 fa 01 	sts	0x01FA, r16	; 0x8001fa <holdingRegs+0x16>
			holdingRegs[MONTH] = imonth;
    102e:	d0 92 fd 01 	sts	0x01FD, r13	; 0x8001fd <holdingRegs+0x19>
    1032:	c0 92 fc 01 	sts	0x01FC, r12	; 0x8001fc <holdingRegs+0x18>
			holdingRegs[DAY] = iday;
    1036:	90 92 ff 01 	sts	0x01FF, r9	; 0x8001ff <holdingRegs+0x1b>
    103a:	80 92 fe 01 	sts	0x01FE, r8	; 0x8001fe <holdingRegs+0x1a>
			holdingRegs[DAY_WEEK] = idayofweek;
    103e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <holdingRegs+0x23>
    1042:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <holdingRegs+0x22>

			holdingRegs[HOUR] = ihour + itimezone;
    1046:	30 92 01 02 	sts	0x0201, r3	; 0x800201 <holdingRegs+0x1d>
    104a:	20 92 00 02 	sts	0x0200, r2	; 0x800200 <holdingRegs+0x1c>
			holdingRegs[MINUTE] = iminute;
    104e:	61 96       	adiw	r28, 0x11	; 17
    1050:	2e ad       	ldd	r18, Y+62	; 0x3e
    1052:	3f ad       	ldd	r19, Y+63	; 0x3f
    1054:	61 97       	sbiw	r28, 0x11	; 17
    1056:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <holdingRegs+0x1f>
    105a:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <holdingRegs+0x1e>
			holdingRegs[SECOND] = isecond;
    105e:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <holdingRegs+0x21>
    1062:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <holdingRegs+0x20>
		}
		
		#ifdef DEBUG_GPS
		Serial.print(String(iyear+2000) + "/" + String(imonth) + "/" + String(iday) + " " + String(idayofweek) + " ");
    1066:	4a e0       	ldi	r20, 0x0A	; 10
    1068:	bc 01       	movw	r22, r24
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
    1072:	4a e0       	ldi	r20, 0x0A	; 10
    1074:	b4 01       	movw	r22, r8
    1076:	ce 01       	movw	r24, r28
    1078:	07 96       	adiw	r24, 0x07	; 7
    107a:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
    107e:	4a e0       	ldi	r20, 0x0A	; 10
    1080:	b6 01       	movw	r22, r12
    1082:	ce 01       	movw	r24, r28
    1084:	0d 96       	adiw	r24, 0x0d	; 13
    1086:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
    108a:	4a e0       	ldi	r20, 0x0A	; 10
    108c:	b8 01       	movw	r22, r16
    108e:	ce 01       	movw	r24, r28
    1090:	49 96       	adiw	r24, 0x19	; 25
    1092:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1096:	be 01       	movw	r22, r28
    1098:	67 5e       	subi	r22, 0xE7	; 231
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	ce 01       	movw	r24, r28
    109e:	43 96       	adiw	r24, 0x13	; 19
    10a0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
    10a4:	61 e7       	ldi	r22, 0x71	; 113
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	ce 01       	movw	r24, r28
    10aa:	43 96       	adiw	r24, 0x13	; 19
    10ac:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    10b0:	be 01       	movw	r22, r28
    10b2:	63 5f       	subi	r22, 0xF3	; 243
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
    10ba:	61 e7       	ldi	r22, 0x71	; 113
    10bc:	71 e0       	ldi	r23, 0x01	; 1
    10be:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    10c2:	be 01       	movw	r22, r28
    10c4:	69 5f       	subi	r22, 0xF9	; 249
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
    10cc:	61 e2       	ldi	r22, 0x21	; 33
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    10d4:	be 01       	movw	r22, r28
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
    10de:	61 e2       	ldi	r22, 0x21	; 33
    10e0:	71 e0       	ldi	r23, 0x01	; 1
    10e2:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    10e6:	bc 01       	movw	r22, r24
    10e8:	80 ec       	ldi	r24, 0xC0	; 192
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    10f0:	ce 01       	movw	r24, r28
    10f2:	43 96       	adiw	r24, 0x13	; 19
    10f4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    10f8:	ce 01       	movw	r24, r28
    10fa:	49 96       	adiw	r24, 0x19	; 25
    10fc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    1100:	ce 01       	movw	r24, r28
    1102:	0d 96       	adiw	r24, 0x0d	; 13
    1104:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    1108:	ce 01       	movw	r24, r28
    110a:	07 96       	adiw	r24, 0x07	; 7
    110c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		Serial.println(String(ihour + itimezone) + ":" + String(iminute) + ":" + String(isecond));
    1118:	4a e0       	ldi	r20, 0x0A	; 10
    111a:	b2 01       	movw	r22, r4
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
    1124:	4a e0       	ldi	r20, 0x0A	; 10
    1126:	61 96       	adiw	r28, 0x11	; 17
    1128:	6e ad       	ldd	r22, Y+62	; 0x3e
    112a:	7f ad       	ldd	r23, Y+63	; 0x3f
    112c:	61 97       	sbiw	r28, 0x11	; 17
    112e:	ce 01       	movw	r24, r28
    1130:	07 96       	adiw	r24, 0x07	; 7
    1132:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
    1136:	4a e0       	ldi	r20, 0x0A	; 10
    1138:	b1 01       	movw	r22, r2
    113a:	ce 01       	movw	r24, r28
    113c:	43 96       	adiw	r24, 0x13	; 19
    113e:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1142:	be 01       	movw	r22, r28
    1144:	6d 5e       	subi	r22, 0xED	; 237
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	ce 01       	movw	r24, r28
    114a:	0d 96       	adiw	r24, 0x0d	; 13
    114c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
    1150:	63 e7       	ldi	r22, 0x73	; 115
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	ce 01       	movw	r24, r28
    1156:	0d 96       	adiw	r24, 0x0d	; 13
    1158:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    115c:	be 01       	movw	r22, r28
    115e:	69 5f       	subi	r22, 0xF9	; 249
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
    1166:	63 e7       	ldi	r22, 0x73	; 115
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	0e 94 29 19 	call	0x3252	; 0x3252 <_ZplRK15StringSumHelperPKc>
    116e:	be 01       	movw	r22, r28
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	0e 94 16 19 	call	0x322c	; 0x322c <_ZplRK15StringSumHelperRK6String>
    1178:	bc 01       	movw	r22, r24
    117a:	80 ec       	ldi	r24, 0xC0	; 192
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1182:	ce 01       	movw	r24, r28
    1184:	0d 96       	adiw	r24, 0x0d	; 13
    1186:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    118a:	ce 01       	movw	r24, r28
    118c:	43 96       	adiw	r24, 0x13	; 19
    118e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    1192:	ce 01       	movw	r24, r28
    1194:	07 96       	adiw	r24, 0x07	; 7
    1196:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		#endif
	}
	else if (s_GPSData.startsWith("$GPRMC,",0) || s_GPSData.startsWith("$GNRMC,",0))
	{
		String s_Time = getValue(s_GPSData,',',1);
		String s_Date = getValue(s_GPSData,',',9);
    11a2:	ce 01       	movw	r24, r28
    11a4:	4f 96       	adiw	r24, 0x1f	; 31
    11a6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
			holdingRegs[SECOND] = isecond;
		}
		
		#ifdef DEBUG_GPS
		Serial.print(String(iyear+2000) + "/" + String(imonth) + "/" + String(iday) + " " + String(idayofweek) + " ");
		Serial.println(String(ihour + itimezone) + ":" + String(iminute) + ":" + String(isecond));
    11aa:	ce 01       	movw	r24, r28
    11ac:	85 96       	adiw	r24, 0x25	; 37
    11ae:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		#endif
	}

    11b2:	c6 5a       	subi	r28, 0xA6	; 166
    11b4:	df 4f       	sbci	r29, 0xFF	; 255
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	2f 90       	pop	r2
    11e4:	08 95       	ret

000011e6 <loop>:
	#endif

}

void loop() // run over and over
{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <loop+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <loop+0x8>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <loop+0xa>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	// modbus_update() is the only method used in loop(). It returns the total error
	// count since the slave started. You don't have to use it but it's useful
	// for fault finding by the modbus master.
	
	modbus_update();
    11f4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_Z13modbus_updatev>
	
	checkKeyPad(holdingRegs);
    11f8:	84 ee       	ldi	r24, 0xE4	; 228
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 b5 03 	call	0x76a	; 0x76a <_Z11checkKeyPadPj>

	if (stringComplete) {
    1200:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
    1204:	88 23       	and	r24, r24
    1206:	b1 f0       	breq	.+44     	; 0x1234 <loop+0x4e>
		processGPSString(inputString);
    1208:	6f eb       	ldi	r22, 0xBF	; 191
    120a:	71 e0       	ldi	r23, 0x01	; 1
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6StringC1ERKS_>
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_Z16processGPSString6String>
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
		//RS485_Serial.println(inputString);
		// clear the string:
		inputString = "";
    1224:	6f ea       	ldi	r22, 0xAF	; 175
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	8f eb       	ldi	r24, 0xBF	; 191
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
		stringComplete = false;
    1230:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end>
	}
}
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_GLOBAL__sub_I_fLat>:
};

unsigned int holdingRegs[HOLDING_REGS_SIZE]; // function 3 and 16 register array
////////////////////////////////////////////////////////////

SoftwareSerial RS485_Serial(pin_RS485_RX, pin_RS485_TX); // RX, TX
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	44 e0       	ldi	r20, 0x04	; 4
    124a:	63 e0       	ldi	r22, 0x03	; 3
    124c:	85 ec       	ldi	r24, 0xC5	; 197
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN14SoftwareSerialC1Ehhb>

String inputString = "";         // a string to hold incoming data
    1254:	6f ea       	ldi	r22, 0xAF	; 175
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	8f eb       	ldi	r24, 0xBF	; 191
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>

00001260 <_GLOBAL__sub_D_fLat>:
    1260:	8f eb       	ldi	r24, 0xBF	; 191
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN6StringD1Ev>
};

unsigned int holdingRegs[HOLDING_REGS_SIZE]; // function 3 and 16 register array
////////////////////////////////////////////////////////////

SoftwareSerial RS485_Serial(pin_RS485_RX, pin_RS485_TX); // RX, TX
    1268:	85 ec       	ldi	r24, 0xC5	; 197
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <_ZN14SoftwareSerialD1Ev>

00001270 <_Z11serialEventv>:
SerialEvent occurs whenever a new data comes in the
hardware serial RX.  This routine is run between each
time loop() runs, so using delay inside loop can delay
response.  Multiple bytes of data may be available.
*/
void serialEvent() {
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
		// add it to the inputString:
		inputString += inChar;
		// if the incoming character is a newline, set a flag
		// so the main loop can do something about it:
		if (inChar == '\n') {
			stringComplete = true;
    1274:	d1 e0       	ldi	r29, 0x01	; 1
hardware serial RX.  This routine is run between each
time loop() runs, so using delay inside loop can delay
response.  Multiple bytes of data may be available.
*/
void serialEvent() {
	while (Serial.available()) {
    1276:	80 ec       	ldi	r24, 0xC0	; 192
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN14HardwareSerial9availableEv>
    127e:	89 2b       	or	r24, r25
    1280:	79 f0       	breq	.+30     	; 0x12a0 <_Z11serialEventv+0x30>
		// get the new byte:
		char inChar = (char)Serial.read();
    1282:	80 ec       	ldi	r24, 0xC0	; 192
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN14HardwareSerial4readEv>
    128a:	c8 2f       	mov	r28, r24

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    128c:	68 2f       	mov	r22, r24
    128e:	8f eb       	ldi	r24, 0xBF	; 191
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN6String6concatEc>
		// add it to the inputString:
		inputString += inChar;
		// if the incoming character is a newline, set a flag
		// so the main loop can do something about it:
		if (inChar == '\n') {
    1296:	ca 30       	cpi	r28, 0x0A	; 10
    1298:	71 f7       	brne	.-36     	; 0x1276 <_Z11serialEventv+0x6>
			stringComplete = true;
    129a:	d0 93 be 01 	sts	0x01BE, r29	; 0x8001be <__data_end>
    129e:	eb cf       	rjmp	.-42     	; 0x1276 <_Z11serialEventv+0x6>
		}
	}
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <_Z8getValue6Stringci>:
 */ 

 #include "Functions.h"

 String getValue(String data, char separator, int index)
 {
    12a6:	2f 92       	push	r2
    12a8:	3f 92       	push	r3
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <_Z8getValue6Stringci+0x26>
    12cc:	1f 92       	push	r1
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	5c 01       	movw	r10, r24
    12d4:	4b 01       	movw	r8, r22
    12d6:	29 01       	movw	r4, r18
	 int found = 0;
	 int strIndex[] = {
	 0, -1  };
	 int maxIndex = data.length()-1;
    12d8:	fb 01       	movw	r30, r22
    12da:	04 81       	ldd	r16, Z+4	; 0x04
    12dc:	15 81       	ldd	r17, Z+5	; 0x05
    12de:	01 50       	subi	r16, 0x01	; 1
    12e0:	11 09       	sbc	r17, r1
	 for(int i=0; i<=maxIndex && found<=index; i++){
    12e2:	61 2c       	mov	r6, r1
    12e4:	71 2c       	mov	r7, r1

 String getValue(String data, char separator, int index)
 {
	 int found = 0;
	 int strIndex[] = {
	 0, -1  };
    12e6:	cc 24       	eor	r12, r12
    12e8:	ca 94       	dec	r12
    12ea:	dc 2c       	mov	r13, r12
    12ec:	21 2c       	mov	r2, r1
    12ee:	31 2c       	mov	r3, r1

 #include "Functions.h"

 String getValue(String data, char separator, int index)
 {
	 int found = 0;
    12f0:	e1 2c       	mov	r14, r1
    12f2:	f1 2c       	mov	r15, r1
    12f4:	7b 82       	std	Y+3, r7	; 0x03
    12f6:	6a 82       	std	Y+2, r6	; 0x02
	 int strIndex[] = {
	 0, -1  };
	 int maxIndex = data.length()-1;
	 for(int i=0; i<=maxIndex && found<=index; i++){
    12f8:	06 15       	cp	r16, r6
    12fa:	17 05       	cpc	r17, r7
    12fc:	7c f1       	brlt	.+94     	; 0x135c <_Z8getValue6Stringci+0xb6>
    12fe:	4e 14       	cp	r4, r14
    1300:	5f 04       	cpc	r5, r15
    1302:	2c f1       	brlt	.+74     	; 0x134e <_Z8getValue6Stringci+0xa8>
		 if(data.charAt(i)==separator || i==maxIndex){
    1304:	6a 81       	ldd	r22, Y+2	; 0x02
    1306:	7b 81       	ldd	r23, Y+3	; 0x03
    1308:	c4 01       	movw	r24, r8
    130a:	49 83       	std	Y+1, r20	; 0x01
    130c:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZNK6String6charAtEj>
    1310:	2a 81       	ldd	r18, Y+2	; 0x02
    1312:	3b 81       	ldd	r19, Y+3	; 0x03
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	49 81       	ldd	r20, Y+1	; 0x01
    131a:	84 17       	cp	r24, r20
    131c:	41 f0       	breq	.+16     	; 0x132e <_Z8getValue6Stringci+0x88>
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	9b 81       	ldd	r25, Y+3	; 0x03
    1322:	80 17       	cp	r24, r16
    1324:	91 07       	cpc	r25, r17
    1326:	19 f0       	breq	.+6      	; 0x132e <_Z8getValue6Stringci+0x88>
    1328:	db 82       	std	Y+3, r13	; 0x03
    132a:	ca 82       	std	Y+2, r12	; 0x02
    132c:	0c c0       	rjmp	.+24     	; 0x1346 <_Z8getValue6Stringci+0xa0>
			 found++;
    132e:	9f ef       	ldi	r25, 0xFF	; 255
    1330:	e9 1a       	sub	r14, r25
    1332:	f9 0a       	sbc	r15, r25
			 strIndex[0] = strIndex[1]+1;
    1334:	16 01       	movw	r2, r12
    1336:	ef ef       	ldi	r30, 0xFF	; 255
    1338:	2e 1a       	sub	r2, r30
    133a:	3e 0a       	sbc	r3, r30
			 strIndex[1] = (i == maxIndex) ? i+1 : i;
    133c:	60 16       	cp	r6, r16
    133e:	71 06       	cpc	r7, r17
    1340:	11 f4       	brne	.+4      	; 0x1346 <_Z8getValue6Stringci+0xa0>
    1342:	3b 83       	std	Y+3, r19	; 0x03
    1344:	2a 83       	std	Y+2, r18	; 0x02
    1346:	39 01       	movw	r6, r18

 #include "Functions.h"

 String getValue(String data, char separator, int index)
 {
	 int found = 0;
    1348:	ca 80       	ldd	r12, Y+2	; 0x02
    134a:	db 80       	ldd	r13, Y+3	; 0x03
    134c:	d3 cf       	rjmp	.-90     	; 0x12f4 <_Z8getValue6Stringci+0x4e>
			 found++;
			 strIndex[0] = strIndex[1]+1;
			 strIndex[1] = (i == maxIndex) ? i+1 : i;
		 }
	 }
	 return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
    134e:	96 01       	movw	r18, r12
    1350:	a1 01       	movw	r20, r2
    1352:	b4 01       	movw	r22, r8
    1354:	c5 01       	movw	r24, r10
    1356:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZNK6String9substringEjj>
    135a:	08 c0       	rjmp	.+16     	; 0x136c <_Z8getValue6Stringci+0xc6>
    135c:	4e 14       	cp	r4, r14
    135e:	5f 04       	cpc	r5, r15
    1360:	b4 f3       	brlt	.-20     	; 0x134e <_Z8getValue6Stringci+0xa8>
    1362:	6f ea       	ldi	r22, 0xAF	; 175
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	c5 01       	movw	r24, r10
    1368:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
 }
    136c:	c5 01       	movw	r24, r10
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	9f 90       	pop	r9
    138a:	8f 90       	pop	r8
    138c:	7f 90       	pop	r7
    138e:	6f 90       	pop	r6
    1390:	5f 90       	pop	r5
    1392:	4f 90       	pop	r4
    1394:	3f 90       	pop	r3
    1396:	2f 90       	pop	r2
    1398:	08 95       	ret

0000139a <_Z9dayofweekiii>:

 int dayofweek(int y, int m, int d)	/* 1 <= m <= 12,  y > 1752 (in the U.K.) */
 {
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	fb 01       	movw	r30, r22
    13a4:	8a 01       	movw	r16, r20
	 static int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	 y -= m < 3;
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	63 30       	cpi	r22, 0x03	; 3
    13ac:	71 05       	cpc	r23, r1
    13ae:	14 f0       	brlt	.+4      	; 0x13b4 <_Z9dayofweekiii+0x1a>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	ac 01       	movw	r20, r24
    13b6:	42 1b       	sub	r20, r18
    13b8:	53 0b       	sbc	r21, r19
    13ba:	9a 01       	movw	r18, r20
	 return (y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
    13bc:	ba 01       	movw	r22, r20
    13be:	57 ff       	sbrs	r21, 7
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_Z9dayofweekiii+0x2c>
    13c2:	6d 5f       	subi	r22, 0xFD	; 253
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	75 95       	asr	r23
    13c8:	67 95       	ror	r22
    13ca:	75 95       	asr	r23
    13cc:	67 95       	ror	r22
    13ce:	e9 01       	movw	r28, r18
    13d0:	c6 0f       	add	r28, r22
    13d2:	d7 1f       	adc	r29, r23
    13d4:	c9 01       	movw	r24, r18
    13d6:	6c e9       	ldi	r22, 0x9C	; 156
    13d8:	7f ef       	ldi	r23, 0xFF	; 255
    13da:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodhi4>
    13de:	c6 0f       	add	r28, r22
    13e0:	d7 1f       	adc	r29, r23
    13e2:	c9 01       	movw	r24, r18
    13e4:	60 e9       	ldi	r22, 0x90	; 144
    13e6:	71 e0       	ldi	r23, 0x01	; 1
    13e8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodhi4>
    13ec:	ce 01       	movw	r24, r28
    13ee:	86 0f       	add	r24, r22
    13f0:	97 1f       	adc	r25, r23
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	ed 58       	subi	r30, 0x8D	; 141
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	82 0f       	add	r24, r18
    1400:	93 1f       	adc	r25, r19
    1402:	80 0f       	add	r24, r16
    1404:	91 1f       	adc	r25, r17
    1406:	67 e0       	ldi	r22, 0x07	; 7
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodhi4>
 }
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	08 95       	ret

00001418 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1418:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    141c:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    1420:	28 17       	cp	r18, r24
    1422:	39 07       	cpc	r19, r25
    1424:	b9 f4       	brne	.+46     	; 0x1454 <_ZN14SoftwareSerial4readEv+0x3c>
    1426:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    142a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    142e:	98 17       	cp	r25, r24
    1430:	89 f0       	breq	.+34     	; 0x1454 <_ZN14SoftwareSerial4readEv+0x3c>
    1432:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	e2 5d       	subi	r30, 0xD2	; 210
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	80 81       	ld	r24, Z
    143e:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	2f 73       	andi	r18, 0x3F	; 63
    144a:	33 27       	eor	r19, r19
    144c:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	08 95       	ret
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    1458:	08 95       	ret

0000145a <_ZN14SoftwareSerial5writeEh>:
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	dc 01       	movw	r26, r24
    1462:	5c 96       	adiw	r26, 0x1c	; 28
    1464:	2d 91       	ld	r18, X+
    1466:	3c 91       	ld	r19, X
    1468:	5d 97       	sbiw	r26, 0x1d	; 29
    146a:	21 15       	cp	r18, r1
    146c:	31 05       	cpc	r19, r1
    146e:	39 f4       	brne	.+14     	; 0x147e <_ZN14SoftwareSerial5writeEh+0x24>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	13 96       	adiw	r26, 0x03	; 3
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
    147a:	12 97       	sbiw	r26, 0x02	; 2
    147c:	3d c0       	rjmp	.+122    	; 0x14f8 <_ZN14SoftwareSerial5writeEh+0x9e>
    147e:	51 96       	adiw	r26, 0x11	; 17
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	52 97       	sbiw	r26, 0x12	; 18
    1486:	50 96       	adiw	r26, 0x10	; 16
    1488:	9c 91       	ld	r25, X
    148a:	50 97       	sbiw	r26, 0x10	; 16
    148c:	89 2f       	mov	r24, r25
    148e:	80 95       	com	r24
    1490:	1f b7       	in	r17, 0x3f	; 63
    1492:	5e 96       	adiw	r26, 0x1e	; 30
    1494:	4c 91       	ld	r20, X
    1496:	5e 97       	sbiw	r26, 0x1e	; 30
    1498:	41 fb       	bst	r20, 1
    149a:	77 27       	eor	r23, r23
    149c:	70 f9       	bld	r23, 0
    149e:	41 fd       	sbrc	r20, 1
    14a0:	60 95       	com	r22
    14a2:	f8 94       	cli
    14a4:	40 81       	ld	r20, Z
    14a6:	77 23       	and	r23, r23
    14a8:	11 f0       	breq	.+4      	; 0x14ae <_ZN14SoftwareSerial5writeEh+0x54>
    14aa:	49 2b       	or	r20, r25
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <_ZN14SoftwareSerial5writeEh+0x56>
    14ae:	48 23       	and	r20, r24
    14b0:	40 83       	st	Z, r20
    14b2:	e9 01       	movw	r28, r18
    14b4:	21 97       	sbiw	r28, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <_ZN14SoftwareSerial5writeEh+0x5a>
    14b8:	48 e0       	ldi	r20, 0x08	; 8
    14ba:	50 81       	ld	r21, Z
    14bc:	60 ff       	sbrs	r22, 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <_ZN14SoftwareSerial5writeEh+0x6a>
    14c0:	59 2b       	or	r21, r25
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <_ZN14SoftwareSerial5writeEh+0x6c>
    14c4:	58 23       	and	r21, r24
    14c6:	50 83       	st	Z, r21
    14c8:	e9 01       	movw	r28, r18
    14ca:	21 97       	sbiw	r28, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <_ZN14SoftwareSerial5writeEh+0x70>
    14ce:	66 95       	lsr	r22
    14d0:	41 50       	subi	r20, 0x01	; 1
    14d2:	99 f7       	brne	.-26     	; 0x14ba <_ZN14SoftwareSerial5writeEh+0x60>
    14d4:	77 23       	and	r23, r23
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <_ZN14SoftwareSerial5writeEh+0x86>
    14d8:	90 81       	ld	r25, Z
    14da:	89 23       	and	r24, r25
    14dc:	80 83       	st	Z, r24
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <_ZN14SoftwareSerial5writeEh+0x8c>
    14e0:	80 81       	ld	r24, Z
    14e2:	98 2b       	or	r25, r24
    14e4:	90 83       	st	Z, r25
    14e6:	1f bf       	out	0x3f, r17	; 63
    14e8:	5c 96       	adiw	r26, 0x1c	; 28
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	5d 97       	sbiw	r26, 0x1d	; 29
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <_ZN14SoftwareSerial5writeEh+0x96>
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	c9 01       	movw	r24, r18
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	08 95       	ret

00001502 <_ZN14SoftwareSerial5flushEv>:
    1502:	08 95       	ret

00001504 <_ZN14SoftwareSerial4peekEv>:
    1504:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    1508:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	71 f4       	brne	.+28     	; 0x152e <_ZN14SoftwareSerial4peekEv+0x2a>
    1512:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1516:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    151a:	98 17       	cp	r25, r24
    151c:	41 f0       	breq	.+16     	; 0x152e <_ZN14SoftwareSerial4peekEv+0x2a>
    151e:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	e2 5d       	subi	r30, 0xD2	; 210
    1526:	fd 4f       	sbci	r31, 0xFD	; 253
    1528:	80 81       	ld	r24, Z
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	08 95       	ret
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	9f ef       	ldi	r25, 0xFF	; 255
    1532:	08 95       	ret

00001534 <_ZN14SoftwareSerial9availableEv>:
    1534:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    1538:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    153c:	28 17       	cp	r18, r24
    153e:	39 07       	cpc	r19, r25
    1540:	71 f4       	brne	.+28     	; 0x155e <_ZN14SoftwareSerial9availableEv+0x2a>
    1542:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1546:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	80 5c       	subi	r24, 0xC0	; 192
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	82 1b       	sub	r24, r18
    1552:	91 09       	sbc	r25, r1
    1554:	60 e4       	ldi	r22, 0x40	; 64
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodhi4>
    155c:	08 95       	ret
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	08 95       	ret

00001564 <_ZN14SoftwareSerial13stopListeningEv>:
    1564:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    1568:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    156c:	e8 17       	cp	r30, r24
    156e:	f9 07       	cpc	r31, r25
    1570:	69 f4       	brne	.+26     	; 0x158c <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1572:	a3 89       	ldd	r26, Z+19	; 0x13
    1574:	b4 89       	ldd	r27, Z+20	; 0x14
    1576:	9c 91       	ld	r25, X
    1578:	85 89       	ldd	r24, Z+21	; 0x15
    157a:	80 95       	com	r24
    157c:	89 23       	and	r24, r25
    157e:	8c 93       	st	X, r24
    1580:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    1584:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	08 95       	ret
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	08 95       	ret

00001590 <_ZN14SoftwareSerial6listenEv>:
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
    1596:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1598:	9b 8d       	ldd	r25, Y+27	; 0x1b
    159a:	89 2b       	or	r24, r25
    159c:	f1 f0       	breq	.+60     	; 0x15da <_ZN14SoftwareSerial6listenEv+0x4a>
    159e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    15a2:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    15a6:	8c 17       	cp	r24, r28
    15a8:	9d 07       	cpc	r25, r29
    15aa:	b9 f0       	breq	.+46     	; 0x15da <_ZN14SoftwareSerial6listenEv+0x4a>
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <_ZN14SoftwareSerial6listenEv+0x24>
    15b0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN14SoftwareSerial13stopListeningEv>
    15b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b6:	8e 7f       	andi	r24, 0xFE	; 254
    15b8:	8e 8f       	std	Y+30, r24	; 0x1e
    15ba:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15be:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    15c2:	d0 93 6f 02 	sts	0x026F, r29	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    15c6:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    15ca:	eb 89       	ldd	r30, Y+19	; 0x13
    15cc:	fc 89       	ldd	r31, Y+20	; 0x14
    15ce:	90 81       	ld	r25, Z
    15d0:	8d 89       	ldd	r24, Y+21	; 0x15
    15d2:	89 2b       	or	r24, r25
    15d4:	80 83       	st	Z, r24
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <_ZN14SoftwareSerial6listenEv+0x4c>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <__vector_3>:
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE>
    1608:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <_ZN14SoftwareSerial13active_objectE+0x1>
    160c:	30 97       	sbiw	r30, 0x00	; 0
    160e:	09 f4       	brne	.+2      	; 0x1612 <__vector_3+0x30>
    1610:	51 c0       	rjmp	.+162    	; 0x16b4 <__vector_3+0xd2>
    1612:	96 8d       	ldd	r25, Z+30	; 0x1e
    1614:	a6 85       	ldd	r26, Z+14	; 0x0e
    1616:	b7 85       	ldd	r27, Z+15	; 0x0f
    1618:	85 85       	ldd	r24, Z+13	; 0x0d
    161a:	91 ff       	sbrs	r25, 1
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <__vector_3+0x44>
    161e:	9c 91       	ld	r25, X
    1620:	89 23       	and	r24, r25
    1622:	29 f4       	brne	.+10     	; 0x162e <__vector_3+0x4c>
    1624:	47 c0       	rjmp	.+142    	; 0x16b4 <__vector_3+0xd2>
    1626:	9c 91       	ld	r25, X
    1628:	89 23       	and	r24, r25
    162a:	09 f0       	breq	.+2      	; 0x162e <__vector_3+0x4c>
    162c:	43 c0       	rjmp	.+134    	; 0x16b4 <__vector_3+0xd2>
    162e:	a3 89       	ldd	r26, Z+19	; 0x13
    1630:	b4 89       	ldd	r27, Z+20	; 0x14
    1632:	9c 91       	ld	r25, X
    1634:	85 89       	ldd	r24, Z+21	; 0x15
    1636:	80 95       	com	r24
    1638:	89 23       	and	r24, r25
    163a:	8c 93       	st	X, r24
    163c:	86 89       	ldd	r24, Z+22	; 0x16
    163e:	97 89       	ldd	r25, Z+23	; 0x17
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <__vector_3+0x5e>
    1644:	60 8d       	ldd	r22, Z+24	; 0x18
    1646:	71 8d       	ldd	r23, Z+25	; 0x19
    1648:	a6 85       	ldd	r26, Z+14	; 0x0e
    164a:	b7 85       	ldd	r27, Z+15	; 0x0f
    164c:	55 85       	ldd	r21, Z+13	; 0x0d
    164e:	38 e0       	ldi	r19, 0x08	; 8
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	cb 01       	movw	r24, r22
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <__vector_3+0x72>
    1658:	82 2f       	mov	r24, r18
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	95 95       	asr	r25
    165e:	87 95       	ror	r24
    1660:	28 2f       	mov	r18, r24
    1662:	4c 91       	ld	r20, X
    1664:	45 23       	and	r20, r21
    1666:	09 f0       	breq	.+2      	; 0x166a <__vector_3+0x88>
    1668:	20 68       	ori	r18, 0x80	; 128
    166a:	31 50       	subi	r19, 0x01	; 1
    166c:	91 f7       	brne	.-28     	; 0x1652 <__vector_3+0x70>
    166e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1670:	81 fd       	sbrc	r24, 1
    1672:	20 95       	com	r18
    1674:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	8f 73       	andi	r24, 0x3F	; 63
    167e:	99 27       	eor	r25, r25
    1680:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <_ZN14SoftwareSerial20_receive_buffer_headE>
    1684:	38 17       	cp	r19, r24
    1686:	49 f0       	breq	.+18     	; 0x169a <__vector_3+0xb8>
    1688:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	a2 5d       	subi	r26, 0xD2	; 210
    1690:	bd 4f       	sbci	r27, 0xFD	; 253
    1692:	2c 93       	st	X, r18
    1694:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <__vector_3+0xbe>
    169a:	86 8d       	ldd	r24, Z+30	; 0x1e
    169c:	81 60       	ori	r24, 0x01	; 1
    169e:	86 8f       	std	Z+30, r24	; 0x1e
    16a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <__vector_3+0xc2>
    16a8:	a3 89       	ldd	r26, Z+19	; 0x13
    16aa:	b4 89       	ldd	r27, Z+20	; 0x14
    16ac:	9c 91       	ld	r25, X
    16ae:	85 89       	ldd	r24, Z+21	; 0x15
    16b0:	89 2b       	or	r24, r25
    16b2:	8c 93       	st	X, r24
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <_ZN14SoftwareSerialD1Ev>:
    16d6:	21 e9       	ldi	r18, 0x91	; 145
    16d8:	31 e0       	ldi	r19, 0x01	; 1
    16da:	fc 01       	movw	r30, r24
    16dc:	31 83       	std	Z+1, r19	; 0x01
    16de:	20 83       	st	Z, r18
    16e0:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_ZN14SoftwareSerial13stopListeningEv>

000016e4 <_ZN14SoftwareSerial5setTXEh>:
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	16 2f       	mov	r17, r22
    16ee:	6e 8d       	ldd	r22, Y+30	; 0x1e
    16f0:	66 95       	lsr	r22
    16f2:	61 70       	andi	r22, 0x01	; 1
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	68 27       	eor	r22, r24
    16f8:	81 2f       	mov	r24, r17
    16fa:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	81 2f       	mov	r24, r17
    1702:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
    1706:	61 2f       	mov	r22, r17
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	fb 01       	movw	r30, r22
    170c:	ed 5c       	subi	r30, 0xCD	; 205
    170e:	fd 4f       	sbci	r31, 0xFD	; 253
    1710:	e4 91       	lpm	r30, Z
    1712:	e8 8b       	std	Y+16, r30	; 0x10
    1714:	fb 01       	movw	r30, r22
    1716:	e9 5b       	subi	r30, 0xB9	; 185
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	e4 91       	lpm	r30, Z
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	eb 59       	subi	r30, 0x9B	; 155
    1724:	fd 4f       	sbci	r31, 0xFD	; 253
    1726:	85 91       	lpm	r24, Z+
    1728:	94 91       	lpm	r25, Z
    172a:	9a 8b       	std	Y+18, r25	; 0x12
    172c:	89 8b       	std	Y+17, r24	; 0x11
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	08 95       	ret

00001736 <_ZN14SoftwareSerial5setRXEh>:
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	ec 01       	movw	r28, r24
    173e:	16 2f       	mov	r17, r22
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	81 2f       	mov	r24, r17
    1744:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
    1748:	8e 8d       	ldd	r24, Y+30	; 0x1e
    174a:	81 fd       	sbrc	r24, 1
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <_ZN14SoftwareSerial5setRXEh+0x20>
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	81 2f       	mov	r24, r17
    1752:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
    1756:	1c 87       	std	Y+12, r17	; 0x0c
    1758:	61 2f       	mov	r22, r17
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	fb 01       	movw	r30, r22
    175e:	ed 5c       	subi	r30, 0xCD	; 205
    1760:	fd 4f       	sbci	r31, 0xFD	; 253
    1762:	e4 91       	lpm	r30, Z
    1764:	ed 87       	std	Y+13, r30	; 0x0d
    1766:	fb 01       	movw	r30, r22
    1768:	e9 5b       	subi	r30, 0xB9	; 185
    176a:	fd 4f       	sbci	r31, 0xFD	; 253
    176c:	e4 91       	lpm	r30, Z
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	e5 5a       	subi	r30, 0xA5	; 165
    1776:	fd 4f       	sbci	r31, 0xFD	; 253
    1778:	85 91       	lpm	r24, Z+
    177a:	94 91       	lpm	r25, Z
    177c:	9f 87       	std	Y+15, r25	; 0x0f
    177e:	8e 87       	std	Y+14, r24	; 0x0e
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	08 95       	ret

00001788 <_ZN14SoftwareSerialC1Ehhb>:
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	16 2f       	mov	r17, r22
    1792:	1b 82       	std	Y+3, r1	; 0x03
    1794:	1a 82       	std	Y+2, r1	; 0x02
    1796:	88 ee       	ldi	r24, 0xE8	; 232
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	8c 83       	std	Y+4, r24	; 0x04
    17a0:	9d 83       	std	Y+5, r25	; 0x05
    17a2:	ae 83       	std	Y+6, r26	; 0x06
    17a4:	bf 83       	std	Y+7, r27	; 0x07
    17a6:	81 e9       	ldi	r24, 0x91	; 145
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	99 83       	std	Y+1, r25	; 0x01
    17ac:	88 83       	st	Y, r24
    17ae:	1f 8a       	std	Y+23, r1	; 0x17
    17b0:	1e 8a       	std	Y+22, r1	; 0x16
    17b2:	19 8e       	std	Y+25, r1	; 0x19
    17b4:	18 8e       	std	Y+24, r1	; 0x18
    17b6:	1b 8e       	std	Y+27, r1	; 0x1b
    17b8:	1a 8e       	std	Y+26, r1	; 0x1a
    17ba:	1d 8e       	std	Y+29, r1	; 0x1d
    17bc:	1c 8e       	std	Y+28, r1	; 0x1c
    17be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c0:	8e 7f       	andi	r24, 0xFE	; 254
    17c2:	20 fb       	bst	r18, 0
    17c4:	81 f9       	bld	r24, 1
    17c6:	8e 8f       	std	Y+30, r24	; 0x1e
    17c8:	64 2f       	mov	r22, r20
    17ca:	ce 01       	movw	r24, r28
    17cc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN14SoftwareSerial5setTXEh>
    17d0:	61 2f       	mov	r22, r17
    17d2:	ce 01       	movw	r24, r28
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_ZN14SoftwareSerial5setRXEh>

000017de <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	9a 01       	movw	r18, r20
    17e6:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    17e8:	1b 8e       	std	Y+27, r1	; 0x1b
    17ea:	1a 8e       	std	Y+26, r1	; 0x1a
    17ec:	19 8e       	std	Y+25, r1	; 0x19
    17ee:	18 8e       	std	Y+24, r1	; 0x18
    17f0:	1f 8a       	std	Y+23, r1	; 0x17
    17f2:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	79 e0       	ldi	r23, 0x09	; 9
    17f8:	8d e3       	ldi	r24, 0x3D	; 61
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 2f 1a 	call	0x345e	; 0x345e <__divmodsi4>
    1800:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1802:	24 30       	cpi	r18, 0x04	; 4
    1804:	31 05       	cpc	r19, r1
    1806:	18 f0       	brcs	.+6      	; 0x180e <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1808:	c9 01       	movw	r24, r18
    180a:	03 97       	sbiw	r24, 0x03	; 3
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    1812:	9d 8f       	std	Y+29, r25	; 0x1d
    1814:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    1816:	6c 85       	ldd	r22, Y+12	; 0x0c
    1818:	66 31       	cpi	r22, 0x16	; 22
    181a:	08 f0       	brcs	.+2      	; 0x181e <_ZN14SoftwareSerial5beginEl+0x40>
    181c:	69 c0       	rjmp	.+210    	; 0x18f0 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    181e:	c9 01       	movw	r24, r18
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1824:	84 31       	cpi	r24, 0x14	; 20
    1826:	91 05       	cpc	r25, r1
    1828:	10 f0       	brcs	.+4      	; 0x182e <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    182a:	43 97       	sbiw	r24, 0x13	; 19
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1832:	9f 8b       	std	Y+23, r25	; 0x17
    1834:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1836:	36 97       	sbiw	r30, 0x06	; 6
    1838:	18 f0       	brcs	.+6      	; 0x1840 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    183a:	c9 01       	movw	r24, r18
    183c:	05 97       	sbiw	r24, 0x05	; 5
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1844:	99 8f       	std	Y+25, r25	; 0x19
    1846:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1848:	c9 01       	movw	r24, r18
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	28 0f       	add	r18, r24
    1850:	39 1f       	adc	r19, r25
    1852:	36 95       	lsr	r19
    1854:	27 95       	ror	r18
    1856:	36 95       	lsr	r19
    1858:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    185a:	2d 30       	cpi	r18, 0x0D	; 13
    185c:	31 05       	cpc	r19, r1
    185e:	18 f0       	brcs	.+6      	; 0x1866 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    1860:	2c 50       	subi	r18, 0x0C	; 12
    1862:	31 09       	sbc	r19, r1
    1864:	02 c0       	rjmp	.+4      	; 0x186a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    186a:	3b 8f       	std	Y+27, r19	; 0x1b
    186c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    186e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1872:	68 30       	cpi	r22, 0x08	; 8
    1874:	50 f0       	brcs	.+20     	; 0x188a <_ZN14SoftwareSerial5beginEl+0xac>
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	6e 30       	cpi	r22, 0x0E	; 14
    187a:	08 f4       	brcc	.+2      	; 0x187e <_ZN14SoftwareSerial5beginEl+0xa0>
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <_ZN14SoftwareSerial5beginEl+0xa6>
    1882:	88 0f       	add	r24, r24
    1884:	2a 95       	dec	r18
    1886:	ea f7       	brpl	.-6      	; 0x1882 <_ZN14SoftwareSerial5beginEl+0xa4>
    1888:	01 c0       	rjmp	.+2      	; 0x188c <_ZN14SoftwareSerial5beginEl+0xae>
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	89 2b       	or	r24, r25
    188e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1892:	8c 85       	ldd	r24, Y+12	; 0x0c
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	38 f0       	brcs	.+14     	; 0x18a6 <_ZN14SoftwareSerial5beginEl+0xc8>
    1898:	8e 30       	cpi	r24, 0x0E	; 14
    189a:	40 f0       	brcs	.+16     	; 0x18ac <_ZN14SoftwareSerial5beginEl+0xce>
    189c:	86 31       	cpi	r24, 0x16	; 22
    189e:	48 f0       	brcs	.+18     	; 0x18b2 <_ZN14SoftwareSerial5beginEl+0xd4>
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <_ZN14SoftwareSerial5beginEl+0xd8>
    18a6:	2d e6       	ldi	r18, 0x6D	; 109
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	05 c0       	rjmp	.+10     	; 0x18b6 <_ZN14SoftwareSerial5beginEl+0xd8>
    18ac:	2b e6       	ldi	r18, 0x6B	; 107
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <_ZN14SoftwareSerial5beginEl+0xd8>
    18b2:	2c e6       	ldi	r18, 0x6C	; 108
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3c 8b       	std	Y+20, r19	; 0x14
    18b8:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	30 f4       	brcc	.+12     	; 0x18ca <_ZN14SoftwareSerial5beginEl+0xec>
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <_ZN14SoftwareSerial5beginEl+0xe6>
    18c2:	99 0f       	add	r25, r25
    18c4:	8a 95       	dec	r24
    18c6:	ea f7       	brpl	.-6      	; 0x18c2 <_ZN14SoftwareSerial5beginEl+0xe4>
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <_ZN14SoftwareSerial5beginEl+0x108>
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8e 30       	cpi	r24, 0x0E	; 14
    18d0:	18 f4       	brcc	.+6      	; 0x18d8 <_ZN14SoftwareSerial5beginEl+0xfa>
    18d2:	28 50       	subi	r18, 0x08	; 8
    18d4:	31 09       	sbc	r19, r1
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <_ZN14SoftwareSerial5beginEl+0xfe>
    18d8:	2e 50       	subi	r18, 0x0E	; 14
    18da:	31 09       	sbc	r19, r1
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <_ZN14SoftwareSerial5beginEl+0x104>
    18e0:	99 0f       	add	r25, r25
    18e2:	2a 95       	dec	r18
    18e4:	ea f7       	brpl	.-6      	; 0x18e0 <_ZN14SoftwareSerial5beginEl+0x102>
    18e6:	9d 8b       	std	Y+21, r25	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    18e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    18f0:	ce 01       	movw	r24, r28
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    18f6:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <_ZN14SoftwareSerial6listenEv>

000018fa <_Z19modbus_update_commslhh>:
	digitalWrite(TxEnablePin, LOW);
	errorCount = 0; // initialize errorCount
}

void modbus_update_comms(long baud, unsigned char byteFormat, unsigned char _slaveID)
{
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	1f 92       	push	r1
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	6b 01       	movw	r12, r22
    190e:	7c 01       	movw	r14, r24
	(*ModbusPort).begin(baud);//, byteFormat);
    1910:	ab 01       	movw	r20, r22
    1912:	bc 01       	movw	r22, r24
    1914:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <ModbusPort>
    1918:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <ModbusPort+0x1>
    191c:	29 83       	std	Y+1, r18	; 0x01
    191e:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN14SoftwareSerial5beginEl>
	slaveID = _slaveID;
    1922:	29 81       	ldd	r18, Y+1	; 0x01
    1924:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <slaveID>
	// In milliseconds this will be 960characters per 1000ms. So for 1 character
	// 1000ms/960characters is 1.04167ms per character and finally modbus states
	// an inter-character must be 1.5T or 1.5 times longer than a character. Thus
	// 1.5T = 1.04167ms * 1.5 = 1.5625ms. A frame delay is 3.5T.
	
	if (baud > 19200)
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	c8 16       	cp	r12, r24
    192c:	8b e4       	ldi	r24, 0x4B	; 75
    192e:	d8 06       	cpc	r13, r24
    1930:	e1 04       	cpc	r14, r1
    1932:	f1 04       	cpc	r15, r1
    1934:	6c f0       	brlt	.+26     	; 0x1950 <_Z19modbus_update_commslhh+0x56>
	{
		T1_5 = 750;
    1936:	8e ee       	ldi	r24, 0xEE	; 238
    1938:	92 e0       	ldi	r25, 0x02	; 2
    193a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <T1_5+0x1>
    193e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <T1_5>
		T3_5 = 1750;
    1942:	86 ed       	ldi	r24, 0xD6	; 214
    1944:	96 e0       	ldi	r25, 0x06	; 6
    1946:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <T3_5+0x1>
    194a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <T3_5>
    194e:	18 c0       	rjmp	.+48     	; 0x1980 <_Z19modbus_update_commslhh+0x86>
	}
	else
	{
		T1_5 = 15000000/baud; // 1T * 1.5 = T1.5
    1950:	60 ec       	ldi	r22, 0xC0	; 192
    1952:	71 ee       	ldi	r23, 0xE1	; 225
    1954:	84 ee       	ldi	r24, 0xE4	; 228
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a7 01       	movw	r20, r14
    195a:	96 01       	movw	r18, r12
    195c:	0e 94 2f 1a 	call	0x345e	; 0x345e <__divmodsi4>
    1960:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <T1_5+0x1>
    1964:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <T1_5>
		T3_5 = 35000000/baud; // 1T * 3.5 = T3.5
    1968:	60 ec       	ldi	r22, 0xC0	; 192
    196a:	7e e0       	ldi	r23, 0x0E	; 14
    196c:	86 e1       	ldi	r24, 0x16	; 22
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	a7 01       	movw	r20, r14
    1972:	96 01       	movw	r18, r12
    1974:	0e 94 2f 1a 	call	0x345e	; 0x345e <__divmodsi4>
    1978:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <T3_5+0x1>
    197c:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <T3_5>
	}
}
    1980:	0f 90       	pop	r0
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	08 95       	ret

00001990 <_Z16modbus_configureP14SoftwareSeriallhhhjPj>:
unsigned char byteFormat,
unsigned char _slaveID,
unsigned char _TxEnablePin,
unsigned int _holdingRegsSize,
unsigned int* _regs)
{
    1990:	4f 92       	push	r4
    1992:	5f 92       	push	r5
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	0f 93       	push	r16
    19a4:	2a 01       	movw	r4, r20
    19a6:	3b 01       	movw	r6, r22
    19a8:	42 2f       	mov	r20, r18
    19aa:	20 2f       	mov	r18, r16
	ModbusPort = SerialPort;
    19ac:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <ModbusPort+0x1>
    19b0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <ModbusPort>
	modbus_update_comms(baud, byteFormat, _slaveID);
    19b4:	c3 01       	movw	r24, r6
    19b6:	b2 01       	movw	r22, r4
    19b8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_Z19modbus_update_commslhh>
	holdingRegsSize = _holdingRegsSize;
    19bc:	d0 92 7f 02 	sts	0x027F, r13	; 0x80027f <holdingRegsSize+0x1>
    19c0:	c0 92 7e 02 	sts	0x027E, r12	; 0x80027e <holdingRegsSize>
	regs = _regs;
    19c4:	b0 92 7d 02 	sts	0x027D, r11	; 0x80027d <regs+0x1>
    19c8:	a0 92 7c 02 	sts	0x027C, r10	; 0x80027c <regs>
	TxEnablePin = _TxEnablePin;
    19cc:	e0 92 78 02 	sts	0x0278, r14	; 0x800278 <TxEnablePin>
	pinMode(TxEnablePin, OUTPUT);
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	8e 2d       	mov	r24, r14
    19d4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <pinMode>
	digitalWrite(TxEnablePin, LOW);
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <TxEnablePin>
    19de:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
	errorCount = 0; // initialize errorCount
    19e2:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <errorCount+0x1>
    19e6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <errorCount>
}
    19ea:	0f 91       	pop	r16
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	bf 90       	pop	r11
    19f4:	af 90       	pop	r10
    19f6:	7f 90       	pop	r7
    19f8:	6f 90       	pop	r6
    19fa:	5f 90       	pop	r5
    19fc:	4f 90       	pop	r4
    19fe:	08 95       	ret

00001a00 <_Z12calculateCRCh>:
		sendPacket(5);
	}
}

unsigned int calculateCRC(unsigned char bufferSize)
{
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	52 e0       	ldi	r21, 0x02	; 2
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    1a04:	fa 01       	movw	r30, r20
}

unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    1a06:	2f ef       	ldi	r18, 0xFF	; 255
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	9e 2f       	mov	r25, r30
    1a0c:	94 1b       	sub	r25, r20
	for (unsigned char i = 0; i < bufferSize; i++)
    1a0e:	98 17       	cp	r25, r24
    1a10:	88 f4       	brcc	.+34     	; 0x1a34 <_Z12calculateCRCh+0x34>
	{
		temp = temp ^ frame[i];
    1a12:	91 91       	ld	r25, Z+
    1a14:	29 27       	eor	r18, r25
    1a16:	98 e0       	ldi	r25, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    1a18:	b9 01       	movw	r22, r18
    1a1a:	61 70       	andi	r22, 0x01	; 1
    1a1c:	77 27       	eor	r23, r23
			temp >>= 1;
    1a1e:	36 95       	lsr	r19
    1a20:	27 95       	ror	r18
			if (flag)
    1a22:	67 2b       	or	r22, r23
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <_Z12calculateCRCh+0x2e>
			temp ^= 0xA001;
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	26 27       	eor	r18, r22
    1a2a:	60 ea       	ldi	r22, 0xA0	; 160
    1a2c:	36 27       	eor	r19, r22
    1a2e:	91 50       	subi	r25, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    1a30:	99 f7       	brne	.-26     	; 0x1a18 <_Z12calculateCRCh+0x18>
    1a32:	eb cf       	rjmp	.-42     	; 0x1a0a <_Z12calculateCRCh+0xa>
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
}
    1a34:	92 2f       	mov	r25, r18
    1a36:	83 2f       	mov	r24, r19
    1a38:	08 95       	ret

00001a3a <_Z10sendPacketh>:

void sendPacket(unsigned char bufferSize)
{
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	18 2f       	mov	r17, r24
	digitalWrite(TxEnablePin, HIGH);
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <TxEnablePin>
    1a4c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <digitalWrite>
    1a50:	80 e8       	ldi	r24, 0x80	; 128
    1a52:	e8 2e       	mov	r14, r24
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	f8 2e       	mov	r15, r24
	
	for (unsigned char i = 0; i < bufferSize; i++)
    1a58:	e7 01       	movw	r28, r14
    1a5a:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <ModbusPort>
    1a5e:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <ModbusPort+0x1>
    1a62:	9c 2f       	mov	r25, r28
    1a64:	9e 19       	sub	r25, r14
    1a66:	91 17       	cp	r25, r17
    1a68:	50 f4       	brcc	.+20     	; 0x1a7e <_Z10sendPacketh+0x44>
	(*ModbusPort).write(frame[i]);
    1a6a:	69 91       	ld	r22, Y+
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	11 97       	sbiw	r26, 0x01	; 1
    1a72:	01 90       	ld	r0, Z+
    1a74:	f0 81       	ld	r31, Z
    1a76:	e0 2d       	mov	r30, r0
    1a78:	cd 01       	movw	r24, r26
    1a7a:	09 95       	icall
    1a7c:	ee cf       	rjmp	.-36     	; 0x1a5a <_Z10sendPacketh+0x20>
	
	(*ModbusPort).flush();
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	02 84       	ldd	r0, Z+10	; 0x0a
    1a86:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	09 95       	icall
	
	// allow a frame delay to indicate end of transmission
	delayMicroseconds(T3_5);
    1a8e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <T3_5>
    1a92:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <T3_5+0x1>
    1a96:	0e 94 31 16 	call	0x2c62	; 0x2c62 <delayMicroseconds>
	
	digitalWrite(TxEnablePin, LOW);
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <TxEnablePin>
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
	(*ModbusPort).flush();
	
	// allow a frame delay to indicate end of transmission
	delayMicroseconds(T3_5);
	
	digitalWrite(TxEnablePin, LOW);
    1aaa:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <digitalWrite>

00001aae <_Z17exceptionResponseh>:
}

void exceptionResponse(unsigned char exception)
{
	// each call to exceptionResponse() will increment the errorCount
	errorCount++;
    1aae:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <errorCount>
    1ab2:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <errorCount+0x1>
    1ab6:	2f 5f       	subi	r18, 0xFF	; 255
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	30 93 77 02 	sts	0x0277, r19	; 0x800277 <errorCount+0x1>
    1abe:	20 93 76 02 	sts	0x0276, r18	; 0x800276 <errorCount>
	if (!broadcastFlag) // don't respond if its a broadcast message
    1ac2:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <broadcastFlag>
    1ac6:	91 11       	cpse	r25, r1
    1ac8:	15 c0       	rjmp	.+42     	; 0x1af4 <_Z17exceptionResponseh+0x46>
	{
		frame[0] = slaveID;
    1aca:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <slaveID>
    1ace:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <frame>
		frame[1] = (function | 0x80); // set MSB bit high, informs the master of an exception
    1ad2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <function>
    1ad6:	90 68       	ori	r25, 0x80	; 128
    1ad8:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <frame+0x1>
		frame[2] = exception;
    1adc:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <frame+0x2>
		unsigned int crc16 = calculateCRC(3); // ID, function|0x80, exception code
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z12calculateCRCh>
		frame[3] = crc16 >> 8;
    1ae6:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <frame+0x3>
		frame[4] = crc16 & 0xFF;
    1aea:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <frame+0x4>
		// exception response is always 5 bytes
		// ID, function + 0x80, exception code, 2 bytes crc
		sendPacket(5);
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_Z10sendPacketh>
    1af4:	08 95       	ret

00001af6 <_Z13modbus_updatev>:
		T3_5 = 35000000/baud; // 1T * 3.5 = T3.5
	}
}

unsigned int modbus_update()
{
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
	if ((*ModbusPort).available())
    1afe:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <ModbusPort>
    1b02:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <ModbusPort+0x1>
    1b06:	dc 01       	movw	r26, r24
    1b08:	ed 91       	ld	r30, X+
    1b0a:	fc 91       	ld	r31, X
    1b0c:	04 80       	ldd	r0, Z+4	; 0x04
    1b0e:	f5 81       	ldd	r31, Z+5	; 0x05
    1b10:	e0 2d       	mov	r30, r0
    1b12:	09 95       	icall
    1b14:	89 2b       	or	r24, r25
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <_Z13modbus_updatev+0x24>
    1b18:	34 c1       	rjmp	.+616    	; 0x1d82 <_Z13modbus_updatev+0x28c>
    1b1a:	d0 e0       	ldi	r29, 0x00	; 0
    1b1c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		unsigned char buffer = 0;
		unsigned char overflow = 0;
		
		while ((*ModbusPort).available())
    1b1e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <ModbusPort>
    1b22:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <ModbusPort+0x1>
    1b26:	dc 01       	movw	r26, r24
    1b28:	ed 91       	ld	r30, X+
    1b2a:	fc 91       	ld	r31, X
    1b2c:	04 80       	ldd	r0, Z+4	; 0x04
    1b2e:	f5 81       	ldd	r31, Z+5	; 0x05
    1b30:	e0 2d       	mov	r30, r0
    1b32:	09 95       	icall
    1b34:	89 2b       	or	r24, r25
    1b36:	31 f1       	breq	.+76     	; 0x1b84 <_Z13modbus_updatev+0x8e>
    1b38:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <ModbusPort>
    1b3c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <ModbusPort+0x1>
		{
			// If more bytes is received than the BUFFER_SIZE the overflow flag will be set and the
			// serial buffer will be red untill all the data is cleared from the receive buffer.
			if (overflow)
    1b40:	dd 23       	and	r29, r29
    1b42:	41 f0       	breq	.+16     	; 0x1b54 <_Z13modbus_updatev+0x5e>
			(*ModbusPort).read();
    1b44:	dc 01       	movw	r26, r24
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	06 80       	ldd	r0, Z+6	; 0x06
    1b4c:	f7 81       	ldd	r31, Z+7	; 0x07
    1b4e:	e0 2d       	mov	r30, r0
    1b50:	09 95       	icall
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <_Z13modbus_updatev+0x80>
			else
			{
				if (buffer == BUFFER_SIZE)
    1b54:	d1 e0       	ldi	r29, 0x01	; 1
    1b56:	c0 34       	cpi	r28, 0x40	; 64
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <_Z13modbus_updatev+0x66>
    1b5a:	d0 e0       	ldi	r29, 0x00	; 0
				overflow = 1;
				frame[buffer] = (*ModbusPort).read();
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	06 80       	ldd	r0, Z+6	; 0x06
    1b64:	f7 81       	ldd	r31, Z+7	; 0x07
    1b66:	e0 2d       	mov	r30, r0
    1b68:	09 95       	icall
    1b6a:	ec 2f       	mov	r30, r28
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	e0 58       	subi	r30, 0x80	; 128
    1b70:	fd 4f       	sbci	r31, 0xFD	; 253
    1b72:	80 83       	st	Z, r24
				buffer++;
    1b74:	cf 5f       	subi	r28, 0xFF	; 255
			}
			delayMicroseconds(T1_5); // inter character time out
    1b76:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <T1_5>
    1b7a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <T1_5+0x1>
    1b7e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <delayMicroseconds>
    1b82:	cd cf       	rjmp	.-102    	; 0x1b1e <_Z13modbus_updatev+0x28>
		}
		
		// If an overflow occurred increment the errorCount
		// variable and return to the main sketch without
		// responding to the request i.e. force a timeout
		if (overflow)
    1b84:	dd 23       	and	r29, r29
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <_Z13modbus_updatev+0xaa>
		return errorCount++;
    1b88:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <errorCount>
    1b8c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <errorCount+0x1>
    1b90:	9c 01       	movw	r18, r24
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	30 93 77 02 	sts	0x0277, r19	; 0x800277 <errorCount+0x1>
    1b9a:	20 93 76 02 	sts	0x0276, r18	; 0x800276 <errorCount>
    1b9e:	f5 c0       	rjmp	.+490    	; 0x1d8a <_Z13modbus_updatev+0x294>
		
		// The minimum request packet is 8 bytes for function 3 & 16
		if (buffer > 7)
    1ba0:	c8 30       	cpi	r28, 0x08	; 8
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <_Z13modbus_updatev+0xb0>
    1ba4:	e2 c0       	rjmp	.+452    	; 0x1d6a <_Z13modbus_updatev+0x274>
		{
			unsigned char id = frame[0];
    1ba6:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <frame>
			
			broadcastFlag = 0;
			
			if (id == 0)
    1baa:	88 23       	and	r24, r24
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <_Z13modbus_updatev+0xbe>
		// The minimum request packet is 8 bytes for function 3 & 16
		if (buffer > 7)
		{
			unsigned char id = frame[0];
			
			broadcastFlag = 0;
    1bae:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <broadcastFlag>
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <_Z13modbus_updatev+0xc4>
			
			if (id == 0)
			broadcastFlag = 1;
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <broadcastFlag>
			
			if (id == slaveID || broadcastFlag) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    1bba:	d0 91 7a 02 	lds	r29, 0x027A	; 0x80027a <slaveID>
    1bbe:	8d 17       	cp	r24, r29
    1bc0:	29 f0       	breq	.+10     	; 0x1bcc <_Z13modbus_updatev+0xd6>
    1bc2:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <broadcastFlag>
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <_Z13modbus_updatev+0xd6>
    1bca:	db c0       	rjmp	.+438    	; 0x1d82 <_Z13modbus_updatev+0x28c>
			{
				unsigned int crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    1bcc:	0c 2f       	mov	r16, r28
    1bce:	10 e0       	ldi	r17, 0x00	; 0
				if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    1bd0:	8e ef       	ldi	r24, 0xFE	; 254
    1bd2:	8c 0f       	add	r24, r28
    1bd4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z12calculateCRCh>
			if (id == 0)
			broadcastFlag = 1;
			
			if (id == slaveID || broadcastFlag) // if the recieved ID matches the slaveID or broadcasting id (0), continue
			{
				unsigned int crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    1bd8:	a8 01       	movw	r20, r16
    1bda:	40 58       	subi	r20, 0x80	; 128
    1bdc:	5d 4f       	sbci	r21, 0xFD	; 253
    1bde:	fa 01       	movw	r30, r20
    1be0:	32 97       	sbiw	r30, 0x02	; 2
    1be2:	20 81       	ld	r18, Z
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	32 2f       	mov	r19, r18
    1be8:	22 27       	eor	r18, r18
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	40 81       	ld	r20, Z
    1bee:	24 2b       	or	r18, r20
				if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    1bf0:	82 17       	cp	r24, r18
    1bf2:	93 07       	cpc	r25, r19
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <_Z13modbus_updatev+0x102>
    1bf6:	bc c0       	rjmp	.+376    	; 0x1d70 <_Z13modbus_updatev+0x27a>
				{
					function = frame[1];
    1bf8:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <frame+0x1>
    1bfc:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <function>
					unsigned int startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    1c00:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <frame+0x2>
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	32 2f       	mov	r19, r18
    1c08:	22 27       	eor	r18, r18
    1c0a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <frame+0x3>
    1c0e:	28 2b       	or	r18, r24
					unsigned int no_of_registers = ((frame[4] << 8) | frame[5]); // combine the number of register bytes
    1c10:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <frame+0x4>
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	98 2f       	mov	r25, r24
    1c18:	88 27       	eor	r24, r24
    1c1a:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <frame+0x5>
    1c1e:	85 2b       	or	r24, r21
					unsigned int maxData = startingAddress + no_of_registers;
    1c20:	bc 01       	movw	r22, r24
    1c22:	62 0f       	add	r22, r18
    1c24:	73 1f       	adc	r23, r19
					unsigned char index;
					unsigned char address;
					unsigned int crc16;
					
					// broadcasting is not supported for function 3
					if (!broadcastFlag && (function == 3))
    1c26:	c0 91 7b 02 	lds	r28, 0x027B	; 0x80027b <broadcastFlag>
    1c2a:	c1 11       	cpse	r28, r1
    1c2c:	44 c0       	rjmp	.+136    	; 0x1cb6 <_Z13modbus_updatev+0x1c0>
    1c2e:	43 30       	cpi	r20, 0x03	; 3
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <_Z13modbus_updatev+0x13e>
    1c32:	41 c0       	rjmp	.+130    	; 0x1cb6 <_Z13modbus_updatev+0x1c0>
					{
						if (startingAddress < holdingRegsSize) // check exception 2 ILLEGAL DATA ADDRESS
    1c34:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <holdingRegsSize>
    1c38:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <holdingRegsSize+0x1>
    1c3c:	24 17       	cp	r18, r20
    1c3e:	35 07       	cpc	r19, r21
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <_Z13modbus_updatev+0x14e>
    1c42:	4e c0       	rjmp	.+156    	; 0x1ce0 <_Z13modbus_updatev+0x1ea>
						{
							if (maxData <= holdingRegsSize) // check exception 3 ILLEGAL DATA VALUE
    1c44:	46 17       	cp	r20, r22
    1c46:	57 07       	cpc	r21, r23
    1c48:	a0 f1       	brcs	.+104    	; 0x1cb2 <_Z13modbus_updatev+0x1bc>
							{
								unsigned char noOfBytes = no_of_registers * 2;
    1c4a:	88 0f       	add	r24, r24
								// ID, function, noOfBytes, (dataLo + dataHi)*number of registers,
								//  crcLo, crcHi
								unsigned char responseFrameSize = 5 + noOfBytes;
    1c4c:	c5 e0       	ldi	r28, 0x05	; 5
    1c4e:	c8 0f       	add	r28, r24
								frame[0] = slaveID;
    1c50:	d0 93 80 02 	sts	0x0280, r29	; 0x800280 <frame>
								frame[1] = function;
								frame[2] = noOfBytes;
    1c54:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <frame+0x2>
								address = 3; // PDU starts at the 4th byte
								unsigned int temp;
								
								for (index = startingAddress; index < maxData; index++)
								{
									temp = regs[index];
    1c58:	a0 91 7c 02 	lds	r26, 0x027C	; 0x80027c <regs>
    1c5c:	b0 91 7d 02 	lds	r27, 0x027D	; 0x80027d <regs+0x1>
								//  crcLo, crcHi
								unsigned char responseFrameSize = 5 + noOfBytes;
								frame[0] = slaveID;
								frame[1] = function;
								frame[2] = noOfBytes;
								address = 3; // PDU starts at the 4th byte
    1c60:	93 e0       	ldi	r25, 0x03	; 3
								unsigned int temp;
								
								for (index = startingAddress; index < maxData; index++)
    1c62:	42 2f       	mov	r20, r18
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	46 17       	cp	r20, r22
    1c68:	57 07       	cpc	r21, r23
    1c6a:	a8 f4       	brcc	.+42     	; 0x1c96 <_Z13modbus_updatev+0x1a0>
								{
									temp = regs[index];
    1c6c:	44 0f       	add	r20, r20
    1c6e:	55 1f       	adc	r21, r21
    1c70:	fd 01       	movw	r30, r26
    1c72:	e4 0f       	add	r30, r20
    1c74:	f5 1f       	adc	r31, r21
    1c76:	30 81       	ld	r19, Z
    1c78:	41 81       	ldd	r20, Z+1	; 0x01
									frame[address] = temp >> 8; // split the register into 2 bytes
    1c7a:	e9 2f       	mov	r30, r25
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	e0 58       	subi	r30, 0x80	; 128
    1c80:	fd 4f       	sbci	r31, 0xFD	; 253
    1c82:	40 83       	st	Z, r20
									address++;
    1c84:	e1 e0       	ldi	r30, 0x01	; 1
    1c86:	e9 0f       	add	r30, r25
									frame[address] = temp & 0xFF;
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	e0 58       	subi	r30, 0x80	; 128
    1c8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c8e:	30 83       	st	Z, r19
									address++;
    1c90:	9e 5f       	subi	r25, 0xFE	; 254
								frame[1] = function;
								frame[2] = noOfBytes;
								address = 3; // PDU starts at the 4th byte
								unsigned int temp;
								
								for (index = startingAddress; index < maxData; index++)
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	e6 cf       	rjmp	.-52     	; 0x1c62 <_Z13modbus_updatev+0x16c>
									address++;
									frame[address] = temp & 0xFF;
									address++;
								}
								
								crc16 = calculateCRC(responseFrameSize - 2);
    1c96:	8d 5f       	subi	r24, 0xFD	; 253
    1c98:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z12calculateCRCh>
								frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    1c9c:	2c 2f       	mov	r18, r28
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	20 58       	subi	r18, 0x80	; 128
    1ca2:	3d 4f       	sbci	r19, 0xFD	; 253
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	32 97       	sbiw	r30, 0x02	; 2
    1ca8:	90 83       	st	Z, r25
								frame[responseFrameSize - 1] = crc16 & 0xFF;
    1caa:	31 96       	adiw	r30, 0x01	; 1
    1cac:	80 83       	st	Z, r24
								sendPacket(responseFrameSize);
    1cae:	8c 2f       	mov	r24, r28
    1cb0:	34 c0       	rjmp	.+104    	; 0x1d1a <_Z13modbus_updatev+0x224>
							}
							else
							exceptionResponse(3); // exception 3 ILLEGAL DATA VALUE
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	57 c0       	rjmp	.+174    	; 0x1d64 <_Z13modbus_updatev+0x26e>
						}
						else
						exceptionResponse(2); // exception 2 ILLEGAL DATA ADDRESS
					}
					else if (function == 6)
    1cb6:	46 30       	cpi	r20, 0x06	; 6
    1cb8:	a9 f0       	breq	.+42     	; 0x1ce4 <_Z13modbus_updatev+0x1ee>
							sendPacket(8);
						}
						else
						exceptionResponse(2); // exception 2 ILLEGAL DATA ADDRESS
					}
					else if (function == 16)
    1cba:	40 31       	cpi	r20, 0x10	; 16
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <_Z13modbus_updatev+0x1ca>
    1cbe:	51 c0       	rjmp	.+162    	; 0x1d62 <_Z13modbus_updatev+0x26c>
					{
						// Check if the recieved number of bytes matches the calculated bytes
						// minus the request bytes.
						// id + function + (2 * address bytes) + (2 * no of register bytes) +
						// byte count + (2 * CRC bytes) = 9 bytes
						if (frame[6] == (buffer - 9))
    1cc0:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <frame+0x6>
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	09 50       	subi	r16, 0x09	; 9
    1cc8:	11 09       	sbc	r17, r1
    1cca:	80 17       	cp	r24, r16
    1ccc:	91 07       	cpc	r25, r17
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <_Z13modbus_updatev+0x1dc>
    1cd0:	4f c0       	rjmp	.+158    	; 0x1d70 <_Z13modbus_updatev+0x27a>
						{
							if (startingAddress < holdingRegsSize) // check exception 2 ILLEGAL DATA ADDRESS
    1cd2:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <holdingRegsSize>
    1cd6:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <holdingRegsSize+0x1>
    1cda:	28 17       	cp	r18, r24
    1cdc:	39 07       	cpc	r19, r25
    1cde:	00 f1       	brcs	.+64     	; 0x1d20 <_Z13modbus_updatev+0x22a>
							}
							else
							exceptionResponse(3); // exception 3 ILLEGAL DATA VALUE
						}
						else
						exceptionResponse(2); // exception 2 ILLEGAL DATA ADDRESS
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	40 c0       	rjmp	.+128    	; 0x1d64 <_Z13modbus_updatev+0x26e>
					}
					else if (function == 6)
					{
						if (startingAddress < holdingRegsSize) // check exception 2 ILLEGAL DATA ADDRESS
    1ce4:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <holdingRegsSize>
    1ce8:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <holdingRegsSize+0x1>
    1cec:	24 17       	cp	r18, r20
    1cee:	35 07       	cpc	r19, r21
    1cf0:	b8 f7       	brcc	.-18     	; 0x1ce0 <_Z13modbus_updatev+0x1ea>
						{
							regs[startingAddress] = ((frame[4] << 8) | frame[5]);// the 4th and 5th elements in frame is the 16 bit data value
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <regs>
    1cfa:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <regs+0x1>
    1cfe:	e2 0f       	add	r30, r18
    1d00:	f3 1f       	adc	r31, r19
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
							
							// only the first 6 bytes are used for CRC calculation
							crc16 = calculateCRC(6);
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z12calculateCRCh>
							frame[6] = crc16 >> 8; // split crc into 2 bytes
    1d0c:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <frame+0x6>
							frame[7] = crc16 & 0xFF;
    1d10:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <frame+0x7>
							
							// a function 16 response is an echo of the first 6 bytes from
							// the request + 2 crc bytes
							if (!broadcastFlag) // don't respond if it's a broadcast message
    1d14:	c1 11       	cpse	r28, r1
    1d16:	35 c0       	rjmp	.+106    	; 0x1d82 <_Z13modbus_updatev+0x28c>
							sendPacket(8);
    1d18:	88 e0       	ldi	r24, 0x08	; 8
    1d1a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z10sendPacketh>
    1d1e:	31 c0       	rjmp	.+98     	; 0x1d82 <_Z13modbus_updatev+0x28c>
						// byte count + (2 * CRC bytes) = 9 bytes
						if (frame[6] == (buffer - 9))
						{
							if (startingAddress < holdingRegsSize) // check exception 2 ILLEGAL DATA ADDRESS
							{
								if (maxData <= holdingRegsSize) // check exception 3 ILLEGAL DATA VALUE
    1d20:	86 17       	cp	r24, r22
    1d22:	97 07       	cpc	r25, r23
    1d24:	30 f2       	brcs	.-116    	; 0x1cb2 <_Z13modbus_updatev+0x1bc>
								{
									address = 7; // start at the 8th byte in the frame
									
									for (index = startingAddress; index < maxData; index++)
									{
										regs[index] = ((frame[address] << 8) | frame[address + 1]);
    1d26:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <regs>
    1d2a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <regs+0x1>
						{
							if (startingAddress < holdingRegsSize) // check exception 2 ILLEGAL DATA ADDRESS
							{
								if (maxData <= holdingRegsSize) // check exception 3 ILLEGAL DATA VALUE
								{
									address = 7; // start at the 8th byte in the frame
    1d2e:	37 e0       	ldi	r19, 0x07	; 7
									
									for (index = startingAddress; index < maxData; index++)
    1d30:	82 2f       	mov	r24, r18
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	86 17       	cp	r24, r22
    1d36:	97 07       	cpc	r25, r23
    1d38:	30 f7       	brcc	.-52     	; 0x1d06 <_Z13modbus_updatev+0x210>
									{
										regs[index] = ((frame[address] << 8) | frame[address + 1]);
    1d3a:	a3 2f       	mov	r26, r19
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	fa 01       	movw	r30, r20
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	a0 58       	subi	r26, 0x80	; 128
    1d4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	8c 91       	ld	r24, X
    1d50:	11 97       	sbiw	r26, 0x01	; 1
    1d52:	ac 91       	ld	r26, X
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9a 2b       	or	r25, r26
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
										address += 2;
    1d5c:	3e 5f       	subi	r19, 0xFE	; 254
							{
								if (maxData <= holdingRegsSize) // check exception 3 ILLEGAL DATA VALUE
								{
									address = 7; // start at the 8th byte in the frame
									
									for (index = startingAddress; index < maxData; index++)
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	e7 cf       	rjmp	.-50     	; 0x1d30 <_Z13modbus_updatev+0x23a>
						}
						else
						errorCount++; // corrupted packet
					}
					else
					exceptionResponse(1); // exception 1 ILLEGAL FUNCTION
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_Z17exceptionResponseh>
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <_Z13modbus_updatev+0x28c>
				}
				else // checksum failed
				errorCount++;
			} // incorrect id
		}
		else if (buffer > 0 && buffer < 8)
    1d6a:	c1 50       	subi	r28, 0x01	; 1
    1d6c:	c7 30       	cpi	r28, 0x07	; 7
    1d6e:	48 f4       	brcc	.+18     	; 0x1d82 <_Z13modbus_updatev+0x28c>
		errorCount++; // corrupted packet
    1d70:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <errorCount>
    1d74:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <errorCount+0x1>
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <errorCount+0x1>
    1d7e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <errorCount>
	}
	return errorCount;
    1d82:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <errorCount>
    1d86:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <errorCount+0x1>
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <__subsf3>:
    1d94:	50 58       	subi	r21, 0x80	; 128

00001d96 <__addsf3>:
    1d96:	bb 27       	eor	r27, r27
    1d98:	aa 27       	eor	r26, r26
    1d9a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__addsf3x>
    1d9e:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_round>
    1da2:	0e 94 87 10 	call	0x210e	; 0x210e <__fp_pscA>
    1da6:	38 f0       	brcs	.+14     	; 0x1db6 <__addsf3+0x20>
    1da8:	0e 94 8e 10 	call	0x211c	; 0x211c <__fp_pscB>
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <__addsf3+0x20>
    1dae:	39 f4       	brne	.+14     	; 0x1dbe <__addsf3+0x28>
    1db0:	9f 3f       	cpi	r25, 0xFF	; 255
    1db2:	19 f4       	brne	.+6      	; 0x1dba <__addsf3+0x24>
    1db4:	26 f4       	brtc	.+8      	; 0x1dbe <__addsf3+0x28>
    1db6:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>
    1dba:	0e f4       	brtc	.+2      	; 0x1dbe <__addsf3+0x28>
    1dbc:	e0 95       	com	r30
    1dbe:	e7 fb       	bst	r30, 7
    1dc0:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>

00001dc4 <__addsf3x>:
    1dc4:	e9 2f       	mov	r30, r25
    1dc6:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_split3>
    1dca:	58 f3       	brcs	.-42     	; 0x1da2 <__addsf3+0xc>
    1dcc:	ba 17       	cp	r27, r26
    1dce:	62 07       	cpc	r22, r18
    1dd0:	73 07       	cpc	r23, r19
    1dd2:	84 07       	cpc	r24, r20
    1dd4:	95 07       	cpc	r25, r21
    1dd6:	20 f0       	brcs	.+8      	; 0x1de0 <__addsf3x+0x1c>
    1dd8:	79 f4       	brne	.+30     	; 0x1df8 <__addsf3x+0x34>
    1dda:	a6 f5       	brtc	.+104    	; 0x1e44 <__addsf3x+0x80>
    1ddc:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>
    1de0:	0e f4       	brtc	.+2      	; 0x1de4 <__addsf3x+0x20>
    1de2:	e0 95       	com	r30
    1de4:	0b 2e       	mov	r0, r27
    1de6:	ba 2f       	mov	r27, r26
    1de8:	a0 2d       	mov	r26, r0
    1dea:	0b 01       	movw	r0, r22
    1dec:	b9 01       	movw	r22, r18
    1dee:	90 01       	movw	r18, r0
    1df0:	0c 01       	movw	r0, r24
    1df2:	ca 01       	movw	r24, r20
    1df4:	a0 01       	movw	r20, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	ff 27       	eor	r31, r31
    1dfa:	59 1b       	sub	r21, r25
    1dfc:	99 f0       	breq	.+38     	; 0x1e24 <__addsf3x+0x60>
    1dfe:	59 3f       	cpi	r21, 0xF9	; 249
    1e00:	50 f4       	brcc	.+20     	; 0x1e16 <__addsf3x+0x52>
    1e02:	50 3e       	cpi	r21, 0xE0	; 224
    1e04:	68 f1       	brcs	.+90     	; 0x1e60 <__addsf3x+0x9c>
    1e06:	1a 16       	cp	r1, r26
    1e08:	f0 40       	sbci	r31, 0x00	; 0
    1e0a:	a2 2f       	mov	r26, r18
    1e0c:	23 2f       	mov	r18, r19
    1e0e:	34 2f       	mov	r19, r20
    1e10:	44 27       	eor	r20, r20
    1e12:	58 5f       	subi	r21, 0xF8	; 248
    1e14:	f3 cf       	rjmp	.-26     	; 0x1dfc <__addsf3x+0x38>
    1e16:	46 95       	lsr	r20
    1e18:	37 95       	ror	r19
    1e1a:	27 95       	ror	r18
    1e1c:	a7 95       	ror	r26
    1e1e:	f0 40       	sbci	r31, 0x00	; 0
    1e20:	53 95       	inc	r21
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <__addsf3x+0x52>
    1e24:	7e f4       	brtc	.+30     	; 0x1e44 <__addsf3x+0x80>
    1e26:	1f 16       	cp	r1, r31
    1e28:	ba 0b       	sbc	r27, r26
    1e2a:	62 0b       	sbc	r22, r18
    1e2c:	73 0b       	sbc	r23, r19
    1e2e:	84 0b       	sbc	r24, r20
    1e30:	ba f0       	brmi	.+46     	; 0x1e60 <__addsf3x+0x9c>
    1e32:	91 50       	subi	r25, 0x01	; 1
    1e34:	a1 f0       	breq	.+40     	; 0x1e5e <__addsf3x+0x9a>
    1e36:	ff 0f       	add	r31, r31
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	c2 f7       	brpl	.-16     	; 0x1e32 <__addsf3x+0x6e>
    1e42:	0e c0       	rjmp	.+28     	; 0x1e60 <__addsf3x+0x9c>
    1e44:	ba 0f       	add	r27, r26
    1e46:	62 1f       	adc	r22, r18
    1e48:	73 1f       	adc	r23, r19
    1e4a:	84 1f       	adc	r24, r20
    1e4c:	48 f4       	brcc	.+18     	; 0x1e60 <__addsf3x+0x9c>
    1e4e:	87 95       	ror	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <__addsf3x+0x9a>
    1e5c:	b0 cf       	rjmp	.-160    	; 0x1dbe <__addsf3+0x28>
    1e5e:	93 95       	inc	r25
    1e60:	88 0f       	add	r24, r24
    1e62:	08 f0       	brcs	.+2      	; 0x1e66 <__addsf3x+0xa2>
    1e64:	99 27       	eor	r25, r25
    1e66:	ee 0f       	add	r30, r30
    1e68:	97 95       	ror	r25
    1e6a:	87 95       	ror	r24
    1e6c:	08 95       	ret

00001e6e <ceil>:
    1e6e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__fp_trunc>
    1e72:	90 f0       	brcs	.+36     	; 0x1e98 <ceil+0x2a>
    1e74:	9f 37       	cpi	r25, 0x7F	; 127
    1e76:	48 f4       	brcc	.+18     	; 0x1e8a <ceil+0x1c>
    1e78:	91 11       	cpse	r25, r1
    1e7a:	16 f4       	brtc	.+4      	; 0x1e80 <ceil+0x12>
    1e7c:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	80 e8       	ldi	r24, 0x80	; 128
    1e86:	9f e3       	ldi	r25, 0x3F	; 63
    1e88:	08 95       	ret
    1e8a:	26 f0       	brts	.+8      	; 0x1e94 <ceil+0x26>
    1e8c:	1b 16       	cp	r1, r27
    1e8e:	61 1d       	adc	r22, r1
    1e90:	71 1d       	adc	r23, r1
    1e92:	81 1d       	adc	r24, r1
    1e94:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_mintl>
    1e98:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_mpack>

00001e9c <__cmpsf2>:
    1e9c:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_cmp>
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <__cmpsf2+0x8>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	08 95       	ret

00001ea6 <__divsf3>:
    1ea6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__divsf3x>
    1eaa:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_round>
    1eae:	0e 94 8e 10 	call	0x211c	; 0x211c <__fp_pscB>
    1eb2:	58 f0       	brcs	.+22     	; 0x1eca <__divsf3+0x24>
    1eb4:	0e 94 87 10 	call	0x210e	; 0x210e <__fp_pscA>
    1eb8:	40 f0       	brcs	.+16     	; 0x1eca <__divsf3+0x24>
    1eba:	29 f4       	brne	.+10     	; 0x1ec6 <__divsf3+0x20>
    1ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ebe:	29 f0       	breq	.+10     	; 0x1eca <__divsf3+0x24>
    1ec0:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    1ec4:	51 11       	cpse	r21, r1
    1ec6:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1eca:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>

00001ece <__divsf3x>:
    1ece:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_split3>
    1ed2:	68 f3       	brcs	.-38     	; 0x1eae <__divsf3+0x8>

00001ed4 <__divsf3_pse>:
    1ed4:	99 23       	and	r25, r25
    1ed6:	b1 f3       	breq	.-20     	; 0x1ec4 <__divsf3+0x1e>
    1ed8:	55 23       	and	r21, r21
    1eda:	91 f3       	breq	.-28     	; 0x1ec0 <__divsf3+0x1a>
    1edc:	95 1b       	sub	r25, r21
    1ede:	55 0b       	sbc	r21, r21
    1ee0:	bb 27       	eor	r27, r27
    1ee2:	aa 27       	eor	r26, r26
    1ee4:	62 17       	cp	r22, r18
    1ee6:	73 07       	cpc	r23, r19
    1ee8:	84 07       	cpc	r24, r20
    1eea:	38 f0       	brcs	.+14     	; 0x1efa <__divsf3_pse+0x26>
    1eec:	9f 5f       	subi	r25, 0xFF	; 255
    1eee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	44 1f       	adc	r20, r20
    1ef6:	aa 1f       	adc	r26, r26
    1ef8:	a9 f3       	breq	.-22     	; 0x1ee4 <__divsf3_pse+0x10>
    1efa:	35 d0       	rcall	.+106    	; 0x1f66 <__divsf3_pse+0x92>
    1efc:	0e 2e       	mov	r0, r30
    1efe:	3a f0       	brmi	.+14     	; 0x1f0e <__divsf3_pse+0x3a>
    1f00:	e0 e8       	ldi	r30, 0x80	; 128
    1f02:	32 d0       	rcall	.+100    	; 0x1f68 <__divsf3_pse+0x94>
    1f04:	91 50       	subi	r25, 0x01	; 1
    1f06:	50 40       	sbci	r21, 0x00	; 0
    1f08:	e6 95       	lsr	r30
    1f0a:	00 1c       	adc	r0, r0
    1f0c:	ca f7       	brpl	.-14     	; 0x1f00 <__divsf3_pse+0x2c>
    1f0e:	2b d0       	rcall	.+86     	; 0x1f66 <__divsf3_pse+0x92>
    1f10:	fe 2f       	mov	r31, r30
    1f12:	29 d0       	rcall	.+82     	; 0x1f66 <__divsf3_pse+0x92>
    1f14:	66 0f       	add	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	88 1f       	adc	r24, r24
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	26 17       	cp	r18, r22
    1f1e:	37 07       	cpc	r19, r23
    1f20:	48 07       	cpc	r20, r24
    1f22:	ab 07       	cpc	r26, r27
    1f24:	b0 e8       	ldi	r27, 0x80	; 128
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__divsf3_pse+0x56>
    1f28:	bb 0b       	sbc	r27, r27
    1f2a:	80 2d       	mov	r24, r0
    1f2c:	bf 01       	movw	r22, r30
    1f2e:	ff 27       	eor	r31, r31
    1f30:	93 58       	subi	r25, 0x83	; 131
    1f32:	5f 4f       	sbci	r21, 0xFF	; 255
    1f34:	3a f0       	brmi	.+14     	; 0x1f44 <__divsf3_pse+0x70>
    1f36:	9e 3f       	cpi	r25, 0xFE	; 254
    1f38:	51 05       	cpc	r21, r1
    1f3a:	78 f0       	brcs	.+30     	; 0x1f5a <__divsf3_pse+0x86>
    1f3c:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    1f40:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1f44:	5f 3f       	cpi	r21, 0xFF	; 255
    1f46:	e4 f3       	brlt	.-8      	; 0x1f40 <__divsf3_pse+0x6c>
    1f48:	98 3e       	cpi	r25, 0xE8	; 232
    1f4a:	d4 f3       	brlt	.-12     	; 0x1f40 <__divsf3_pse+0x6c>
    1f4c:	86 95       	lsr	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b7 95       	ror	r27
    1f54:	f7 95       	ror	r31
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	c9 f7       	brne	.-14     	; 0x1f4c <__divsf3_pse+0x78>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	91 1d       	adc	r25, r1
    1f5e:	96 95       	lsr	r25
    1f60:	87 95       	ror	r24
    1f62:	97 f9       	bld	r25, 7
    1f64:	08 95       	ret
    1f66:	e1 e0       	ldi	r30, 0x01	; 1
    1f68:	66 0f       	add	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	62 17       	cp	r22, r18
    1f72:	73 07       	cpc	r23, r19
    1f74:	84 07       	cpc	r24, r20
    1f76:	ba 07       	cpc	r27, r26
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__divsf3_pse+0xae>
    1f7a:	62 1b       	sub	r22, r18
    1f7c:	73 0b       	sbc	r23, r19
    1f7e:	84 0b       	sbc	r24, r20
    1f80:	ba 0b       	sbc	r27, r26
    1f82:	ee 1f       	adc	r30, r30
    1f84:	88 f7       	brcc	.-30     	; 0x1f68 <__divsf3_pse+0x94>
    1f86:	e0 95       	com	r30
    1f88:	08 95       	ret

00001f8a <__fixunssfsi>:
    1f8a:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_splitA>
    1f8e:	88 f0       	brcs	.+34     	; 0x1fb2 <__fixunssfsi+0x28>
    1f90:	9f 57       	subi	r25, 0x7F	; 127
    1f92:	98 f0       	brcs	.+38     	; 0x1fba <__fixunssfsi+0x30>
    1f94:	b9 2f       	mov	r27, r25
    1f96:	99 27       	eor	r25, r25
    1f98:	b7 51       	subi	r27, 0x17	; 23
    1f9a:	b0 f0       	brcs	.+44     	; 0x1fc8 <__fixunssfsi+0x3e>
    1f9c:	e1 f0       	breq	.+56     	; 0x1fd6 <__fixunssfsi+0x4c>
    1f9e:	66 0f       	add	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	1a f0       	brmi	.+6      	; 0x1fae <__fixunssfsi+0x24>
    1fa8:	ba 95       	dec	r27
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__fixunssfsi+0x14>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <__fixunssfsi+0x4c>
    1fae:	b1 30       	cpi	r27, 0x01	; 1
    1fb0:	91 f0       	breq	.+36     	; 0x1fd6 <__fixunssfsi+0x4c>
    1fb2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fp_zero>
    1fb6:	b1 e0       	ldi	r27, 0x01	; 1
    1fb8:	08 95       	ret
    1fba:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>
    1fbe:	67 2f       	mov	r22, r23
    1fc0:	78 2f       	mov	r23, r24
    1fc2:	88 27       	eor	r24, r24
    1fc4:	b8 5f       	subi	r27, 0xF8	; 248
    1fc6:	39 f0       	breq	.+14     	; 0x1fd6 <__fixunssfsi+0x4c>
    1fc8:	b9 3f       	cpi	r27, 0xF9	; 249
    1fca:	cc f3       	brlt	.-14     	; 0x1fbe <__fixunssfsi+0x34>
    1fcc:	86 95       	lsr	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	b3 95       	inc	r27
    1fd4:	d9 f7       	brne	.-10     	; 0x1fcc <__fixunssfsi+0x42>
    1fd6:	3e f4       	brtc	.+14     	; 0x1fe6 <__fixunssfsi+0x5c>
    1fd8:	90 95       	com	r25
    1fda:	80 95       	com	r24
    1fdc:	70 95       	com	r23
    1fde:	61 95       	neg	r22
    1fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	08 95       	ret

00001fe8 <__floatunsisf>:
    1fe8:	e8 94       	clt
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <__floatsisf+0x12>

00001fec <__floatsisf>:
    1fec:	97 fb       	bst	r25, 7
    1fee:	3e f4       	brtc	.+14     	; 0x1ffe <__floatsisf+0x12>
    1ff0:	90 95       	com	r25
    1ff2:	80 95       	com	r24
    1ff4:	70 95       	com	r23
    1ff6:	61 95       	neg	r22
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffe:	99 23       	and	r25, r25
    2000:	a9 f0       	breq	.+42     	; 0x202c <__floatsisf+0x40>
    2002:	f9 2f       	mov	r31, r25
    2004:	96 e9       	ldi	r25, 0x96	; 150
    2006:	bb 27       	eor	r27, r27
    2008:	93 95       	inc	r25
    200a:	f6 95       	lsr	r31
    200c:	87 95       	ror	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b7 95       	ror	r27
    2014:	f1 11       	cpse	r31, r1
    2016:	f8 cf       	rjmp	.-16     	; 0x2008 <__floatsisf+0x1c>
    2018:	fa f4       	brpl	.+62     	; 0x2058 <__floatsisf+0x6c>
    201a:	bb 0f       	add	r27, r27
    201c:	11 f4       	brne	.+4      	; 0x2022 <__floatsisf+0x36>
    201e:	60 ff       	sbrs	r22, 0
    2020:	1b c0       	rjmp	.+54     	; 0x2058 <__floatsisf+0x6c>
    2022:	6f 5f       	subi	r22, 0xFF	; 255
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	8f 4f       	sbci	r24, 0xFF	; 255
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	16 c0       	rjmp	.+44     	; 0x2058 <__floatsisf+0x6c>
    202c:	88 23       	and	r24, r24
    202e:	11 f0       	breq	.+4      	; 0x2034 <__floatsisf+0x48>
    2030:	96 e9       	ldi	r25, 0x96	; 150
    2032:	11 c0       	rjmp	.+34     	; 0x2056 <__floatsisf+0x6a>
    2034:	77 23       	and	r23, r23
    2036:	21 f0       	breq	.+8      	; 0x2040 <__floatsisf+0x54>
    2038:	9e e8       	ldi	r25, 0x8E	; 142
    203a:	87 2f       	mov	r24, r23
    203c:	76 2f       	mov	r23, r22
    203e:	05 c0       	rjmp	.+10     	; 0x204a <__floatsisf+0x5e>
    2040:	66 23       	and	r22, r22
    2042:	71 f0       	breq	.+28     	; 0x2060 <__floatsisf+0x74>
    2044:	96 e8       	ldi	r25, 0x86	; 134
    2046:	86 2f       	mov	r24, r22
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	2a f0       	brmi	.+10     	; 0x2058 <__floatsisf+0x6c>
    204e:	9a 95       	dec	r25
    2050:	66 0f       	add	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	da f7       	brpl	.-10     	; 0x204e <__floatsisf+0x62>
    2058:	88 0f       	add	r24, r24
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	97 f9       	bld	r25, 7
    2060:	08 95       	ret

00002062 <__fp_cmp>:
    2062:	99 0f       	add	r25, r25
    2064:	00 08       	sbc	r0, r0
    2066:	55 0f       	add	r21, r21
    2068:	aa 0b       	sbc	r26, r26
    206a:	e0 e8       	ldi	r30, 0x80	; 128
    206c:	fe ef       	ldi	r31, 0xFE	; 254
    206e:	16 16       	cp	r1, r22
    2070:	17 06       	cpc	r1, r23
    2072:	e8 07       	cpc	r30, r24
    2074:	f9 07       	cpc	r31, r25
    2076:	c0 f0       	brcs	.+48     	; 0x20a8 <__fp_cmp+0x46>
    2078:	12 16       	cp	r1, r18
    207a:	13 06       	cpc	r1, r19
    207c:	e4 07       	cpc	r30, r20
    207e:	f5 07       	cpc	r31, r21
    2080:	98 f0       	brcs	.+38     	; 0x20a8 <__fp_cmp+0x46>
    2082:	62 1b       	sub	r22, r18
    2084:	73 0b       	sbc	r23, r19
    2086:	84 0b       	sbc	r24, r20
    2088:	95 0b       	sbc	r25, r21
    208a:	39 f4       	brne	.+14     	; 0x209a <__fp_cmp+0x38>
    208c:	0a 26       	eor	r0, r26
    208e:	61 f0       	breq	.+24     	; 0x20a8 <__fp_cmp+0x46>
    2090:	23 2b       	or	r18, r19
    2092:	24 2b       	or	r18, r20
    2094:	25 2b       	or	r18, r21
    2096:	21 f4       	brne	.+8      	; 0x20a0 <__fp_cmp+0x3e>
    2098:	08 95       	ret
    209a:	0a 26       	eor	r0, r26
    209c:	09 f4       	brne	.+2      	; 0x20a0 <__fp_cmp+0x3e>
    209e:	a1 40       	sbci	r26, 0x01	; 1
    20a0:	a6 95       	lsr	r26
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	81 1d       	adc	r24, r1
    20a6:	81 1d       	adc	r24, r1
    20a8:	08 95       	ret

000020aa <__fp_inf>:
    20aa:	97 f9       	bld	r25, 7
    20ac:	9f 67       	ori	r25, 0x7F	; 127
    20ae:	80 e8       	ldi	r24, 0x80	; 128
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	08 95       	ret

000020b6 <__fp_mintl>:
    20b6:	88 23       	and	r24, r24
    20b8:	71 f4       	brne	.+28     	; 0x20d6 <__fp_mintl+0x20>
    20ba:	77 23       	and	r23, r23
    20bc:	21 f0       	breq	.+8      	; 0x20c6 <__fp_mintl+0x10>
    20be:	98 50       	subi	r25, 0x08	; 8
    20c0:	87 2b       	or	r24, r23
    20c2:	76 2f       	mov	r23, r22
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <__fp_mintl+0x1e>
    20c6:	66 23       	and	r22, r22
    20c8:	11 f4       	brne	.+4      	; 0x20ce <__fp_mintl+0x18>
    20ca:	99 27       	eor	r25, r25
    20cc:	0d c0       	rjmp	.+26     	; 0x20e8 <__fp_mintl+0x32>
    20ce:	90 51       	subi	r25, 0x10	; 16
    20d0:	86 2b       	or	r24, r22
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	2a f0       	brmi	.+10     	; 0x20e2 <__fp_mintl+0x2c>
    20d8:	9a 95       	dec	r25
    20da:	66 0f       	add	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	da f7       	brpl	.-10     	; 0x20d8 <__fp_mintl+0x22>
    20e2:	88 0f       	add	r24, r24
    20e4:	96 95       	lsr	r25
    20e6:	87 95       	ror	r24
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret

000020ec <__fp_mpack>:
    20ec:	9f 3f       	cpi	r25, 0xFF	; 255
    20ee:	31 f0       	breq	.+12     	; 0x20fc <__fp_mpack_finite+0xc>

000020f0 <__fp_mpack_finite>:
    20f0:	91 50       	subi	r25, 0x01	; 1
    20f2:	20 f4       	brcc	.+8      	; 0x20fc <__fp_mpack_finite+0xc>
    20f4:	87 95       	ror	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	b7 95       	ror	r27
    20fc:	88 0f       	add	r24, r24
    20fe:	91 1d       	adc	r25, r1
    2100:	96 95       	lsr	r25
    2102:	87 95       	ror	r24
    2104:	97 f9       	bld	r25, 7
    2106:	08 95       	ret

00002108 <__fp_nan>:
    2108:	9f ef       	ldi	r25, 0xFF	; 255
    210a:	80 ec       	ldi	r24, 0xC0	; 192
    210c:	08 95       	ret

0000210e <__fp_pscA>:
    210e:	00 24       	eor	r0, r0
    2110:	0a 94       	dec	r0
    2112:	16 16       	cp	r1, r22
    2114:	17 06       	cpc	r1, r23
    2116:	18 06       	cpc	r1, r24
    2118:	09 06       	cpc	r0, r25
    211a:	08 95       	ret

0000211c <__fp_pscB>:
    211c:	00 24       	eor	r0, r0
    211e:	0a 94       	dec	r0
    2120:	12 16       	cp	r1, r18
    2122:	13 06       	cpc	r1, r19
    2124:	14 06       	cpc	r1, r20
    2126:	05 06       	cpc	r0, r21
    2128:	08 95       	ret

0000212a <__fp_round>:
    212a:	09 2e       	mov	r0, r25
    212c:	03 94       	inc	r0
    212e:	00 0c       	add	r0, r0
    2130:	11 f4       	brne	.+4      	; 0x2136 <__fp_round+0xc>
    2132:	88 23       	and	r24, r24
    2134:	52 f0       	brmi	.+20     	; 0x214a <__fp_round+0x20>
    2136:	bb 0f       	add	r27, r27
    2138:	40 f4       	brcc	.+16     	; 0x214a <__fp_round+0x20>
    213a:	bf 2b       	or	r27, r31
    213c:	11 f4       	brne	.+4      	; 0x2142 <__fp_round+0x18>
    213e:	60 ff       	sbrs	r22, 0
    2140:	04 c0       	rjmp	.+8      	; 0x214a <__fp_round+0x20>
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	8f 4f       	sbci	r24, 0xFF	; 255
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	08 95       	ret

0000214c <__fp_split3>:
    214c:	57 fd       	sbrc	r21, 7
    214e:	90 58       	subi	r25, 0x80	; 128
    2150:	44 0f       	add	r20, r20
    2152:	55 1f       	adc	r21, r21
    2154:	59 f0       	breq	.+22     	; 0x216c <__fp_splitA+0x10>
    2156:	5f 3f       	cpi	r21, 0xFF	; 255
    2158:	71 f0       	breq	.+28     	; 0x2176 <__fp_splitA+0x1a>
    215a:	47 95       	ror	r20

0000215c <__fp_splitA>:
    215c:	88 0f       	add	r24, r24
    215e:	97 fb       	bst	r25, 7
    2160:	99 1f       	adc	r25, r25
    2162:	61 f0       	breq	.+24     	; 0x217c <__fp_splitA+0x20>
    2164:	9f 3f       	cpi	r25, 0xFF	; 255
    2166:	79 f0       	breq	.+30     	; 0x2186 <__fp_splitA+0x2a>
    2168:	87 95       	ror	r24
    216a:	08 95       	ret
    216c:	12 16       	cp	r1, r18
    216e:	13 06       	cpc	r1, r19
    2170:	14 06       	cpc	r1, r20
    2172:	55 1f       	adc	r21, r21
    2174:	f2 cf       	rjmp	.-28     	; 0x215a <__fp_split3+0xe>
    2176:	46 95       	lsr	r20
    2178:	f1 df       	rcall	.-30     	; 0x215c <__fp_splitA>
    217a:	08 c0       	rjmp	.+16     	; 0x218c <__fp_splitA+0x30>
    217c:	16 16       	cp	r1, r22
    217e:	17 06       	cpc	r1, r23
    2180:	18 06       	cpc	r1, r24
    2182:	99 1f       	adc	r25, r25
    2184:	f1 cf       	rjmp	.-30     	; 0x2168 <__fp_splitA+0xc>
    2186:	86 95       	lsr	r24
    2188:	71 05       	cpc	r23, r1
    218a:	61 05       	cpc	r22, r1
    218c:	08 94       	sec
    218e:	08 95       	ret

00002190 <__fp_trunc>:
    2190:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_splitA>
    2194:	a0 f0       	brcs	.+40     	; 0x21be <__fp_trunc+0x2e>
    2196:	be e7       	ldi	r27, 0x7E	; 126
    2198:	b9 17       	cp	r27, r25
    219a:	88 f4       	brcc	.+34     	; 0x21be <__fp_trunc+0x2e>
    219c:	bb 27       	eor	r27, r27
    219e:	9f 38       	cpi	r25, 0x8F	; 143
    21a0:	60 f4       	brcc	.+24     	; 0x21ba <__fp_trunc+0x2a>
    21a2:	16 16       	cp	r1, r22
    21a4:	b1 1d       	adc	r27, r1
    21a6:	67 2f       	mov	r22, r23
    21a8:	78 2f       	mov	r23, r24
    21aa:	88 27       	eor	r24, r24
    21ac:	98 5f       	subi	r25, 0xF8	; 248
    21ae:	f7 cf       	rjmp	.-18     	; 0x219e <__fp_trunc+0xe>
    21b0:	86 95       	lsr	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	b1 1d       	adc	r27, r1
    21b8:	93 95       	inc	r25
    21ba:	96 39       	cpi	r25, 0x96	; 150
    21bc:	c8 f3       	brcs	.-14     	; 0x21b0 <__fp_trunc+0x20>
    21be:	08 95       	ret

000021c0 <__fp_zero>:
    21c0:	e8 94       	clt

000021c2 <__fp_szero>:
    21c2:	bb 27       	eor	r27, r27
    21c4:	66 27       	eor	r22, r22
    21c6:	77 27       	eor	r23, r23
    21c8:	cb 01       	movw	r24, r22
    21ca:	97 f9       	bld	r25, 7
    21cc:	08 95       	ret

000021ce <__mulsf3>:
    21ce:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__mulsf3x>
    21d2:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_round>
    21d6:	0e 94 87 10 	call	0x210e	; 0x210e <__fp_pscA>
    21da:	38 f0       	brcs	.+14     	; 0x21ea <__mulsf3+0x1c>
    21dc:	0e 94 8e 10 	call	0x211c	; 0x211c <__fp_pscB>
    21e0:	20 f0       	brcs	.+8      	; 0x21ea <__mulsf3+0x1c>
    21e2:	95 23       	and	r25, r21
    21e4:	11 f0       	breq	.+4      	; 0x21ea <__mulsf3+0x1c>
    21e6:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    21ea:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>
    21ee:	11 24       	eor	r1, r1
    21f0:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>

000021f4 <__mulsf3x>:
    21f4:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_split3>
    21f8:	70 f3       	brcs	.-36     	; 0x21d6 <__mulsf3+0x8>

000021fa <__mulsf3_pse>:
    21fa:	95 9f       	mul	r25, r21
    21fc:	c1 f3       	breq	.-16     	; 0x21ee <__mulsf3+0x20>
    21fe:	95 0f       	add	r25, r21
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	55 1f       	adc	r21, r21
    2204:	62 9f       	mul	r22, r18
    2206:	f0 01       	movw	r30, r0
    2208:	72 9f       	mul	r23, r18
    220a:	bb 27       	eor	r27, r27
    220c:	f0 0d       	add	r31, r0
    220e:	b1 1d       	adc	r27, r1
    2210:	63 9f       	mul	r22, r19
    2212:	aa 27       	eor	r26, r26
    2214:	f0 0d       	add	r31, r0
    2216:	b1 1d       	adc	r27, r1
    2218:	aa 1f       	adc	r26, r26
    221a:	64 9f       	mul	r22, r20
    221c:	66 27       	eor	r22, r22
    221e:	b0 0d       	add	r27, r0
    2220:	a1 1d       	adc	r26, r1
    2222:	66 1f       	adc	r22, r22
    2224:	82 9f       	mul	r24, r18
    2226:	22 27       	eor	r18, r18
    2228:	b0 0d       	add	r27, r0
    222a:	a1 1d       	adc	r26, r1
    222c:	62 1f       	adc	r22, r18
    222e:	73 9f       	mul	r23, r19
    2230:	b0 0d       	add	r27, r0
    2232:	a1 1d       	adc	r26, r1
    2234:	62 1f       	adc	r22, r18
    2236:	83 9f       	mul	r24, r19
    2238:	a0 0d       	add	r26, r0
    223a:	61 1d       	adc	r22, r1
    223c:	22 1f       	adc	r18, r18
    223e:	74 9f       	mul	r23, r20
    2240:	33 27       	eor	r19, r19
    2242:	a0 0d       	add	r26, r0
    2244:	61 1d       	adc	r22, r1
    2246:	23 1f       	adc	r18, r19
    2248:	84 9f       	mul	r24, r20
    224a:	60 0d       	add	r22, r0
    224c:	21 1d       	adc	r18, r1
    224e:	82 2f       	mov	r24, r18
    2250:	76 2f       	mov	r23, r22
    2252:	6a 2f       	mov	r22, r26
    2254:	11 24       	eor	r1, r1
    2256:	9f 57       	subi	r25, 0x7F	; 127
    2258:	50 40       	sbci	r21, 0x00	; 0
    225a:	9a f0       	brmi	.+38     	; 0x2282 <__mulsf3_pse+0x88>
    225c:	f1 f0       	breq	.+60     	; 0x229a <__mulsf3_pse+0xa0>
    225e:	88 23       	and	r24, r24
    2260:	4a f0       	brmi	.+18     	; 0x2274 <__mulsf3_pse+0x7a>
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	bb 1f       	adc	r27, r27
    2268:	66 1f       	adc	r22, r22
    226a:	77 1f       	adc	r23, r23
    226c:	88 1f       	adc	r24, r24
    226e:	91 50       	subi	r25, 0x01	; 1
    2270:	50 40       	sbci	r21, 0x00	; 0
    2272:	a9 f7       	brne	.-22     	; 0x225e <__mulsf3_pse+0x64>
    2274:	9e 3f       	cpi	r25, 0xFE	; 254
    2276:	51 05       	cpc	r21, r1
    2278:	80 f0       	brcs	.+32     	; 0x229a <__mulsf3_pse+0xa0>
    227a:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    227e:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    2282:	5f 3f       	cpi	r21, 0xFF	; 255
    2284:	e4 f3       	brlt	.-8      	; 0x227e <__mulsf3_pse+0x84>
    2286:	98 3e       	cpi	r25, 0xE8	; 232
    2288:	d4 f3       	brlt	.-12     	; 0x227e <__mulsf3_pse+0x84>
    228a:	86 95       	lsr	r24
    228c:	77 95       	ror	r23
    228e:	67 95       	ror	r22
    2290:	b7 95       	ror	r27
    2292:	f7 95       	ror	r31
    2294:	e7 95       	ror	r30
    2296:	9f 5f       	subi	r25, 0xFF	; 255
    2298:	c1 f7       	brne	.-16     	; 0x228a <__mulsf3_pse+0x90>
    229a:	fe 2b       	or	r31, r30
    229c:	88 0f       	add	r24, r24
    229e:	91 1d       	adc	r25, r1
    22a0:	96 95       	lsr	r25
    22a2:	87 95       	ror	r24
    22a4:	97 f9       	bld	r25, 7
    22a6:	08 95       	ret

000022a8 <pow>:
    22a8:	fa 01       	movw	r30, r20
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	30 96       	adiw	r30, 0x00	; 0
    22b0:	21 05       	cpc	r18, r1
    22b2:	31 05       	cpc	r19, r1
    22b4:	a1 f1       	breq	.+104    	; 0x231e <pow+0x76>
    22b6:	61 15       	cp	r22, r1
    22b8:	71 05       	cpc	r23, r1
    22ba:	61 f4       	brne	.+24     	; 0x22d4 <pow+0x2c>
    22bc:	80 38       	cpi	r24, 0x80	; 128
    22be:	bf e3       	ldi	r27, 0x3F	; 63
    22c0:	9b 07       	cpc	r25, r27
    22c2:	49 f1       	breq	.+82     	; 0x2316 <pow+0x6e>
    22c4:	68 94       	set
    22c6:	90 38       	cpi	r25, 0x80	; 128
    22c8:	81 05       	cpc	r24, r1
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <pow+0x3c>
    22cc:	80 38       	cpi	r24, 0x80	; 128
    22ce:	bf ef       	ldi	r27, 0xFF	; 255
    22d0:	9b 07       	cpc	r25, r27
    22d2:	41 f0       	breq	.+16     	; 0x22e4 <pow+0x3c>
    22d4:	99 23       	and	r25, r25
    22d6:	4a f5       	brpl	.+82     	; 0x232a <pow+0x82>
    22d8:	ff 3f       	cpi	r31, 0xFF	; 255
    22da:	e1 05       	cpc	r30, r1
    22dc:	31 05       	cpc	r19, r1
    22de:	21 05       	cpc	r18, r1
    22e0:	19 f1       	breq	.+70     	; 0x2328 <pow+0x80>
    22e2:	e8 94       	clt
    22e4:	08 94       	sec
    22e6:	e7 95       	ror	r30
    22e8:	d9 01       	movw	r26, r18
    22ea:	aa 23       	and	r26, r26
    22ec:	29 f4       	brne	.+10     	; 0x22f8 <pow+0x50>
    22ee:	ab 2f       	mov	r26, r27
    22f0:	be 2f       	mov	r27, r30
    22f2:	f8 5f       	subi	r31, 0xF8	; 248
    22f4:	d0 f3       	brcs	.-12     	; 0x22ea <pow+0x42>
    22f6:	10 c0       	rjmp	.+32     	; 0x2318 <pow+0x70>
    22f8:	ff 5f       	subi	r31, 0xFF	; 255
    22fa:	70 f4       	brcc	.+28     	; 0x2318 <pow+0x70>
    22fc:	a6 95       	lsr	r26
    22fe:	e0 f7       	brcc	.-8      	; 0x22f8 <pow+0x50>
    2300:	f7 39       	cpi	r31, 0x97	; 151
    2302:	50 f0       	brcs	.+20     	; 0x2318 <pow+0x70>
    2304:	19 f0       	breq	.+6      	; 0x230c <pow+0x64>
    2306:	ff 3a       	cpi	r31, 0xAF	; 175
    2308:	38 f4       	brcc	.+14     	; 0x2318 <pow+0x70>
    230a:	9f 77       	andi	r25, 0x7F	; 127
    230c:	9f 93       	push	r25
    230e:	0d d0       	rcall	.+26     	; 0x232a <pow+0x82>
    2310:	0f 90       	pop	r0
    2312:	07 fc       	sbrc	r0, 7
    2314:	90 58       	subi	r25, 0x80	; 128
    2316:	08 95       	ret
    2318:	46 f0       	brts	.+16     	; 0x232a <pow+0x82>
    231a:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	80 e8       	ldi	r24, 0x80	; 128
    2324:	9f e3       	ldi	r25, 0x3F	; 63
    2326:	08 95       	ret
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	9f 77       	andi	r25, 0x7F	; 127
    232c:	5f 93       	push	r21
    232e:	4f 93       	push	r20
    2330:	3f 93       	push	r19
    2332:	2f 93       	push	r18
    2334:	0e 94 4f 12 	call	0x249e	; 0x249e <log>
    2338:	2f 91       	pop	r18
    233a:	3f 91       	pop	r19
    233c:	4f 91       	pop	r20
    233e:	5f 91       	pop	r21
    2340:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
    2344:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <exp>
    2348:	29 f4       	brne	.+10     	; 0x2354 <pow+0xac>
    234a:	16 f0       	brts	.+4      	; 0x2350 <pow+0xa8>
    234c:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    2350:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>
    2354:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>

00002358 <exp>:
    2358:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_splitA>
    235c:	a8 f3       	brcs	.-22     	; 0x2348 <pow+0xa0>
    235e:	96 38       	cpi	r25, 0x86	; 134
    2360:	a0 f7       	brcc	.-24     	; 0x234a <pow+0xa2>
    2362:	07 f8       	bld	r0, 7
    2364:	0f 92       	push	r0
    2366:	e8 94       	clt
    2368:	2b e3       	ldi	r18, 0x3B	; 59
    236a:	3a ea       	ldi	r19, 0xAA	; 170
    236c:	48 eb       	ldi	r20, 0xB8	; 184
    236e:	5f e7       	ldi	r21, 0x7F	; 127
    2370:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3_pse>
    2374:	0f 92       	push	r0
    2376:	0f 92       	push	r0
    2378:	0f 92       	push	r0
    237a:	4d b7       	in	r20, 0x3d	; 61
    237c:	5e b7       	in	r21, 0x3e	; 62
    237e:	0f 92       	push	r0
    2380:	0e 94 97 12 	call	0x252e	; 0x252e <modf>
    2384:	e8 e6       	ldi	r30, 0x68	; 104
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	0e 94 de 11 	call	0x23bc	; 0x23bc <__fp_powser>
    238c:	4f 91       	pop	r20
    238e:	5f 91       	pop	r21
    2390:	ef 91       	pop	r30
    2392:	ff 91       	pop	r31
    2394:	e5 95       	asr	r30
    2396:	ee 1f       	adc	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	49 f0       	breq	.+18     	; 0x23ae <exp+0x56>
    239c:	fe 57       	subi	r31, 0x7E	; 126
    239e:	e0 68       	ori	r30, 0x80	; 128
    23a0:	44 27       	eor	r20, r20
    23a2:	ee 0f       	add	r30, r30
    23a4:	44 1f       	adc	r20, r20
    23a6:	fa 95       	dec	r31
    23a8:	e1 f7       	brne	.-8      	; 0x23a2 <exp+0x4a>
    23aa:	41 95       	neg	r20
    23ac:	55 0b       	sbc	r21, r21
    23ae:	0e 94 11 12 	call	0x2422	; 0x2422 <ldexp>
    23b2:	0f 90       	pop	r0
    23b4:	07 fe       	sbrs	r0, 7
    23b6:	0c 94 05 12 	jmp	0x240a	; 0x240a <inverse>
    23ba:	08 95       	ret

000023bc <__fp_powser>:
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	1f 93       	push	r17
    23c2:	0f 93       	push	r16
    23c4:	ff 92       	push	r15
    23c6:	ef 92       	push	r14
    23c8:	df 92       	push	r13
    23ca:	7b 01       	movw	r14, r22
    23cc:	8c 01       	movw	r16, r24
    23ce:	68 94       	set
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <__fp_powser+0x22>
    23d2:	da 2e       	mov	r13, r26
    23d4:	ef 01       	movw	r28, r30
    23d6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__mulsf3x>
    23da:	fe 01       	movw	r30, r28
    23dc:	e8 94       	clt
    23de:	a5 91       	lpm	r26, Z+
    23e0:	25 91       	lpm	r18, Z+
    23e2:	35 91       	lpm	r19, Z+
    23e4:	45 91       	lpm	r20, Z+
    23e6:	55 91       	lpm	r21, Z+
    23e8:	a6 f3       	brts	.-24     	; 0x23d2 <__fp_powser+0x16>
    23ea:	ef 01       	movw	r28, r30
    23ec:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__addsf3x>
    23f0:	fe 01       	movw	r30, r28
    23f2:	97 01       	movw	r18, r14
    23f4:	a8 01       	movw	r20, r16
    23f6:	da 94       	dec	r13
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <__fp_powser+0x18>
    23fa:	df 90       	pop	r13
    23fc:	ef 90       	pop	r14
    23fe:	ff 90       	pop	r15
    2400:	0f 91       	pop	r16
    2402:	1f 91       	pop	r17
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <inverse>:
    240a:	9b 01       	movw	r18, r22
    240c:	ac 01       	movw	r20, r24
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	80 e8       	ldi	r24, 0x80	; 128
    2414:	9f e3       	ldi	r25, 0x3F	; 63
    2416:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__divsf3>
    241a:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    241e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_mpack>

00002422 <ldexp>:
    2422:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_splitA>
    2426:	d8 f3       	brcs	.-10     	; 0x241e <inverse+0x14>
    2428:	99 23       	and	r25, r25
    242a:	c9 f3       	breq	.-14     	; 0x241e <inverse+0x14>
    242c:	94 0f       	add	r25, r20
    242e:	51 1d       	adc	r21, r1
    2430:	a3 f3       	brvs	.-24     	; 0x241a <inverse+0x10>
    2432:	91 50       	subi	r25, 0x01	; 1
    2434:	50 40       	sbci	r21, 0x00	; 0
    2436:	94 f0       	brlt	.+36     	; 0x245c <ldexp+0x3a>
    2438:	59 f0       	breq	.+22     	; 0x2450 <ldexp+0x2e>
    243a:	88 23       	and	r24, r24
    243c:	32 f0       	brmi	.+12     	; 0x244a <ldexp+0x28>
    243e:	66 0f       	add	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	88 1f       	adc	r24, r24
    2444:	91 50       	subi	r25, 0x01	; 1
    2446:	50 40       	sbci	r21, 0x00	; 0
    2448:	c1 f7       	brne	.-16     	; 0x243a <ldexp+0x18>
    244a:	9e 3f       	cpi	r25, 0xFE	; 254
    244c:	51 05       	cpc	r21, r1
    244e:	2c f7       	brge	.-54     	; 0x241a <inverse+0x10>
    2450:	88 0f       	add	r24, r24
    2452:	91 1d       	adc	r25, r1
    2454:	96 95       	lsr	r25
    2456:	87 95       	ror	r24
    2458:	97 f9       	bld	r25, 7
    245a:	08 95       	ret
    245c:	5f 3f       	cpi	r21, 0xFF	; 255
    245e:	ac f0       	brlt	.+42     	; 0x248a <ldexp+0x68>
    2460:	98 3e       	cpi	r25, 0xE8	; 232
    2462:	9c f0       	brlt	.+38     	; 0x248a <ldexp+0x68>
    2464:	bb 27       	eor	r27, r27
    2466:	86 95       	lsr	r24
    2468:	77 95       	ror	r23
    246a:	67 95       	ror	r22
    246c:	b7 95       	ror	r27
    246e:	08 f4       	brcc	.+2      	; 0x2472 <ldexp+0x50>
    2470:	b1 60       	ori	r27, 0x01	; 1
    2472:	93 95       	inc	r25
    2474:	c1 f7       	brne	.-16     	; 0x2466 <ldexp+0x44>
    2476:	bb 0f       	add	r27, r27
    2478:	58 f7       	brcc	.-42     	; 0x2450 <ldexp+0x2e>
    247a:	11 f4       	brne	.+4      	; 0x2480 <ldexp+0x5e>
    247c:	60 ff       	sbrs	r22, 0
    247e:	e8 cf       	rjmp	.-48     	; 0x2450 <ldexp+0x2e>
    2480:	6f 5f       	subi	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	e3 cf       	rjmp	.-58     	; 0x2450 <ldexp+0x2e>
    248a:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    248e:	16 f0       	brts	.+4      	; 0x2494 <ldexp+0x72>
    2490:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_mpack>
    2494:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_nan>
    2498:	68 94       	set
    249a:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>

0000249e <log>:
    249e:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_splitA>
    24a2:	a8 f3       	brcs	.-22     	; 0x248e <ldexp+0x6c>
    24a4:	99 23       	and	r25, r25
    24a6:	c1 f3       	breq	.-16     	; 0x2498 <ldexp+0x76>
    24a8:	ae f3       	brts	.-22     	; 0x2494 <ldexp+0x72>
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	1f 93       	push	r17
    24b0:	0f 93       	push	r16
    24b2:	ff 92       	push	r15
    24b4:	c9 2f       	mov	r28, r25
    24b6:	dd 27       	eor	r29, r29
    24b8:	88 23       	and	r24, r24
    24ba:	2a f0       	brmi	.+10     	; 0x24c6 <log+0x28>
    24bc:	21 97       	sbiw	r28, 0x01	; 1
    24be:	66 0f       	add	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	da f7       	brpl	.-10     	; 0x24bc <log+0x1e>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f eb       	ldi	r21, 0xBF	; 191
    24ce:	9f e3       	ldi	r25, 0x3F	; 63
    24d0:	88 39       	cpi	r24, 0x98	; 152
    24d2:	20 f0       	brcs	.+8      	; 0x24dc <log+0x3e>
    24d4:	80 3e       	cpi	r24, 0xE0	; 224
    24d6:	38 f0       	brcs	.+14     	; 0x24e6 <log+0x48>
    24d8:	21 96       	adiw	r28, 0x01	; 1
    24da:	8f 77       	andi	r24, 0x7F	; 127
    24dc:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3>
    24e0:	e0 e9       	ldi	r30, 0x90	; 144
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <log+0x50>
    24e6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3>
    24ea:	ed eb       	ldi	r30, 0xBD	; 189
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	0e 94 de 11 	call	0x23bc	; 0x23bc <__fp_powser>
    24f2:	8b 01       	movw	r16, r22
    24f4:	be 01       	movw	r22, r28
    24f6:	ec 01       	movw	r28, r24
    24f8:	fb 2e       	mov	r15, r27
    24fa:	6f 57       	subi	r22, 0x7F	; 127
    24fc:	71 09       	sbc	r23, r1
    24fe:	75 95       	asr	r23
    2500:	77 1f       	adc	r23, r23
    2502:	88 0b       	sbc	r24, r24
    2504:	99 0b       	sbc	r25, r25
    2506:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__floatsisf>
    250a:	28 e1       	ldi	r18, 0x18	; 24
    250c:	32 e7       	ldi	r19, 0x72	; 114
    250e:	41 e3       	ldi	r20, 0x31	; 49
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__mulsf3x>
    2516:	af 2d       	mov	r26, r15
    2518:	98 01       	movw	r18, r16
    251a:	ae 01       	movw	r20, r28
    251c:	ff 90       	pop	r15
    251e:	0f 91       	pop	r16
    2520:	1f 91       	pop	r17
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__addsf3x>
    252a:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_round>

0000252e <modf>:
    252e:	fa 01       	movw	r30, r20
    2530:	dc 01       	movw	r26, r24
    2532:	aa 0f       	add	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	9b 01       	movw	r18, r22
    2538:	ac 01       	movw	r20, r24
    253a:	bf 57       	subi	r27, 0x7F	; 127
    253c:	28 f4       	brcc	.+10     	; 0x2548 <modf+0x1a>
    253e:	22 27       	eor	r18, r18
    2540:	33 27       	eor	r19, r19
    2542:	44 27       	eor	r20, r20
    2544:	50 78       	andi	r21, 0x80	; 128
    2546:	20 c0       	rjmp	.+64     	; 0x2588 <modf+0x5a>
    2548:	b7 51       	subi	r27, 0x17	; 23
    254a:	90 f4       	brcc	.+36     	; 0x2570 <modf+0x42>
    254c:	ab 2f       	mov	r26, r27
    254e:	00 24       	eor	r0, r0
    2550:	46 95       	lsr	r20
    2552:	37 95       	ror	r19
    2554:	27 95       	ror	r18
    2556:	01 1c       	adc	r0, r1
    2558:	a3 95       	inc	r26
    255a:	d2 f3       	brmi	.-12     	; 0x2550 <modf+0x22>
    255c:	00 20       	and	r0, r0
    255e:	71 f0       	breq	.+28     	; 0x257c <modf+0x4e>
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	44 1f       	adc	r20, r20
    2566:	b3 95       	inc	r27
    2568:	da f3       	brmi	.-10     	; 0x2560 <modf+0x32>
    256a:	0e d0       	rcall	.+28     	; 0x2588 <modf+0x5a>
    256c:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__subsf3>
    2570:	61 30       	cpi	r22, 0x01	; 1
    2572:	71 05       	cpc	r23, r1
    2574:	a0 e8       	ldi	r26, 0x80	; 128
    2576:	8a 07       	cpc	r24, r26
    2578:	b9 46       	sbci	r27, 0x69	; 105
    257a:	30 f4       	brcc	.+12     	; 0x2588 <modf+0x5a>
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
    2580:	66 27       	eor	r22, r22
    2582:	77 27       	eor	r23, r23
    2584:	88 27       	eor	r24, r24
    2586:	90 78       	andi	r25, 0x80	; 128
    2588:	30 96       	adiw	r30, 0x00	; 0
    258a:	21 f0       	breq	.+8      	; 0x2594 <modf+0x66>
    258c:	20 83       	st	Z, r18
    258e:	31 83       	std	Z+1, r19	; 0x01
    2590:	42 83       	std	Z+2, r20	; 0x02
    2592:	53 83       	std	Z+3, r21	; 0x03
    2594:	08 95       	ret

00002596 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2596:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2598:	91 8d       	ldd	r25, Z+25	; 0x19
    259a:	22 8d       	ldd	r18, Z+26	; 0x1a
    259c:	89 2f       	mov	r24, r25
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	80 5c       	subi	r24, 0xC0	; 192
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	82 1b       	sub	r24, r18
    25a6:	91 09       	sbc	r25, r1
}
    25a8:	8f 73       	andi	r24, 0x3F	; 63
    25aa:	99 27       	eor	r25, r25
    25ac:	08 95       	ret

000025ae <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    25ae:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    25b0:	91 8d       	ldd	r25, Z+25	; 0x19
    25b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25b4:	98 17       	cp	r25, r24
    25b6:	31 f0       	breq	.+12     	; 0x25c4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    25b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ba:	e8 0f       	add	r30, r24
    25bc:	f1 1d       	adc	r31, r1
    25be:	85 8d       	ldd	r24, Z+29	; 0x1d
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    25c4:	8f ef       	ldi	r24, 0xFF	; 255
    25c6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    25c8:	08 95       	ret

000025ca <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    25ca:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    25cc:	91 8d       	ldd	r25, Z+25	; 0x19
    25ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d0:	98 17       	cp	r25, r24
    25d2:	61 f0       	breq	.+24     	; 0x25ec <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    25d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d6:	df 01       	movw	r26, r30
    25d8:	a8 0f       	add	r26, r24
    25da:	b1 1d       	adc	r27, r1
    25dc:	5d 96       	adiw	r26, 0x1d	; 29
    25de:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    25e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	9f 73       	andi	r25, 0x3F	; 63
    25e6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    25f0:	08 95       	ret

000025f2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    25f2:	8e e4       	ldi	r24, 0x4E	; 78
    25f4:	94 e1       	ldi	r25, 0x14	; 20
    25f6:	89 2b       	or	r24, r25
    25f8:	49 f0       	breq	.+18     	; 0x260c <_Z14serialEventRunv+0x1a>
    25fa:	88 e3       	ldi	r24, 0x38	; 56
    25fc:	99 e0       	ldi	r25, 0x09	; 9
    25fe:	89 2b       	or	r24, r25
    2600:	29 f0       	breq	.+10     	; 0x260c <_Z14serialEventRunv+0x1a>
    2602:	0e 94 4e 14 	call	0x289c	; 0x289c <_Z17Serial0_availablev>
    2606:	81 11       	cpse	r24, r1
    2608:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_Z11serialEventv>
    260c:	08 95       	ret

0000260e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    260e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2610:	84 8d       	ldd	r24, Z+28	; 0x1c
    2612:	df 01       	movw	r26, r30
    2614:	a8 0f       	add	r26, r24
    2616:	b1 1d       	adc	r27, r1
    2618:	a3 5a       	subi	r26, 0xA3	; 163
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    261e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	8f 73       	andi	r24, 0x3F	; 63
    2626:	99 27       	eor	r25, r25
    2628:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    262a:	a6 89       	ldd	r26, Z+22	; 0x16
    262c:	b7 89       	ldd	r27, Z+23	; 0x17
    262e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2630:	a0 89       	ldd	r26, Z+16	; 0x10
    2632:	b1 89       	ldd	r27, Z+17	; 0x11
    2634:	8c 91       	ld	r24, X
    2636:	80 64       	ori	r24, 0x40	; 64
    2638:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    263a:	93 8d       	ldd	r25, Z+27	; 0x1b
    263c:	84 8d       	ldd	r24, Z+28	; 0x1c
    263e:	98 13       	cpse	r25, r24
    2640:	06 c0       	rjmp	.+12     	; 0x264e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2642:	02 88       	ldd	r0, Z+18	; 0x12
    2644:	f3 89       	ldd	r31, Z+19	; 0x13
    2646:	e0 2d       	mov	r30, r0
    2648:	80 81       	ld	r24, Z
    264a:	8f 7d       	andi	r24, 0xDF	; 223
    264c:	80 83       	st	Z, r24
    264e:	08 95       	ret

00002650 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2656:	88 8d       	ldd	r24, Y+24	; 0x18
    2658:	88 23       	and	r24, r24
    265a:	c9 f0       	breq	.+50     	; 0x268e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    265c:	ea 89       	ldd	r30, Y+18	; 0x12
    265e:	fb 89       	ldd	r31, Y+19	; 0x13
    2660:	80 81       	ld	r24, Z
    2662:	85 fd       	sbrc	r24, 5
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <_ZN14HardwareSerial5flushEv+0x20>
    2666:	a8 89       	ldd	r26, Y+16	; 0x10
    2668:	b9 89       	ldd	r27, Y+17	; 0x11
    266a:	8c 91       	ld	r24, X
    266c:	86 fd       	sbrc	r24, 6
    266e:	0f c0       	rjmp	.+30     	; 0x268e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	07 fc       	sbrc	r0, 7
    2674:	f5 cf       	rjmp	.-22     	; 0x2660 <_ZN14HardwareSerial5flushEv+0x10>
    2676:	80 81       	ld	r24, Z
    2678:	85 ff       	sbrs	r24, 5
    267a:	f2 cf       	rjmp	.-28     	; 0x2660 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    267c:	a8 89       	ldd	r26, Y+16	; 0x10
    267e:	b9 89       	ldd	r27, Y+17	; 0x11
    2680:	8c 91       	ld	r24, X
    2682:	85 ff       	sbrs	r24, 5
    2684:	ed cf       	rjmp	.-38     	; 0x2660 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2686:	ce 01       	movw	r24, r28
    2688:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    268c:	e7 cf       	rjmp	.-50     	; 0x265c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	ec 01       	movw	r28, r24
  _written = true;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    26a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26aa:	98 13       	cpse	r25, r24
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <_ZN14HardwareSerial5writeEh+0x24>
    26ae:	e8 89       	ldd	r30, Y+16	; 0x10
    26b0:	f9 89       	ldd	r31, Y+17	; 0x11
    26b2:	80 81       	ld	r24, Z
    26b4:	85 fd       	sbrc	r24, 5
    26b6:	24 c0       	rjmp	.+72     	; 0x2700 <_ZN14HardwareSerial5writeEh+0x6c>
    26b8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    26ba:	0b 8d       	ldd	r16, Y+27	; 0x1b
    26bc:	10 e0       	ldi	r17, 0x00	; 0
    26be:	0f 5f       	subi	r16, 0xFF	; 255
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	0f 73       	andi	r16, 0x3F	; 63
    26c4:	11 27       	eor	r17, r17
    26c6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    26c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26ca:	e8 12       	cpse	r14, r24
    26cc:	0c c0       	rjmp	.+24     	; 0x26e6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	07 fc       	sbrc	r0, 7
    26d2:	fa cf       	rjmp	.-12     	; 0x26c8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    26d4:	e8 89       	ldd	r30, Y+16	; 0x10
    26d6:	f9 89       	ldd	r31, Y+17	; 0x11
    26d8:	80 81       	ld	r24, Z
    26da:	85 ff       	sbrs	r24, 5
    26dc:	f5 cf       	rjmp	.-22     	; 0x26c8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    26de:	ce 01       	movw	r24, r28
    26e0:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    26e4:	f1 cf       	rjmp	.-30     	; 0x26c8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    26e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e8:	fe 01       	movw	r30, r28
    26ea:	e8 0f       	add	r30, r24
    26ec:	f1 1d       	adc	r31, r1
    26ee:	e3 5a       	subi	r30, 0xA3	; 163
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    26f4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    26f6:	ea 89       	ldd	r30, Y+18	; 0x12
    26f8:	fb 89       	ldd	r31, Y+19	; 0x13
    26fa:	80 81       	ld	r24, Z
    26fc:	80 62       	ori	r24, 0x20	; 32
    26fe:	07 c0       	rjmp	.+14     	; 0x270e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2700:	ee 89       	ldd	r30, Y+22	; 0x16
    2702:	ff 89       	ldd	r31, Y+23	; 0x17
    2704:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2706:	e8 89       	ldd	r30, Y+16	; 0x10
    2708:	f9 89       	ldd	r31, Y+17	; 0x11
    270a:	80 81       	ld	r24, Z
    270c:	80 64       	ori	r24, 0x40	; 64
    270e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	ff 90       	pop	r15
    271e:	ef 90       	pop	r14
    2720:	08 95       	ret

00002722 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	ec 01       	movw	r28, r24
    2732:	6a 01       	movw	r12, r20
    2734:	7b 01       	movw	r14, r22
    2736:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2738:	e8 89       	ldd	r30, Y+16	; 0x10
    273a:	f9 89       	ldd	r31, Y+17	; 0x11
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2740:	41 15       	cp	r20, r1
    2742:	51 4e       	sbci	r21, 0xE1	; 225
    2744:	61 05       	cpc	r22, r1
    2746:	71 05       	cpc	r23, r1
    2748:	b1 f0       	breq	.+44     	; 0x2776 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	79 e0       	ldi	r23, 0x09	; 9
    274e:	8d e3       	ldi	r24, 0x3D	; 61
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a7 01       	movw	r20, r14
    2754:	96 01       	movw	r18, r12
    2756:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodsi4>
    275a:	da 01       	movw	r26, r20
    275c:	c9 01       	movw	r24, r18
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	a1 09       	sbc	r26, r1
    2762:	b1 09       	sbc	r27, r1
    2764:	b6 95       	lsr	r27
    2766:	a7 95       	ror	r26
    2768:	97 95       	ror	r25
    276a:	87 95       	ror	r24
    276c:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    276e:	41 15       	cp	r20, r1
    2770:	80 e1       	ldi	r24, 0x10	; 16
    2772:	58 07       	cpc	r21, r24
    2774:	a8 f0       	brcs	.+42     	; 0x27a0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2776:	e8 89       	ldd	r30, Y+16	; 0x10
    2778:	f9 89       	ldd	r31, Y+17	; 0x11
    277a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    277c:	60 e8       	ldi	r22, 0x80	; 128
    277e:	74 e8       	ldi	r23, 0x84	; 132
    2780:	8e e1       	ldi	r24, 0x1E	; 30
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a7 01       	movw	r20, r14
    2786:	96 01       	movw	r18, r12
    2788:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodsi4>
    278c:	ba 01       	movw	r22, r20
    278e:	a9 01       	movw	r20, r18
    2790:	41 50       	subi	r20, 0x01	; 1
    2792:	51 09       	sbc	r21, r1
    2794:	61 09       	sbc	r22, r1
    2796:	71 09       	sbc	r23, r1
    2798:	76 95       	lsr	r23
    279a:	67 95       	ror	r22
    279c:	57 95       	ror	r21
    279e:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    27a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    27a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    27a4:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    27a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    27a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    27aa:	40 83       	st	Z, r20

  _written = false;
    27ac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    27ae:	ec 89       	ldd	r30, Y+20	; 0x14
    27b0:	fd 89       	ldd	r31, Y+21	; 0x15
    27b2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    27b4:	ea 89       	ldd	r30, Y+18	; 0x12
    27b6:	fb 89       	ldd	r31, Y+19	; 0x13
    27b8:	80 81       	ld	r24, Z
    27ba:	80 61       	ori	r24, 0x10	; 16
    27bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    27be:	ea 89       	ldd	r30, Y+18	; 0x12
    27c0:	fb 89       	ldd	r31, Y+19	; 0x13
    27c2:	80 81       	ld	r24, Z
    27c4:	88 60       	ori	r24, 0x08	; 8
    27c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    27c8:	ea 89       	ldd	r30, Y+18	; 0x12
    27ca:	fb 89       	ldd	r31, Y+19	; 0x13
    27cc:	80 81       	ld	r24, Z
    27ce:	80 68       	ori	r24, 0x80	; 128
    27d0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    27d2:	ea 89       	ldd	r30, Y+18	; 0x12
    27d4:	fb 89       	ldd	r31, Y+19	; 0x13
    27d6:	80 81       	ld	r24, Z
    27d8:	8f 7d       	andi	r24, 0xDF	; 223
    27da:	80 83       	st	Z, r24
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	08 95       	ret

000027ec <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    27ec:	1f 92       	push	r1
    27ee:	0f 92       	push	r0
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	0f 92       	push	r0
    27f4:	11 24       	eor	r1, r1
    27f6:	2f 93       	push	r18
    27f8:	8f 93       	push	r24
    27fa:	9f 93       	push	r25
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2800:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <Serial+0x10>
    2804:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <Serial+0x11>
    2808:	80 81       	ld	r24, Z
    280a:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <Serial+0x16>
    280e:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <Serial+0x17>
    2812:	82 fd       	sbrc	r24, 2
    2814:	12 c0       	rjmp	.+36     	; 0x283a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2816:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2818:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <Serial+0x19>
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2820:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <Serial+0x1a>
    2824:	82 17       	cp	r24, r18
    2826:	51 f0       	breq	.+20     	; 0x283c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2828:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <Serial+0x19>
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	e0 54       	subi	r30, 0x40	; 64
    2830:	fd 4f       	sbci	r31, 0xFD	; 253
    2832:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2834:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <Serial+0x19>
    2838:	01 c0       	rjmp	.+2      	; 0x283c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    283a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    283c:	ff 91       	pop	r31
    283e:	ef 91       	pop	r30
    2840:	9f 91       	pop	r25
    2842:	8f 91       	pop	r24
    2844:	2f 91       	pop	r18
    2846:	0f 90       	pop	r0
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	0f 90       	pop	r0
    284c:	1f 90       	pop	r1
    284e:	18 95       	reti

00002850 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	2f 93       	push	r18
    285c:	3f 93       	push	r19
    285e:	4f 93       	push	r20
    2860:	5f 93       	push	r21
    2862:	6f 93       	push	r22
    2864:	7f 93       	push	r23
    2866:	8f 93       	push	r24
    2868:	9f 93       	push	r25
    286a:	af 93       	push	r26
    286c:	bf 93       	push	r27
    286e:	ef 93       	push	r30
    2870:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2872:	80 ec       	ldi	r24, 0xC0	; 192
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    287a:	ff 91       	pop	r31
    287c:	ef 91       	pop	r30
    287e:	bf 91       	pop	r27
    2880:	af 91       	pop	r26
    2882:	9f 91       	pop	r25
    2884:	8f 91       	pop	r24
    2886:	7f 91       	pop	r23
    2888:	6f 91       	pop	r22
    288a:	5f 91       	pop	r21
    288c:	4f 91       	pop	r20
    288e:	3f 91       	pop	r19
    2890:	2f 91       	pop	r18
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    289c:	80 ec       	ldi	r24, 0xC0	; 192
    289e:	92 e0       	ldi	r25, 0x02	; 2
    28a0:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN14HardwareSerial9availableEv>
    28a4:	21 e0       	ldi	r18, 0x01	; 1
    28a6:	89 2b       	or	r24, r25
    28a8:	09 f4       	brne	.+2      	; 0x28ac <_Z17Serial0_availablev+0x10>
    28aa:	20 e0       	ldi	r18, 0x00	; 0
}
    28ac:	82 2f       	mov	r24, r18
    28ae:	08 95       	ret

000028b0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    28b0:	e0 ec       	ldi	r30, 0xC0	; 192
    28b2:	f2 e0       	ldi	r31, 0x02	; 2
    28b4:	13 82       	std	Z+3, r1	; 0x03
    28b6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    28b8:	88 ee       	ldi	r24, 0xE8	; 232
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	a0 e0       	ldi	r26, 0x00	; 0
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	84 83       	std	Z+4, r24	; 0x04
    28c2:	95 83       	std	Z+5, r25	; 0x05
    28c4:	a6 83       	std	Z+6, r26	; 0x06
    28c6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    28c8:	81 ea       	ldi	r24, 0xA1	; 161
    28ca:	91 e0       	ldi	r25, 0x01	; 1
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	80 83       	st	Z, r24
    28d0:	85 ec       	ldi	r24, 0xC5	; 197
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	95 87       	std	Z+13, r25	; 0x0d
    28d6:	84 87       	std	Z+12, r24	; 0x0c
    28d8:	84 ec       	ldi	r24, 0xC4	; 196
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	97 87       	std	Z+15, r25	; 0x0f
    28de:	86 87       	std	Z+14, r24	; 0x0e
    28e0:	80 ec       	ldi	r24, 0xC0	; 192
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 8b       	std	Z+17, r25	; 0x11
    28e6:	80 8b       	std	Z+16, r24	; 0x10
    28e8:	81 ec       	ldi	r24, 0xC1	; 193
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	93 8b       	std	Z+19, r25	; 0x13
    28ee:	82 8b       	std	Z+18, r24	; 0x12
    28f0:	82 ec       	ldi	r24, 0xC2	; 194
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	95 8b       	std	Z+21, r25	; 0x15
    28f6:	84 8b       	std	Z+20, r24	; 0x14
    28f8:	86 ec       	ldi	r24, 0xC6	; 198
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	97 8b       	std	Z+23, r25	; 0x17
    28fe:	86 8b       	std	Z+22, r24	; 0x16
    2900:	11 8e       	std	Z+25, r1	; 0x19
    2902:	12 8e       	std	Z+26, r1	; 0x1a
    2904:	13 8e       	std	Z+27, r1	; 0x1b
    2906:	14 8e       	std	Z+28, r1	; 0x1c
    2908:	08 95       	ret

0000290a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    290a:	08 95       	ret

0000290c <main>:

int main(void)
{
	init();
    290c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <init>

	initVariant();
    2910:	0e 94 85 14 	call	0x290a	; 0x290a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2914:	0e 94 f7 03 	call	0x7ee	; 0x7ee <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2918:	c9 ef       	ldi	r28, 0xF9	; 249
    291a:	d2 e1       	ldi	r29, 0x12	; 18
#endif
	
	setup();
    
	for (;;) {
		loop();
    291c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <loop>
		if (serialEventRun) serialEventRun();
    2920:	20 97       	sbiw	r28, 0x00	; 0
    2922:	e1 f3       	breq	.-8      	; 0x291c <main+0x10>
    2924:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_Z14serialEventRunv>
    2928:	f9 cf       	rjmp	.-14     	; 0x291c <main+0x10>

0000292a <_ZN5Print5writeEPKhj>:
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	6c 01       	movw	r12, r24
    293c:	7a 01       	movw	r14, r20
    293e:	8b 01       	movw	r16, r22
    2940:	c0 e0       	ldi	r28, 0x00	; 0
    2942:	d0 e0       	ldi	r29, 0x00	; 0
    2944:	ce 15       	cp	r28, r14
    2946:	df 05       	cpc	r29, r15
    2948:	89 f0       	breq	.+34     	; 0x296c <_ZN5Print5writeEPKhj+0x42>
    294a:	d8 01       	movw	r26, r16
    294c:	6d 91       	ld	r22, X+
    294e:	8d 01       	movw	r16, r26
    2950:	d6 01       	movw	r26, r12
    2952:	ed 91       	ld	r30, X+
    2954:	fc 91       	ld	r31, X
    2956:	01 90       	ld	r0, Z+
    2958:	f0 81       	ld	r31, Z
    295a:	e0 2d       	mov	r30, r0
    295c:	c6 01       	movw	r24, r12
    295e:	09 95       	icall
    2960:	89 2b       	or	r24, r25
    2962:	11 f4       	brne	.+4      	; 0x2968 <_ZN5Print5writeEPKhj+0x3e>
    2964:	7e 01       	movw	r14, r28
    2966:	02 c0       	rjmp	.+4      	; 0x296c <_ZN5Print5writeEPKhj+0x42>
    2968:	21 96       	adiw	r28, 0x01	; 1
    296a:	ec cf       	rjmp	.-40     	; 0x2944 <_ZN5Print5writeEPKhj+0x1a>
    296c:	c7 01       	movw	r24, r14
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	1f 91       	pop	r17
    2974:	0f 91       	pop	r16
    2976:	ff 90       	pop	r15
    2978:	ef 90       	pop	r14
    297a:	df 90       	pop	r13
    297c:	cf 90       	pop	r12
    297e:	08 95       	ret

00002980 <_ZN5Print5writeEPKc>:
    2980:	61 15       	cp	r22, r1
    2982:	71 05       	cpc	r23, r1
    2984:	79 f0       	breq	.+30     	; 0x29a4 <_ZN5Print5writeEPKc+0x24>
    2986:	fb 01       	movw	r30, r22
    2988:	01 90       	ld	r0, Z+
    298a:	00 20       	and	r0, r0
    298c:	e9 f7       	brne	.-6      	; 0x2988 <_ZN5Print5writeEPKc+0x8>
    298e:	31 97       	sbiw	r30, 0x01	; 1
    2990:	af 01       	movw	r20, r30
    2992:	46 1b       	sub	r20, r22
    2994:	57 0b       	sbc	r21, r23
    2996:	dc 01       	movw	r26, r24
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	02 80       	ldd	r0, Z+2	; 0x02
    299e:	f3 81       	ldd	r31, Z+3	; 0x03
    29a0:	e0 2d       	mov	r30, r0
    29a2:	09 94       	ijmp
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	08 95       	ret

000029aa <_ZN5Print5printERK6String>:
    29aa:	dc 01       	movw	r26, r24
    29ac:	ed 91       	ld	r30, X+
    29ae:	fc 91       	ld	r31, X
    29b0:	db 01       	movw	r26, r22
    29b2:	14 96       	adiw	r26, 0x04	; 4
    29b4:	4d 91       	ld	r20, X+
    29b6:	5c 91       	ld	r21, X
    29b8:	15 97       	sbiw	r26, 0x05	; 5
    29ba:	6d 91       	ld	r22, X+
    29bc:	7c 91       	ld	r23, X
    29be:	02 80       	ldd	r0, Z+2	; 0x02
    29c0:	f3 81       	ldd	r31, Z+3	; 0x03
    29c2:	e0 2d       	mov	r30, r0
    29c4:	09 94       	ijmp

000029c6 <_ZN5Print7printlnEv>:
    29c6:	6d ea       	ldi	r22, 0xAD	; 173
    29c8:	71 e0       	ldi	r23, 0x01	; 1
    29ca:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <_ZN5Print5writeEPKc>

000029ce <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	ec 01       	movw	r28, r24
  size_t n = print(s);
    29d8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printERK6String>
    29dc:	8c 01       	movw	r16, r24
  n += println();
    29de:	ce 01       	movw	r24, r28
    29e0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN5Print7printlnEv>
  return n;
}
    29e4:	80 0f       	add	r24, r16
    29e6:	91 1f       	adc	r25, r17
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	08 95       	ret

000029f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    29fc:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZN5Print5writeEPKc>
    2a00:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2a02:	ce 01       	movw	r24, r28
    2a04:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN5Print7printlnEv>
  return n;
}
    2a08:	80 0f       	add	r24, r16
    2a0a:	91 1f       	adc	r25, r17
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

00002a16 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2a16:	08 95       	ret

00002a18 <attachInterrupt>:
    2a18:	82 30       	cpi	r24, 0x02	; 2
    2a1a:	e8 f4       	brcc	.+58     	; 0x2a56 <attachInterrupt+0x3e>
    2a1c:	e8 2f       	mov	r30, r24
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	e6 5f       	subi	r30, 0xF6	; 246
    2a26:	fe 4f       	sbci	r31, 0xFE	; 254
    2a28:	71 83       	std	Z+1, r23	; 0x01
    2a2a:	60 83       	st	Z, r22
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	41 f0       	breq	.+16     	; 0x2a40 <attachInterrupt+0x28>
    2a30:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2a34:	8c 7f       	andi	r24, 0xFC	; 252
    2a36:	48 2b       	or	r20, r24
    2a38:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2a3c:	e8 9a       	sbi	0x1d, 0	; 29
    2a3e:	08 95       	ret
    2a40:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2a44:	44 0f       	add	r20, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	44 0f       	add	r20, r20
    2a4a:	55 1f       	adc	r21, r21
    2a4c:	83 7f       	andi	r24, 0xF3	; 243
    2a4e:	48 2b       	or	r20, r24
    2a50:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2a54:	e9 9a       	sbi	0x1d, 1	; 29
    2a56:	08 95       	ret

00002a58 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2a58:	1f 92       	push	r1
    2a5a:	0f 92       	push	r0
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	0f 92       	push	r0
    2a60:	11 24       	eor	r1, r1
    2a62:	2f 93       	push	r18
    2a64:	3f 93       	push	r19
    2a66:	4f 93       	push	r20
    2a68:	5f 93       	push	r21
    2a6a:	6f 93       	push	r22
    2a6c:	7f 93       	push	r23
    2a6e:	8f 93       	push	r24
    2a70:	9f 93       	push	r25
    2a72:	af 93       	push	r26
    2a74:	bf 93       	push	r27
    2a76:	ef 93       	push	r30
    2a78:	ff 93       	push	r31
    2a7a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc>
    2a7e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x1>
    2a82:	09 95       	icall
    2a84:	ff 91       	pop	r31
    2a86:	ef 91       	pop	r30
    2a88:	bf 91       	pop	r27
    2a8a:	af 91       	pop	r26
    2a8c:	9f 91       	pop	r25
    2a8e:	8f 91       	pop	r24
    2a90:	7f 91       	pop	r23
    2a92:	6f 91       	pop	r22
    2a94:	5f 91       	pop	r21
    2a96:	4f 91       	pop	r20
    2a98:	3f 91       	pop	r19
    2a9a:	2f 91       	pop	r18
    2a9c:	0f 90       	pop	r0
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	0f 90       	pop	r0
    2aa2:	1f 90       	pop	r1
    2aa4:	18 95       	reti

00002aa6 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2aa6:	1f 92       	push	r1
    2aa8:	0f 92       	push	r0
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	0f 92       	push	r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	2f 93       	push	r18
    2ab2:	3f 93       	push	r19
    2ab4:	4f 93       	push	r20
    2ab6:	5f 93       	push	r21
    2ab8:	6f 93       	push	r22
    2aba:	7f 93       	push	r23
    2abc:	8f 93       	push	r24
    2abe:	9f 93       	push	r25
    2ac0:	af 93       	push	r26
    2ac2:	bf 93       	push	r27
    2ac4:	ef 93       	push	r30
    2ac6:	ff 93       	push	r31
    2ac8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <intFunc+0x2>
    2acc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <intFunc+0x3>
    2ad0:	09 95       	icall
    2ad2:	ff 91       	pop	r31
    2ad4:	ef 91       	pop	r30
    2ad6:	bf 91       	pop	r27
    2ad8:	af 91       	pop	r26
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	7f 91       	pop	r23
    2ae0:	6f 91       	pop	r22
    2ae2:	5f 91       	pop	r21
    2ae4:	4f 91       	pop	r20
    2ae6:	3f 91       	pop	r19
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2af4:	1f 92       	push	r1
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	0f 92       	push	r0
    2afc:	11 24       	eor	r1, r1
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2b0a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <timer0_millis>
    2b0e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <timer0_millis+0x1>
    2b12:	a0 91 60 03 	lds	r26, 0x0360	; 0x800360 <timer0_millis+0x2>
    2b16:	b0 91 61 03 	lds	r27, 0x0361	; 0x800361 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2b1a:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2b1e:	23 e0       	ldi	r18, 0x03	; 3
    2b20:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2b22:	2d 37       	cpi	r18, 0x7D	; 125
    2b24:	20 f4       	brcc	.+8      	; 0x2b2e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	a1 1d       	adc	r26, r1
    2b2a:	b1 1d       	adc	r27, r1
    2b2c:	05 c0       	rjmp	.+10     	; 0x2b38 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2b2e:	26 e8       	ldi	r18, 0x86	; 134
    2b30:	23 0f       	add	r18, r19
		m += 1;
    2b32:	02 96       	adiw	r24, 0x02	; 2
    2b34:	a1 1d       	adc	r26, r1
    2b36:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2b38:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <timer0_fract>
	timer0_millis = m;
    2b3c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <timer0_millis>
    2b40:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <timer0_millis+0x1>
    2b44:	a0 93 60 03 	sts	0x0360, r26	; 0x800360 <timer0_millis+0x2>
    2b48:	b0 93 61 03 	sts	0x0361, r27	; 0x800361 <timer0_millis+0x3>
	timer0_overflow_count++;
    2b4c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <timer0_overflow_count>
    2b50:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <timer0_overflow_count+0x1>
    2b54:	a0 91 64 03 	lds	r26, 0x0364	; 0x800364 <timer0_overflow_count+0x2>
    2b58:	b0 91 65 03 	lds	r27, 0x0365	; 0x800365 <timer0_overflow_count+0x3>
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	a1 1d       	adc	r26, r1
    2b60:	b1 1d       	adc	r27, r1
    2b62:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <timer0_overflow_count>
    2b66:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <timer0_overflow_count+0x1>
    2b6a:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <timer0_overflow_count+0x2>
    2b6e:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <timer0_overflow_count+0x3>
}
    2b72:	bf 91       	pop	r27
    2b74:	af 91       	pop	r26
    2b76:	9f 91       	pop	r25
    2b78:	8f 91       	pop	r24
    2b7a:	3f 91       	pop	r19
    2b7c:	2f 91       	pop	r18
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	1f 90       	pop	r1
    2b86:	18 95       	reti

00002b88 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2b88:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2b8a:	f8 94       	cli
	m = timer0_millis;
    2b8c:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <timer0_millis>
    2b90:	70 91 5f 03 	lds	r23, 0x035F	; 0x80035f <timer0_millis+0x1>
    2b94:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <timer0_millis+0x2>
    2b98:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <timer0_millis+0x3>
	SREG = oldSREG;
    2b9c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2b9e:	08 95       	ret

00002ba0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2ba0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2ba2:	f8 94       	cli
	m = timer0_overflow_count;
    2ba4:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <timer0_overflow_count>
    2ba8:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <timer0_overflow_count+0x1>
    2bac:	a0 91 64 03 	lds	r26, 0x0364	; 0x800364 <timer0_overflow_count+0x2>
    2bb0:	b0 91 65 03 	lds	r27, 0x0365	; 0x800365 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2bb4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2bb6:	a8 9b       	sbis	0x15, 0	; 21
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <micros+0x24>
    2bba:	2f 3f       	cpi	r18, 0xFF	; 255
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <micros+0x24>
		m++;
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2bc4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2bc6:	ba 2f       	mov	r27, r26
    2bc8:	a9 2f       	mov	r26, r25
    2bca:	98 2f       	mov	r25, r24
    2bcc:	88 27       	eor	r24, r24
    2bce:	82 0f       	add	r24, r18
    2bd0:	91 1d       	adc	r25, r1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	b1 1d       	adc	r27, r1
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	42 e0       	ldi	r20, 0x02	; 2
    2bdc:	66 0f       	add	r22, r22
    2bde:	77 1f       	adc	r23, r23
    2be0:	88 1f       	adc	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	4a 95       	dec	r20
    2be6:	d1 f7       	brne	.-12     	; 0x2bdc <micros+0x3c>
}
    2be8:	08 95       	ret

00002bea <delay>:

void delay(unsigned long ms)
{
    2bea:	8f 92       	push	r8
    2bec:	9f 92       	push	r9
    2bee:	af 92       	push	r10
    2bf0:	bf 92       	push	r11
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	6b 01       	movw	r12, r22
    2bfc:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2bfe:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <micros>
    2c02:	4b 01       	movw	r8, r22
    2c04:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2c06:	c1 14       	cp	r12, r1
    2c08:	d1 04       	cpc	r13, r1
    2c0a:	e1 04       	cpc	r14, r1
    2c0c:	f1 04       	cpc	r15, r1
    2c0e:	01 f1       	breq	.+64     	; 0x2c50 <delay+0x66>
		yield();
    2c10:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2c14:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <micros>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	88 19       	sub	r24, r8
    2c1e:	99 09       	sbc	r25, r9
    2c20:	aa 09       	sbc	r26, r10
    2c22:	bb 09       	sbc	r27, r11
    2c24:	88 3e       	cpi	r24, 0xE8	; 232
    2c26:	93 40       	sbci	r25, 0x03	; 3
    2c28:	a1 05       	cpc	r26, r1
    2c2a:	b1 05       	cpc	r27, r1
    2c2c:	60 f3       	brcs	.-40     	; 0x2c06 <delay+0x1c>
			ms--;
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	c2 1a       	sub	r12, r18
    2c32:	d1 08       	sbc	r13, r1
    2c34:	e1 08       	sbc	r14, r1
    2c36:	f1 08       	sbc	r15, r1
			start += 1000;
    2c38:	88 ee       	ldi	r24, 0xE8	; 232
    2c3a:	88 0e       	add	r8, r24
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	98 1e       	adc	r9, r24
    2c40:	a1 1c       	adc	r10, r1
    2c42:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2c44:	c1 14       	cp	r12, r1
    2c46:	d1 04       	cpc	r13, r1
    2c48:	e1 04       	cpc	r14, r1
    2c4a:	f1 04       	cpc	r15, r1
    2c4c:	19 f7       	brne	.-58     	; 0x2c14 <delay+0x2a>
    2c4e:	db cf       	rjmp	.-74     	; 0x2c06 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
    2c5a:	af 90       	pop	r10
    2c5c:	9f 90       	pop	r9
    2c5e:	8f 90       	pop	r8
    2c60:	08 95       	ret

00002c62 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	91 05       	cpc	r25, r1
    2c66:	38 f0       	brcs	.+14     	; 0x2c76 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2c70:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <delayMicroseconds+0x10>
    2c76:	08 95       	ret

00002c78 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c78:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c7a:	84 b5       	in	r24, 0x24	; 36
    2c7c:	82 60       	ori	r24, 0x02	; 2
    2c7e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c80:	84 b5       	in	r24, 0x24	; 36
    2c82:	81 60       	ori	r24, 0x01	; 1
    2c84:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c86:	85 b5       	in	r24, 0x25	; 37
    2c88:	82 60       	ori	r24, 0x02	; 2
    2c8a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2c8c:	85 b5       	in	r24, 0x25	; 37
    2c8e:	81 60       	ori	r24, 0x01	; 1
    2c90:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2c92:	ee e6       	ldi	r30, 0x6E	; 110
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	81 60       	ori	r24, 0x01	; 1
    2c9a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2c9c:	e1 e8       	ldi	r30, 0x81	; 129
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2ca2:	80 81       	ld	r24, Z
    2ca4:	82 60       	ori	r24, 0x02	; 2
    2ca6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2ca8:	80 81       	ld	r24, Z
    2caa:	81 60       	ori	r24, 0x01	; 1
    2cac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2cae:	e0 e8       	ldi	r30, 0x80	; 128
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2cb8:	e1 eb       	ldi	r30, 0xB1	; 177
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	84 60       	ori	r24, 0x04	; 4
    2cc0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2cc2:	e0 eb       	ldi	r30, 0xB0	; 176
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	81 60       	ori	r24, 0x01	; 1
    2cca:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ccc:	ea e7       	ldi	r30, 0x7A	; 122
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	84 60       	ori	r24, 0x04	; 4
    2cd4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2cd6:	80 81       	ld	r24, Z
    2cd8:	82 60       	ori	r24, 0x02	; 2
    2cda:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2cdc:	80 81       	ld	r24, Z
    2cde:	81 60       	ori	r24, 0x01	; 1
    2ce0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 68       	ori	r24, 0x80	; 128
    2ce6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2ce8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2cec:	08 95       	ret

00002cee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2cee:	83 30       	cpi	r24, 0x03	; 3
    2cf0:	81 f0       	breq	.+32     	; 0x2d12 <turnOffPWM+0x24>
    2cf2:	28 f4       	brcc	.+10     	; 0x2cfe <turnOffPWM+0x10>
    2cf4:	81 30       	cpi	r24, 0x01	; 1
    2cf6:	99 f0       	breq	.+38     	; 0x2d1e <turnOffPWM+0x30>
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	a1 f0       	breq	.+40     	; 0x2d24 <turnOffPWM+0x36>
    2cfc:	08 95       	ret
    2cfe:	87 30       	cpi	r24, 0x07	; 7
    2d00:	a9 f0       	breq	.+42     	; 0x2d2c <turnOffPWM+0x3e>
    2d02:	88 30       	cpi	r24, 0x08	; 8
    2d04:	b9 f0       	breq	.+46     	; 0x2d34 <turnOffPWM+0x46>
    2d06:	84 30       	cpi	r24, 0x04	; 4
    2d08:	d1 f4       	brne	.+52     	; 0x2d3e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d0e:	8f 7d       	andi	r24, 0xDF	; 223
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d12:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d16:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d18:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d1c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d1e:	84 b5       	in	r24, 0x24	; 36
    2d20:	8f 77       	andi	r24, 0x7F	; 127
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d24:	84 b5       	in	r24, 0x24	; 36
    2d26:	8f 7d       	andi	r24, 0xDF	; 223
    2d28:	84 bd       	out	0x24, r24	; 36
    2d2a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d30:	8f 77       	andi	r24, 0x7F	; 127
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d34:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d38:	8f 7d       	andi	r24, 0xDF	; 223
    2d3a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d3e:	08 95       	ret

00002d40 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	fc 01       	movw	r30, r24
    2d48:	ed 5c       	subi	r30, 0xCD	; 205
    2d4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e9 5b       	subi	r30, 0xB9	; 185
    2d52:	fd 4f       	sbci	r31, 0xFD	; 253
    2d54:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2d56:	88 23       	and	r24, r24
    2d58:	61 f1       	breq	.+88     	; 0x2db2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	fc 01       	movw	r30, r24
    2d62:	e1 59       	subi	r30, 0x91	; 145
    2d64:	fd 4f       	sbci	r31, 0xFD	; 253
    2d66:	c5 91       	lpm	r28, Z+
    2d68:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	eb 59       	subi	r30, 0x9B	; 155
    2d6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d70:	a5 91       	lpm	r26, Z+
    2d72:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2d74:	61 11       	cpse	r22, r1
    2d76:	09 c0       	rjmp	.+18     	; 0x2d8a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2d78:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d7a:	f8 94       	cli
		*reg &= ~bit;
    2d7c:	88 81       	ld	r24, Y
    2d7e:	20 95       	com	r18
    2d80:	82 23       	and	r24, r18
    2d82:	88 83       	st	Y, r24
		*out &= ~bit;
    2d84:	ec 91       	ld	r30, X
    2d86:	2e 23       	and	r18, r30
    2d88:	0b c0       	rjmp	.+22     	; 0x2da0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2d8a:	62 30       	cpi	r22, 0x02	; 2
    2d8c:	61 f4       	brne	.+24     	; 0x2da6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2d8e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d90:	f8 94       	cli
		*reg &= ~bit;
    2d92:	38 81       	ld	r19, Y
    2d94:	82 2f       	mov	r24, r18
    2d96:	80 95       	com	r24
    2d98:	83 23       	and	r24, r19
    2d9a:	88 83       	st	Y, r24
		*out |= bit;
    2d9c:	ec 91       	ld	r30, X
    2d9e:	2e 2b       	or	r18, r30
    2da0:	2c 93       	st	X, r18
		SREG = oldSREG;
    2da2:	9f bf       	out	0x3f, r25	; 63
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2da6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2da8:	f8 94       	cli
		*reg |= bit;
    2daa:	e8 81       	ld	r30, Y
    2dac:	2e 2b       	or	r18, r30
    2dae:	28 83       	st	Y, r18
		SREG = oldSREG;
    2db0:	8f bf       	out	0x3f, r24	; 63
	}
}
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	08 95       	ret

00002db8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	f9 01       	movw	r30, r18
    2dc4:	e1 5e       	subi	r30, 0xE1	; 225
    2dc6:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2dca:	f9 01       	movw	r30, r18
    2dcc:	ed 5c       	subi	r30, 0xCD	; 205
    2dce:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2dd2:	f9 01       	movw	r30, r18
    2dd4:	e9 5b       	subi	r30, 0xB9	; 185
    2dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2dda:	cc 23       	and	r28, r28
    2ddc:	c9 f0       	breq	.+50     	; 0x2e10 <digitalWrite+0x58>
    2dde:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2de0:	81 11       	cpse	r24, r1
    2de2:	0e 94 77 16 	call	0x2cee	; 0x2cee <turnOffPWM>

	out = portOutputRegister(port);
    2de6:	ec 2f       	mov	r30, r28
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	ee 0f       	add	r30, r30
    2dec:	ff 1f       	adc	r31, r31
    2dee:	eb 59       	subi	r30, 0x9B	; 155
    2df0:	fd 4f       	sbci	r31, 0xFD	; 253
    2df2:	a5 91       	lpm	r26, Z+
    2df4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2df6:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2df8:	f8 94       	cli

	if (val == LOW) {
    2dfa:	11 11       	cpse	r17, r1
    2dfc:	05 c0       	rjmp	.+10     	; 0x2e08 <digitalWrite+0x50>
		*out &= ~bit;
    2dfe:	9c 91       	ld	r25, X
    2e00:	ed 2f       	mov	r30, r29
    2e02:	e0 95       	com	r30
    2e04:	e9 23       	and	r30, r25
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <digitalWrite+0x54>
	} else {
		*out |= bit;
    2e08:	ec 91       	ld	r30, X
    2e0a:	ed 2b       	or	r30, r29
    2e0c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2e0e:	8f bf       	out	0x3f, r24	; 63
}
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	08 95       	ret

00002e18 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	f9 01       	movw	r30, r18
    2e22:	e1 5e       	subi	r30, 0xE1	; 225
    2e24:	fd 4f       	sbci	r31, 0xFD	; 253
    2e26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e28:	f9 01       	movw	r30, r18
    2e2a:	ed 5c       	subi	r30, 0xCD	; 205
    2e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e2e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2e30:	f9 01       	movw	r30, r18
    2e32:	e9 5b       	subi	r30, 0xB9	; 185
    2e34:	fd 4f       	sbci	r31, 0xFD	; 253
    2e36:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2e38:	cc 23       	and	r28, r28
    2e3a:	91 f0       	breq	.+36     	; 0x2e60 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	0e 94 77 16 	call	0x2cee	; 0x2cee <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2e42:	ec 2f       	mov	r30, r28
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	ee 0f       	add	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	e5 5a       	subi	r30, 0xA5	; 165
    2e4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4e:	a5 91       	lpm	r26, Z+
    2e50:	b4 91       	lpm	r27, Z
    2e52:	ec 91       	ld	r30, X
    2e54:	ed 23       	and	r30, r29
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	21 f4       	brne	.+8      	; 0x2e64 <digitalRead+0x4c>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <_ZN6StringD1Ev>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <free>

00002e74 <_ZN6String10invalidateEv>:
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
    2e7a:	88 81       	ld	r24, Y
    2e7c:	99 81       	ldd	r25, Y+1	; 0x01
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	11 f0       	breq	.+4      	; 0x2e86 <_ZN6String10invalidateEv+0x12>
    2e82:	0e 94 1d 1b 	call	0x363a	; 0x363a <free>
    2e86:	19 82       	std	Y+1, r1	; 0x01
    2e88:	18 82       	st	Y, r1
    2e8a:	1d 82       	std	Y+5, r1	; 0x05
    2e8c:	1c 82       	std	Y+4, r1	; 0x04
    2e8e:	1b 82       	std	Y+3, r1	; 0x03
    2e90:	1a 82       	std	Y+2, r1	; 0x02
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	08 95       	ret

00002e98 <_ZN6String12changeBufferEj>:
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	ec 01       	movw	r28, r24
    2ea2:	8b 01       	movw	r16, r22
    2ea4:	6f 5f       	subi	r22, 0xFF	; 255
    2ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea8:	88 81       	ld	r24, Y
    2eaa:	99 81       	ldd	r25, Y+1	; 0x01
    2eac:	0e 94 b5 1b 	call	0x376a	; 0x376a <realloc>
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	31 f0       	breq	.+12     	; 0x2ec0 <_ZN6String12changeBufferEj+0x28>
    2eb4:	99 83       	std	Y+1, r25	; 0x01
    2eb6:	88 83       	st	Y, r24
    2eb8:	1b 83       	std	Y+3, r17	; 0x03
    2eba:	0a 83       	std	Y+2, r16	; 0x02
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <_ZN6String12changeBufferEj+0x2a>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <_ZN6String7reserveEj>:
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	ec 01       	movw	r28, r24
    2ed2:	88 81       	ld	r24, Y
    2ed4:	99 81       	ldd	r25, Y+1	; 0x01
    2ed6:	89 2b       	or	r24, r25
    2ed8:	29 f0       	breq	.+10     	; 0x2ee4 <_ZN6String7reserveEj+0x18>
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	86 17       	cp	r24, r22
    2ee0:	97 07       	cpc	r25, r23
    2ee2:	60 f4       	brcc	.+24     	; 0x2efc <_ZN6String7reserveEj+0x30>
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN6String12changeBufferEj>
    2eea:	88 23       	and	r24, r24
    2eec:	41 f0       	breq	.+16     	; 0x2efe <_ZN6String7reserveEj+0x32>
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	89 2b       	or	r24, r25
    2ef4:	19 f4       	brne	.+6      	; 0x2efc <_ZN6String7reserveEj+0x30>
    2ef6:	e8 81       	ld	r30, Y
    2ef8:	f9 81       	ldd	r31, Y+1	; 0x01
    2efa:	10 82       	st	Z, r1
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <_ZN6String4copyEPKcj>:
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	ec 01       	movw	r28, r24
    2f12:	7b 01       	movw	r14, r22
    2f14:	8a 01       	movw	r16, r20
    2f16:	ba 01       	movw	r22, r20
    2f18:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN6String7reserveEj>
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <_ZN6String4copyEPKcj+0x24>
    2f20:	ce 01       	movw	r24, r28
    2f22:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
    2f26:	07 c0       	rjmp	.+14     	; 0x2f36 <_ZN6String4copyEPKcj+0x32>
    2f28:	1d 83       	std	Y+5, r17	; 0x05
    2f2a:	0c 83       	std	Y+4, r16	; 0x04
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	88 81       	ld	r24, Y
    2f30:	99 81       	ldd	r25, Y+1	; 0x01
    2f32:	0e 94 c5 1c 	call	0x398a	; 0x398a <strcpy>
    2f36:	ce 01       	movw	r24, r28
    2f38:	df 91       	pop	r29
    2f3a:	cf 91       	pop	r28
    2f3c:	1f 91       	pop	r17
    2f3e:	0f 91       	pop	r16
    2f40:	ff 90       	pop	r15
    2f42:	ef 90       	pop	r14
    2f44:	08 95       	ret

00002f46 <_ZN6StringC1EPKc>:
    2f46:	fc 01       	movw	r30, r24
    2f48:	11 82       	std	Z+1, r1	; 0x01
    2f4a:	10 82       	st	Z, r1
    2f4c:	13 82       	std	Z+3, r1	; 0x03
    2f4e:	12 82       	std	Z+2, r1	; 0x02
    2f50:	15 82       	std	Z+5, r1	; 0x05
    2f52:	14 82       	std	Z+4, r1	; 0x04
    2f54:	61 15       	cp	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	51 f0       	breq	.+20     	; 0x2f6e <_ZN6StringC1EPKc+0x28>
    2f5a:	fb 01       	movw	r30, r22
    2f5c:	01 90       	ld	r0, Z+
    2f5e:	00 20       	and	r0, r0
    2f60:	e9 f7       	brne	.-6      	; 0x2f5c <_ZN6StringC1EPKc+0x16>
    2f62:	31 97       	sbiw	r30, 0x01	; 1
    2f64:	af 01       	movw	r20, r30
    2f66:	46 1b       	sub	r20, r22
    2f68:	57 0b       	sbc	r21, r23
    2f6a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
    2f6e:	08 95       	ret

00002f70 <_ZN6StringaSERKS_>:
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	ec 01       	movw	r28, r24
    2f76:	fb 01       	movw	r30, r22
    2f78:	86 17       	cp	r24, r22
    2f7a:	97 07       	cpc	r25, r23
    2f7c:	61 f0       	breq	.+24     	; 0x2f96 <_ZN6StringaSERKS_+0x26>
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	61 15       	cp	r22, r1
    2f84:	71 05       	cpc	r23, r1
    2f86:	29 f0       	breq	.+10     	; 0x2f92 <_ZN6StringaSERKS_+0x22>
    2f88:	44 81       	ldd	r20, Z+4	; 0x04
    2f8a:	55 81       	ldd	r21, Z+5	; 0x05
    2f8c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <_ZN6StringaSERKS_+0x26>
    2f92:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
    2f96:	ce 01       	movw	r24, r28
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	08 95       	ret

00002f9e <_ZN6StringC1ERKS_>:
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	11 82       	std	Z+1, r1	; 0x01
    2fa2:	10 82       	st	Z, r1
    2fa4:	13 82       	std	Z+3, r1	; 0x03
    2fa6:	12 82       	std	Z+2, r1	; 0x02
    2fa8:	15 82       	std	Z+5, r1	; 0x05
    2faa:	14 82       	std	Z+4, r1	; 0x04
    2fac:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <_ZN6StringaSERKS_>

00002fb0 <_ZN6StringaSEPKc>:
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	ec 01       	movw	r28, r24
    2fb6:	61 15       	cp	r22, r1
    2fb8:	71 05       	cpc	r23, r1
    2fba:	59 f0       	breq	.+22     	; 0x2fd2 <_ZN6StringaSEPKc+0x22>
    2fbc:	fb 01       	movw	r30, r22
    2fbe:	01 90       	ld	r0, Z+
    2fc0:	00 20       	and	r0, r0
    2fc2:	e9 f7       	brne	.-6      	; 0x2fbe <_ZN6StringaSEPKc+0xe>
    2fc4:	31 97       	sbiw	r30, 0x01	; 1
    2fc6:	af 01       	movw	r20, r30
    2fc8:	46 1b       	sub	r20, r22
    2fca:	57 0b       	sbc	r21, r23
    2fcc:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <_ZN6StringaSEPKc+0x26>
    2fd2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	08 95       	ret

00002fde <_ZN6StringC1Ehh>:
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	29 97       	sbiw	r28, 0x09	; 9
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	8c 01       	movw	r16, r24
    2ff8:	86 2f       	mov	r24, r22
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	11 82       	std	Z+1, r1	; 0x01
    2ffe:	10 82       	st	Z, r1
    3000:	13 82       	std	Z+3, r1	; 0x03
    3002:	12 82       	std	Z+2, r1	; 0x02
    3004:	15 82       	std	Z+5, r1	; 0x05
    3006:	14 82       	std	Z+4, r1	; 0x04
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	be 01       	movw	r22, r28
    300c:	6f 5f       	subi	r22, 0xFF	; 255
    300e:	7f 4f       	sbci	r23, 0xFF	; 255
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <utoa>
    3016:	be 01       	movw	r22, r28
    3018:	6f 5f       	subi	r22, 0xFF	; 255
    301a:	7f 4f       	sbci	r23, 0xFF	; 255
    301c:	c8 01       	movw	r24, r16
    301e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    3022:	29 96       	adiw	r28, 0x09	; 9
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	08 95       	ret

00003038 <_ZN6StringC1Eih>:
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	62 97       	sbiw	r28, 0x12	; 18
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	8c 01       	movw	r16, r24
    3052:	cb 01       	movw	r24, r22
    3054:	f8 01       	movw	r30, r16
    3056:	11 82       	std	Z+1, r1	; 0x01
    3058:	10 82       	st	Z, r1
    305a:	13 82       	std	Z+3, r1	; 0x03
    305c:	12 82       	std	Z+2, r1	; 0x02
    305e:	15 82       	std	Z+5, r1	; 0x05
    3060:	14 82       	std	Z+4, r1	; 0x04
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	be 01       	movw	r22, r28
    3066:	6f 5f       	subi	r22, 0xFF	; 255
    3068:	7f 4f       	sbci	r23, 0xFF	; 255
    306a:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <itoa>
    306e:	be 01       	movw	r22, r28
    3070:	6f 5f       	subi	r22, 0xFF	; 255
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	c8 01       	movw	r24, r16
    3076:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    307a:	62 96       	adiw	r28, 0x12	; 18
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	08 95       	ret

00003090 <_ZN6StringC1Emh>:
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	a1 97       	sbiw	r28, 0x21	; 33
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	8c 01       	movw	r16, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	ba 01       	movw	r22, r20
    30ae:	f8 01       	movw	r30, r16
    30b0:	11 82       	std	Z+1, r1	; 0x01
    30b2:	10 82       	st	Z, r1
    30b4:	13 82       	std	Z+3, r1	; 0x03
    30b6:	12 82       	std	Z+2, r1	; 0x02
    30b8:	15 82       	std	Z+5, r1	; 0x05
    30ba:	14 82       	std	Z+4, r1	; 0x04
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	ae 01       	movw	r20, r28
    30c0:	4f 5f       	subi	r20, 0xFF	; 255
    30c2:	5f 4f       	sbci	r21, 0xFF	; 255
    30c4:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <ultoa>
    30c8:	be 01       	movw	r22, r28
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	c8 01       	movw	r24, r16
    30d0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    30d4:	a1 96       	adiw	r28, 0x21	; 33
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	08 95       	ret

000030ea <_ZN6StringC1Efh>:
    30ea:	ef 92       	push	r14
    30ec:	ff 92       	push	r15
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	a1 97       	sbiw	r28, 0x21	; 33
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	7c 01       	movw	r14, r24
    3108:	cb 01       	movw	r24, r22
    310a:	ba 01       	movw	r22, r20
    310c:	f7 01       	movw	r30, r14
    310e:	11 82       	std	Z+1, r1	; 0x01
    3110:	10 82       	st	Z, r1
    3112:	13 82       	std	Z+3, r1	; 0x03
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	15 82       	std	Z+5, r1	; 0x05
    3118:	14 82       	std	Z+4, r1	; 0x04
    311a:	42 e0       	ldi	r20, 0x02	; 2
    311c:	42 0f       	add	r20, r18
    311e:	8e 01       	movw	r16, r28
    3120:	0f 5f       	subi	r16, 0xFF	; 255
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <dtostrf>
    3128:	bc 01       	movw	r22, r24
    312a:	c7 01       	movw	r24, r14
    312c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    3130:	a1 96       	adiw	r28, 0x21	; 33
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	08 95       	ret

0000314a <_ZN6StringC1Edh>:
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	a1 97       	sbiw	r28, 0x21	; 33
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	7c 01       	movw	r14, r24
    3168:	cb 01       	movw	r24, r22
    316a:	ba 01       	movw	r22, r20
    316c:	f7 01       	movw	r30, r14
    316e:	11 82       	std	Z+1, r1	; 0x01
    3170:	10 82       	st	Z, r1
    3172:	13 82       	std	Z+3, r1	; 0x03
    3174:	12 82       	std	Z+2, r1	; 0x02
    3176:	15 82       	std	Z+5, r1	; 0x05
    3178:	14 82       	std	Z+4, r1	; 0x04
    317a:	42 e0       	ldi	r20, 0x02	; 2
    317c:	42 0f       	add	r20, r18
    317e:	8e 01       	movw	r16, r28
    3180:	0f 5f       	subi	r16, 0xFF	; 255
    3182:	1f 4f       	sbci	r17, 0xFF	; 255
    3184:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <dtostrf>
    3188:	bc 01       	movw	r22, r24
    318a:	c7 01       	movw	r24, r14
    318c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    3190:	a1 96       	adiw	r28, 0x21	; 33
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	1f 91       	pop	r17
    31a2:	0f 91       	pop	r16
    31a4:	ff 90       	pop	r15
    31a6:	ef 90       	pop	r14
    31a8:	08 95       	ret

000031aa <_ZN6String6concatEPKcj>:
    31aa:	ef 92       	push	r14
    31ac:	ff 92       	push	r15
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	fc 01       	movw	r30, r24
    31b8:	24 81       	ldd	r18, Z+4	; 0x04
    31ba:	35 81       	ldd	r19, Z+5	; 0x05
    31bc:	61 15       	cp	r22, r1
    31be:	71 05       	cpc	r23, r1
    31c0:	11 f4       	brne	.+4      	; 0x31c6 <_ZN6String6concatEPKcj+0x1c>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	19 c0       	rjmp	.+50     	; 0x31f8 <_ZN6String6concatEPKcj+0x4e>
    31c6:	41 15       	cp	r20, r1
    31c8:	51 05       	cpc	r21, r1
    31ca:	a9 f0       	breq	.+42     	; 0x31f6 <_ZN6String6concatEPKcj+0x4c>
    31cc:	7b 01       	movw	r14, r22
    31ce:	ec 01       	movw	r28, r24
    31d0:	8a 01       	movw	r16, r20
    31d2:	02 0f       	add	r16, r18
    31d4:	13 1f       	adc	r17, r19
    31d6:	b8 01       	movw	r22, r16
    31d8:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN6String7reserveEj>
    31dc:	88 23       	and	r24, r24
    31de:	89 f3       	breq	.-30     	; 0x31c2 <_ZN6String6concatEPKcj+0x18>
    31e0:	28 81       	ld	r18, Y
    31e2:	39 81       	ldd	r19, Y+1	; 0x01
    31e4:	8c 81       	ldd	r24, Y+4	; 0x04
    31e6:	9d 81       	ldd	r25, Y+5	; 0x05
    31e8:	b7 01       	movw	r22, r14
    31ea:	82 0f       	add	r24, r18
    31ec:	93 1f       	adc	r25, r19
    31ee:	0e 94 c5 1c 	call	0x398a	; 0x398a <strcpy>
    31f2:	1d 83       	std	Y+5, r17	; 0x05
    31f4:	0c 83       	std	Y+4, r16	; 0x04
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	08 95       	ret

00003206 <_ZN6String6concatEc>:
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	00 d0       	rcall	.+0      	; 0x320c <_ZN6String6concatEc+0x6>
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	69 83       	std	Y+1, r22	; 0x01
    3212:	1a 82       	std	Y+2, r1	; 0x02
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	be 01       	movw	r22, r28
    321a:	6f 5f       	subi	r22, 0xFF	; 255
    321c:	7f 4f       	sbci	r23, 0xFF	; 255
    321e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN6String6concatEPKcj>
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <_ZplRK15StringSumHelperRK6String>:
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	ec 01       	movw	r28, r24
    3232:	fb 01       	movw	r30, r22
    3234:	44 81       	ldd	r20, Z+4	; 0x04
    3236:	55 81       	ldd	r21, Z+5	; 0x05
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN6String6concatEPKcj>
    3240:	81 11       	cpse	r24, r1
    3242:	03 c0       	rjmp	.+6      	; 0x324a <_ZplRK15StringSumHelperRK6String+0x1e>
    3244:	ce 01       	movw	r24, r28
    3246:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
    324a:	ce 01       	movw	r24, r28
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	08 95       	ret

00003252 <_ZplRK15StringSumHelperPKc>:
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	ec 01       	movw	r28, r24
    3258:	61 15       	cp	r22, r1
    325a:	71 05       	cpc	r23, r1
    325c:	61 f0       	breq	.+24     	; 0x3276 <_ZplRK15StringSumHelperPKc+0x24>
    325e:	fb 01       	movw	r30, r22
    3260:	01 90       	ld	r0, Z+
    3262:	00 20       	and	r0, r0
    3264:	e9 f7       	brne	.-6      	; 0x3260 <_ZplRK15StringSumHelperPKc+0xe>
    3266:	31 97       	sbiw	r30, 0x01	; 1
    3268:	af 01       	movw	r20, r30
    326a:	46 1b       	sub	r20, r22
    326c:	57 0b       	sbc	r21, r23
    326e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN6String6concatEPKcj>
    3272:	81 11       	cpse	r24, r1
    3274:	03 c0       	rjmp	.+6      	; 0x327c <_ZplRK15StringSumHelperPKc+0x2a>
    3276:	ce 01       	movw	r24, r28
    3278:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
    327c:	ce 01       	movw	r24, r28
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	08 95       	ret

00003284 <_ZNK6String6equalsEPKc>:
    3284:	fc 01       	movw	r30, r24
    3286:	24 81       	ldd	r18, Z+4	; 0x04
    3288:	35 81       	ldd	r19, Z+5	; 0x05
    328a:	23 2b       	or	r18, r19
    328c:	31 f4       	brne	.+12     	; 0x329a <_ZNK6String6equalsEPKc+0x16>
    328e:	21 e0       	ldi	r18, 0x01	; 1
    3290:	61 15       	cp	r22, r1
    3292:	71 05       	cpc	r23, r1
    3294:	a1 f0       	breq	.+40     	; 0x32be <_ZNK6String6equalsEPKc+0x3a>
    3296:	fb 01       	movw	r30, r22
    3298:	08 c0       	rjmp	.+16     	; 0x32aa <_ZNK6String6equalsEPKc+0x26>
    329a:	fc 01       	movw	r30, r24
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	61 15       	cp	r22, r1
    32a2:	71 05       	cpc	r23, r1
    32a4:	31 f4       	brne	.+12     	; 0x32b2 <_ZNK6String6equalsEPKc+0x2e>
    32a6:	21 e0       	ldi	r18, 0x01	; 1
    32a8:	fc 01       	movw	r30, r24
    32aa:	80 81       	ld	r24, Z
    32ac:	88 23       	and	r24, r24
    32ae:	39 f0       	breq	.+14     	; 0x32be <_ZNK6String6equalsEPKc+0x3a>
    32b0:	05 c0       	rjmp	.+10     	; 0x32bc <_ZNK6String6equalsEPKc+0x38>
    32b2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcmp>
    32b6:	21 e0       	ldi	r18, 0x01	; 1
    32b8:	89 2b       	or	r24, r25
    32ba:	09 f0       	breq	.+2      	; 0x32be <_ZNK6String6equalsEPKc+0x3a>
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	82 2f       	mov	r24, r18
    32c0:	08 95       	ret

000032c2 <_ZNK6String10startsWithERKS_j>:
    32c2:	db 01       	movw	r26, r22
    32c4:	14 96       	adiw	r26, 0x04	; 4
    32c6:	ed 91       	ld	r30, X+
    32c8:	fc 91       	ld	r31, X
    32ca:	15 97       	sbiw	r26, 0x05	; 5
    32cc:	dc 01       	movw	r26, r24
    32ce:	14 96       	adiw	r26, 0x04	; 4
    32d0:	2d 91       	ld	r18, X+
    32d2:	3c 91       	ld	r19, X
    32d4:	15 97       	sbiw	r26, 0x05	; 5
    32d6:	2e 1b       	sub	r18, r30
    32d8:	3f 0b       	sbc	r19, r31
    32da:	24 17       	cp	r18, r20
    32dc:	35 07       	cpc	r19, r21
    32de:	a0 f0       	brcs	.+40     	; 0x3308 <_ZNK6String10startsWithERKS_j+0x46>
    32e0:	2d 91       	ld	r18, X+
    32e2:	3c 91       	ld	r19, X
    32e4:	21 15       	cp	r18, r1
    32e6:	31 05       	cpc	r19, r1
    32e8:	79 f0       	breq	.+30     	; 0x3308 <_ZNK6String10startsWithERKS_j+0x46>
    32ea:	db 01       	movw	r26, r22
    32ec:	6d 91       	ld	r22, X+
    32ee:	7c 91       	ld	r23, X
    32f0:	61 15       	cp	r22, r1
    32f2:	71 05       	cpc	r23, r1
    32f4:	49 f0       	breq	.+18     	; 0x3308 <_ZNK6String10startsWithERKS_j+0x46>
    32f6:	ca 01       	movw	r24, r20
    32f8:	af 01       	movw	r20, r30
    32fa:	82 0f       	add	r24, r18
    32fc:	93 1f       	adc	r25, r19
    32fe:	0e 94 cc 1c 	call	0x3998	; 0x3998 <strncmp>
    3302:	21 e0       	ldi	r18, 0x01	; 1
    3304:	89 2b       	or	r24, r25
    3306:	09 f0       	breq	.+2      	; 0x330a <_ZNK6String10startsWithERKS_j+0x48>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	82 2f       	mov	r24, r18
    330c:	08 95       	ret

0000330e <_ZNK6StringixEj>:
    330e:	fc 01       	movw	r30, r24
    3310:	24 81       	ldd	r18, Z+4	; 0x04
    3312:	35 81       	ldd	r19, Z+5	; 0x05
    3314:	62 17       	cp	r22, r18
    3316:	73 07       	cpc	r23, r19
    3318:	48 f4       	brcc	.+18     	; 0x332c <_ZNK6StringixEj+0x1e>
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	29 f0       	breq	.+10     	; 0x332c <_ZNK6StringixEj+0x1e>
    3322:	fc 01       	movw	r30, r24
    3324:	e6 0f       	add	r30, r22
    3326:	f7 1f       	adc	r31, r23
    3328:	80 81       	ld	r24, Z
    332a:	08 95       	ret
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	08 95       	ret

00003330 <_ZNK6String6charAtEj>:
    3330:	0c 94 87 19 	jmp	0x330e	; 0x330e <_ZNK6StringixEj>

00003334 <_ZNK6String9substringEjj>:
    3334:	bf 92       	push	r11
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	7c 01       	movw	r14, r24
    3348:	6b 01       	movw	r12, r22
    334a:	8a 01       	movw	r16, r20
    334c:	e9 01       	movw	r28, r18
    334e:	24 17       	cp	r18, r20
    3350:	35 07       	cpc	r19, r21
    3352:	20 f4       	brcc	.+8      	; 0x335c <_ZNK6String9substringEjj+0x28>
    3354:	81 2f       	mov	r24, r17
    3356:	89 01       	movw	r16, r18
    3358:	c4 2f       	mov	r28, r20
    335a:	d8 2f       	mov	r29, r24
    335c:	6f ea       	ldi	r22, 0xAF	; 175
    335e:	71 e0       	ldi	r23, 0x01	; 1
    3360:	c7 01       	movw	r24, r14
    3362:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
    3366:	d6 01       	movw	r26, r12
    3368:	14 96       	adiw	r26, 0x04	; 4
    336a:	8d 91       	ld	r24, X+
    336c:	9c 91       	ld	r25, X
    336e:	15 97       	sbiw	r26, 0x05	; 5
    3370:	08 17       	cp	r16, r24
    3372:	19 07       	cpc	r17, r25
    3374:	d0 f4       	brcc	.+52     	; 0x33aa <_ZNK6String9substringEjj+0x76>
    3376:	8c 17       	cp	r24, r28
    3378:	9d 07       	cpc	r25, r29
    337a:	08 f4       	brcc	.+2      	; 0x337e <_ZNK6String9substringEjj+0x4a>
    337c:	ec 01       	movw	r28, r24
    337e:	d6 01       	movw	r26, r12
    3380:	ed 91       	ld	r30, X+
    3382:	fc 91       	ld	r31, X
    3384:	11 97       	sbiw	r26, 0x01	; 1
    3386:	ec 0f       	add	r30, r28
    3388:	fd 1f       	adc	r31, r29
    338a:	b0 80       	ld	r11, Z
    338c:	10 82       	st	Z, r1
    338e:	4d 91       	ld	r20, X+
    3390:	5c 91       	ld	r21, X
    3392:	ba 01       	movw	r22, r20
    3394:	60 0f       	add	r22, r16
    3396:	71 1f       	adc	r23, r17
    3398:	c7 01       	movw	r24, r14
    339a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringaSEPKc>
    339e:	d6 01       	movw	r26, r12
    33a0:	ed 91       	ld	r30, X+
    33a2:	fc 91       	ld	r31, X
    33a4:	ec 0f       	add	r30, r28
    33a6:	fd 1f       	adc	r31, r29
    33a8:	b0 82       	st	Z, r11
    33aa:	c7 01       	movw	r24, r14
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	ff 90       	pop	r15
    33b6:	ef 90       	pop	r14
    33b8:	df 90       	pop	r13
    33ba:	cf 90       	pop	r12
    33bc:	bf 90       	pop	r11
    33be:	08 95       	ret

000033c0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    33c0:	fc 01       	movw	r30, r24
    33c2:	80 81       	ld	r24, Z
    33c4:	91 81       	ldd	r25, Z+1	; 0x01
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	11 f0       	breq	.+4      	; 0x33ce <_ZNK6String5toIntEv+0xe>
    33ca:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <atol>
	return 0;
}
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	cb 01       	movw	r24, r22
    33d4:	08 95       	ret

000033d6 <_ZNK6String8toDoubleEv>:
	return float(toDouble());
}

double String::toDouble(void) const
{
	if (buffer) return atof(buffer);
    33d6:	fc 01       	movw	r30, r24
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	11 f0       	breq	.+4      	; 0x33e4 <_ZNK6String8toDoubleEv+0xe>
    33e0:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <atof>
	return 0;
}
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	cb 01       	movw	r24, r22
    33ea:	08 95       	ret

000033ec <_ZNK6String7toFloatEv>:
	return 0;
}

float String::toFloat(void) const
{
	return float(toDouble());
    33ec:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <_ZNK6String8toDoubleEv>

000033f0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    33f0:	08 95       	ret

000033f2 <__divmodhi4>:
    33f2:	97 fb       	bst	r25, 7
    33f4:	07 2e       	mov	r0, r23
    33f6:	16 f4       	brtc	.+4      	; 0x33fc <__divmodhi4+0xa>
    33f8:	00 94       	com	r0
    33fa:	07 d0       	rcall	.+14     	; 0x340a <__divmodhi4_neg1>
    33fc:	77 fd       	sbrc	r23, 7
    33fe:	09 d0       	rcall	.+18     	; 0x3412 <__divmodhi4_neg2>
    3400:	0e 94 4e 1a 	call	0x349c	; 0x349c <__udivmodhi4>
    3404:	07 fc       	sbrc	r0, 7
    3406:	05 d0       	rcall	.+10     	; 0x3412 <__divmodhi4_neg2>
    3408:	3e f4       	brtc	.+14     	; 0x3418 <__divmodhi4_exit>

0000340a <__divmodhi4_neg1>:
    340a:	90 95       	com	r25
    340c:	81 95       	neg	r24
    340e:	9f 4f       	sbci	r25, 0xFF	; 255
    3410:	08 95       	ret

00003412 <__divmodhi4_neg2>:
    3412:	70 95       	com	r23
    3414:	61 95       	neg	r22
    3416:	7f 4f       	sbci	r23, 0xFF	; 255

00003418 <__divmodhi4_exit>:
    3418:	08 95       	ret

0000341a <__udivmodsi4>:
    341a:	a1 e2       	ldi	r26, 0x21	; 33
    341c:	1a 2e       	mov	r1, r26
    341e:	aa 1b       	sub	r26, r26
    3420:	bb 1b       	sub	r27, r27
    3422:	fd 01       	movw	r30, r26
    3424:	0d c0       	rjmp	.+26     	; 0x3440 <__udivmodsi4_ep>

00003426 <__udivmodsi4_loop>:
    3426:	aa 1f       	adc	r26, r26
    3428:	bb 1f       	adc	r27, r27
    342a:	ee 1f       	adc	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	a2 17       	cp	r26, r18
    3430:	b3 07       	cpc	r27, r19
    3432:	e4 07       	cpc	r30, r20
    3434:	f5 07       	cpc	r31, r21
    3436:	20 f0       	brcs	.+8      	; 0x3440 <__udivmodsi4_ep>
    3438:	a2 1b       	sub	r26, r18
    343a:	b3 0b       	sbc	r27, r19
    343c:	e4 0b       	sbc	r30, r20
    343e:	f5 0b       	sbc	r31, r21

00003440 <__udivmodsi4_ep>:
    3440:	66 1f       	adc	r22, r22
    3442:	77 1f       	adc	r23, r23
    3444:	88 1f       	adc	r24, r24
    3446:	99 1f       	adc	r25, r25
    3448:	1a 94       	dec	r1
    344a:	69 f7       	brne	.-38     	; 0x3426 <__udivmodsi4_loop>
    344c:	60 95       	com	r22
    344e:	70 95       	com	r23
    3450:	80 95       	com	r24
    3452:	90 95       	com	r25
    3454:	9b 01       	movw	r18, r22
    3456:	ac 01       	movw	r20, r24
    3458:	bd 01       	movw	r22, r26
    345a:	cf 01       	movw	r24, r30
    345c:	08 95       	ret

0000345e <__divmodsi4>:
    345e:	05 2e       	mov	r0, r21
    3460:	97 fb       	bst	r25, 7
    3462:	1e f4       	brtc	.+6      	; 0x346a <__divmodsi4+0xc>
    3464:	00 94       	com	r0
    3466:	0e 94 46 1a 	call	0x348c	; 0x348c <__negsi2>
    346a:	57 fd       	sbrc	r21, 7
    346c:	07 d0       	rcall	.+14     	; 0x347c <__divmodsi4_neg2>
    346e:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodsi4>
    3472:	07 fc       	sbrc	r0, 7
    3474:	03 d0       	rcall	.+6      	; 0x347c <__divmodsi4_neg2>
    3476:	4e f4       	brtc	.+18     	; 0x348a <__divmodsi4_exit>
    3478:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__negsi2>

0000347c <__divmodsi4_neg2>:
    347c:	50 95       	com	r21
    347e:	40 95       	com	r20
    3480:	30 95       	com	r19
    3482:	21 95       	neg	r18
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	4f 4f       	sbci	r20, 0xFF	; 255
    3488:	5f 4f       	sbci	r21, 0xFF	; 255

0000348a <__divmodsi4_exit>:
    348a:	08 95       	ret

0000348c <__negsi2>:
    348c:	90 95       	com	r25
    348e:	80 95       	com	r24
    3490:	70 95       	com	r23
    3492:	61 95       	neg	r22
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	8f 4f       	sbci	r24, 0xFF	; 255
    3498:	9f 4f       	sbci	r25, 0xFF	; 255
    349a:	08 95       	ret

0000349c <__udivmodhi4>:
    349c:	aa 1b       	sub	r26, r26
    349e:	bb 1b       	sub	r27, r27
    34a0:	51 e1       	ldi	r21, 0x11	; 17
    34a2:	07 c0       	rjmp	.+14     	; 0x34b2 <__udivmodhi4_ep>

000034a4 <__udivmodhi4_loop>:
    34a4:	aa 1f       	adc	r26, r26
    34a6:	bb 1f       	adc	r27, r27
    34a8:	a6 17       	cp	r26, r22
    34aa:	b7 07       	cpc	r27, r23
    34ac:	10 f0       	brcs	.+4      	; 0x34b2 <__udivmodhi4_ep>
    34ae:	a6 1b       	sub	r26, r22
    34b0:	b7 0b       	sbc	r27, r23

000034b2 <__udivmodhi4_ep>:
    34b2:	88 1f       	adc	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	5a 95       	dec	r21
    34b8:	a9 f7       	brne	.-22     	; 0x34a4 <__udivmodhi4_loop>
    34ba:	80 95       	com	r24
    34bc:	90 95       	com	r25
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	08 95       	ret

000034c4 <__tablejump2__>:
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	05 90       	lpm	r0, Z+
    34ca:	f4 91       	lpm	r31, Z
    34cc:	e0 2d       	mov	r30, r0
    34ce:	09 94       	ijmp

000034d0 <dtostrf>:
    34d0:	ef 92       	push	r14
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	e8 01       	movw	r28, r16
    34dc:	47 fd       	sbrc	r20, 7
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <dtostrf+0x14>
    34e0:	34 e0       	ldi	r19, 0x04	; 4
    34e2:	01 c0       	rjmp	.+2      	; 0x34e6 <dtostrf+0x16>
    34e4:	34 e1       	ldi	r19, 0x14	; 20
    34e6:	e4 2f       	mov	r30, r20
    34e8:	44 0f       	add	r20, r20
    34ea:	ff 0b       	sbc	r31, r31
    34ec:	f7 ff       	sbrs	r31, 7
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <dtostrf+0x26>
    34f0:	f1 95       	neg	r31
    34f2:	e1 95       	neg	r30
    34f4:	f1 09       	sbc	r31, r1
    34f6:	e3 2e       	mov	r14, r19
    34f8:	02 2f       	mov	r16, r18
    34fa:	2e 2f       	mov	r18, r30
    34fc:	ae 01       	movw	r20, r28
    34fe:	0e 94 57 1d 	call	0x3aae	; 0x3aae <dtoa_prf>
    3502:	ce 01       	movw	r24, r28
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ef 90       	pop	r14
    350e:	08 95       	ret

00003510 <malloc>:
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	82 30       	cpi	r24, 0x02	; 2
    3516:	91 05       	cpc	r25, r1
    3518:	10 f4       	brcc	.+4      	; 0x351e <malloc+0xe>
    351a:	82 e0       	ldi	r24, 0x02	; 2
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <__flp>
    3522:	f0 91 69 03 	lds	r31, 0x0369	; 0x800369 <__flp+0x1>
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	c0 e0       	ldi	r28, 0x00	; 0
    352c:	d0 e0       	ldi	r29, 0x00	; 0
    352e:	30 97       	sbiw	r30, 0x00	; 0
    3530:	11 f1       	breq	.+68     	; 0x3576 <malloc+0x66>
    3532:	40 81       	ld	r20, Z
    3534:	51 81       	ldd	r21, Z+1	; 0x01
    3536:	48 17       	cp	r20, r24
    3538:	59 07       	cpc	r21, r25
    353a:	c0 f0       	brcs	.+48     	; 0x356c <malloc+0x5c>
    353c:	48 17       	cp	r20, r24
    353e:	59 07       	cpc	r21, r25
    3540:	61 f4       	brne	.+24     	; 0x355a <malloc+0x4a>
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	20 97       	sbiw	r28, 0x00	; 0
    3548:	19 f0       	breq	.+6      	; 0x3550 <malloc+0x40>
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	8a 83       	std	Y+2, r24	; 0x02
    354e:	2b c0       	rjmp	.+86     	; 0x35a6 <malloc+0x96>
    3550:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <__flp+0x1>
    3554:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <__flp>
    3558:	26 c0       	rjmp	.+76     	; 0x35a6 <malloc+0x96>
    355a:	21 15       	cp	r18, r1
    355c:	31 05       	cpc	r19, r1
    355e:	19 f0       	breq	.+6      	; 0x3566 <malloc+0x56>
    3560:	42 17       	cp	r20, r18
    3562:	53 07       	cpc	r21, r19
    3564:	18 f4       	brcc	.+6      	; 0x356c <malloc+0x5c>
    3566:	9a 01       	movw	r18, r20
    3568:	be 01       	movw	r22, r28
    356a:	df 01       	movw	r26, r30
    356c:	ef 01       	movw	r28, r30
    356e:	02 80       	ldd	r0, Z+2	; 0x02
    3570:	f3 81       	ldd	r31, Z+3	; 0x03
    3572:	e0 2d       	mov	r30, r0
    3574:	dc cf       	rjmp	.-72     	; 0x352e <malloc+0x1e>
    3576:	21 15       	cp	r18, r1
    3578:	31 05       	cpc	r19, r1
    357a:	09 f1       	breq	.+66     	; 0x35be <malloc+0xae>
    357c:	28 1b       	sub	r18, r24
    357e:	39 0b       	sbc	r19, r25
    3580:	24 30       	cpi	r18, 0x04	; 4
    3582:	31 05       	cpc	r19, r1
    3584:	90 f4       	brcc	.+36     	; 0x35aa <malloc+0x9a>
    3586:	12 96       	adiw	r26, 0x02	; 2
    3588:	8d 91       	ld	r24, X+
    358a:	9c 91       	ld	r25, X
    358c:	13 97       	sbiw	r26, 0x03	; 3
    358e:	61 15       	cp	r22, r1
    3590:	71 05       	cpc	r23, r1
    3592:	21 f0       	breq	.+8      	; 0x359c <malloc+0x8c>
    3594:	fb 01       	movw	r30, r22
    3596:	93 83       	std	Z+3, r25	; 0x03
    3598:	82 83       	std	Z+2, r24	; 0x02
    359a:	04 c0       	rjmp	.+8      	; 0x35a4 <malloc+0x94>
    359c:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <__flp+0x1>
    35a0:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <__flp>
    35a4:	fd 01       	movw	r30, r26
    35a6:	32 96       	adiw	r30, 0x02	; 2
    35a8:	44 c0       	rjmp	.+136    	; 0x3632 <malloc+0x122>
    35aa:	fd 01       	movw	r30, r26
    35ac:	e2 0f       	add	r30, r18
    35ae:	f3 1f       	adc	r31, r19
    35b0:	81 93       	st	Z+, r24
    35b2:	91 93       	st	Z+, r25
    35b4:	22 50       	subi	r18, 0x02	; 2
    35b6:	31 09       	sbc	r19, r1
    35b8:	2d 93       	st	X+, r18
    35ba:	3c 93       	st	X, r19
    35bc:	3a c0       	rjmp	.+116    	; 0x3632 <malloc+0x122>
    35be:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    35c2:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    35c6:	23 2b       	or	r18, r19
    35c8:	41 f4       	brne	.+16     	; 0x35da <malloc+0xca>
    35ca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    35ce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    35d2:	30 93 67 03 	sts	0x0367, r19	; 0x800367 <__brkval+0x1>
    35d6:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <__brkval>
    35da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    35de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    35e2:	21 15       	cp	r18, r1
    35e4:	31 05       	cpc	r19, r1
    35e6:	41 f4       	brne	.+16     	; 0x35f8 <malloc+0xe8>
    35e8:	2d b7       	in	r18, 0x3d	; 61
    35ea:	3e b7       	in	r19, 0x3e	; 62
    35ec:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    35f0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    35f4:	24 1b       	sub	r18, r20
    35f6:	35 0b       	sbc	r19, r21
    35f8:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__brkval>
    35fc:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <__brkval+0x1>
    3600:	e2 17       	cp	r30, r18
    3602:	f3 07       	cpc	r31, r19
    3604:	a0 f4       	brcc	.+40     	; 0x362e <malloc+0x11e>
    3606:	2e 1b       	sub	r18, r30
    3608:	3f 0b       	sbc	r19, r31
    360a:	28 17       	cp	r18, r24
    360c:	39 07       	cpc	r19, r25
    360e:	78 f0       	brcs	.+30     	; 0x362e <malloc+0x11e>
    3610:	ac 01       	movw	r20, r24
    3612:	4e 5f       	subi	r20, 0xFE	; 254
    3614:	5f 4f       	sbci	r21, 0xFF	; 255
    3616:	24 17       	cp	r18, r20
    3618:	35 07       	cpc	r19, r21
    361a:	48 f0       	brcs	.+18     	; 0x362e <malloc+0x11e>
    361c:	4e 0f       	add	r20, r30
    361e:	5f 1f       	adc	r21, r31
    3620:	50 93 67 03 	sts	0x0367, r21	; 0x800367 <__brkval+0x1>
    3624:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <__brkval>
    3628:	81 93       	st	Z+, r24
    362a:	91 93       	st	Z+, r25
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <malloc+0x122>
    362e:	e0 e0       	ldi	r30, 0x00	; 0
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	cf 01       	movw	r24, r30
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	08 95       	ret

0000363a <free>:
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	09 f4       	brne	.+2      	; 0x3648 <free+0xe>
    3646:	8c c0       	rjmp	.+280    	; 0x3760 <free+0x126>
    3648:	fc 01       	movw	r30, r24
    364a:	32 97       	sbiw	r30, 0x02	; 2
    364c:	13 82       	std	Z+3, r1	; 0x03
    364e:	12 82       	std	Z+2, r1	; 0x02
    3650:	00 91 68 03 	lds	r16, 0x0368	; 0x800368 <__flp>
    3654:	10 91 69 03 	lds	r17, 0x0369	; 0x800369 <__flp+0x1>
    3658:	01 15       	cp	r16, r1
    365a:	11 05       	cpc	r17, r1
    365c:	81 f4       	brne	.+32     	; 0x367e <free+0x44>
    365e:	20 81       	ld	r18, Z
    3660:	31 81       	ldd	r19, Z+1	; 0x01
    3662:	82 0f       	add	r24, r18
    3664:	93 1f       	adc	r25, r19
    3666:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    366a:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    366e:	28 17       	cp	r18, r24
    3670:	39 07       	cpc	r19, r25
    3672:	79 f5       	brne	.+94     	; 0x36d2 <free+0x98>
    3674:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__brkval+0x1>
    3678:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__brkval>
    367c:	71 c0       	rjmp	.+226    	; 0x3760 <free+0x126>
    367e:	d8 01       	movw	r26, r16
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	ae 17       	cp	r26, r30
    3686:	bf 07       	cpc	r27, r31
    3688:	50 f4       	brcc	.+20     	; 0x369e <free+0x64>
    368a:	12 96       	adiw	r26, 0x02	; 2
    368c:	2d 91       	ld	r18, X+
    368e:	3c 91       	ld	r19, X
    3690:	13 97       	sbiw	r26, 0x03	; 3
    3692:	ad 01       	movw	r20, r26
    3694:	21 15       	cp	r18, r1
    3696:	31 05       	cpc	r19, r1
    3698:	09 f1       	breq	.+66     	; 0x36dc <free+0xa2>
    369a:	d9 01       	movw	r26, r18
    369c:	f3 cf       	rjmp	.-26     	; 0x3684 <free+0x4a>
    369e:	9d 01       	movw	r18, r26
    36a0:	da 01       	movw	r26, r20
    36a2:	33 83       	std	Z+3, r19	; 0x03
    36a4:	22 83       	std	Z+2, r18	; 0x02
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	86 0f       	add	r24, r22
    36ac:	97 1f       	adc	r25, r23
    36ae:	82 17       	cp	r24, r18
    36b0:	93 07       	cpc	r25, r19
    36b2:	69 f4       	brne	.+26     	; 0x36ce <free+0x94>
    36b4:	ec 01       	movw	r28, r24
    36b6:	28 81       	ld	r18, Y
    36b8:	39 81       	ldd	r19, Y+1	; 0x01
    36ba:	26 0f       	add	r18, r22
    36bc:	37 1f       	adc	r19, r23
    36be:	2e 5f       	subi	r18, 0xFE	; 254
    36c0:	3f 4f       	sbci	r19, 0xFF	; 255
    36c2:	31 83       	std	Z+1, r19	; 0x01
    36c4:	20 83       	st	Z, r18
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ca:	93 83       	std	Z+3, r25	; 0x03
    36cc:	82 83       	std	Z+2, r24	; 0x02
    36ce:	45 2b       	or	r20, r21
    36d0:	29 f4       	brne	.+10     	; 0x36dc <free+0xa2>
    36d2:	f0 93 69 03 	sts	0x0369, r31	; 0x800369 <__flp+0x1>
    36d6:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <__flp>
    36da:	42 c0       	rjmp	.+132    	; 0x3760 <free+0x126>
    36dc:	13 96       	adiw	r26, 0x03	; 3
    36de:	fc 93       	st	X, r31
    36e0:	ee 93       	st	-X, r30
    36e2:	12 97       	sbiw	r26, 0x02	; 2
    36e4:	ed 01       	movw	r28, r26
    36e6:	49 91       	ld	r20, Y+
    36e8:	59 91       	ld	r21, Y+
    36ea:	9e 01       	movw	r18, r28
    36ec:	24 0f       	add	r18, r20
    36ee:	35 1f       	adc	r19, r21
    36f0:	e2 17       	cp	r30, r18
    36f2:	f3 07       	cpc	r31, r19
    36f4:	71 f4       	brne	.+28     	; 0x3712 <free+0xd8>
    36f6:	80 81       	ld	r24, Z
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	84 0f       	add	r24, r20
    36fc:	95 1f       	adc	r25, r21
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	9c 93       	st	X, r25
    3704:	8e 93       	st	-X, r24
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	13 96       	adiw	r26, 0x03	; 3
    370c:	9c 93       	st	X, r25
    370e:	8e 93       	st	-X, r24
    3710:	12 97       	sbiw	r26, 0x02	; 2
    3712:	e0 e0       	ldi	r30, 0x00	; 0
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	d8 01       	movw	r26, r16
    3718:	12 96       	adiw	r26, 0x02	; 2
    371a:	8d 91       	ld	r24, X+
    371c:	9c 91       	ld	r25, X
    371e:	13 97       	sbiw	r26, 0x03	; 3
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	19 f0       	breq	.+6      	; 0x372a <free+0xf0>
    3724:	f8 01       	movw	r30, r16
    3726:	8c 01       	movw	r16, r24
    3728:	f6 cf       	rjmp	.-20     	; 0x3716 <free+0xdc>
    372a:	8d 91       	ld	r24, X+
    372c:	9c 91       	ld	r25, X
    372e:	98 01       	movw	r18, r16
    3730:	2e 5f       	subi	r18, 0xFE	; 254
    3732:	3f 4f       	sbci	r19, 0xFF	; 255
    3734:	82 0f       	add	r24, r18
    3736:	93 1f       	adc	r25, r19
    3738:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    373c:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    3740:	28 17       	cp	r18, r24
    3742:	39 07       	cpc	r19, r25
    3744:	69 f4       	brne	.+26     	; 0x3760 <free+0x126>
    3746:	30 97       	sbiw	r30, 0x00	; 0
    3748:	29 f4       	brne	.+10     	; 0x3754 <free+0x11a>
    374a:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <__flp+0x1>
    374e:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <__flp>
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <free+0x11e>
    3754:	13 82       	std	Z+3, r1	; 0x03
    3756:	12 82       	std	Z+2, r1	; 0x02
    3758:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <__brkval+0x1>
    375c:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <__brkval>
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <realloc>:
    376a:	a0 e0       	ldi	r26, 0x00	; 0
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	eb eb       	ldi	r30, 0xBB	; 187
    3770:	fb e1       	ldi	r31, 0x1B	; 27
    3772:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__prologue_saves__+0x8>
    3776:	ec 01       	movw	r28, r24
    3778:	00 97       	sbiw	r24, 0x00	; 0
    377a:	21 f4       	brne	.+8      	; 0x3784 <realloc+0x1a>
    377c:	cb 01       	movw	r24, r22
    377e:	0e 94 88 1a 	call	0x3510	; 0x3510 <malloc>
    3782:	b8 c0       	rjmp	.+368    	; 0x38f4 <realloc+0x18a>
    3784:	fc 01       	movw	r30, r24
    3786:	e6 0f       	add	r30, r22
    3788:	f7 1f       	adc	r31, r23
    378a:	9c 01       	movw	r18, r24
    378c:	22 50       	subi	r18, 0x02	; 2
    378e:	31 09       	sbc	r19, r1
    3790:	e2 17       	cp	r30, r18
    3792:	f3 07       	cpc	r31, r19
    3794:	08 f4       	brcc	.+2      	; 0x3798 <realloc+0x2e>
    3796:	ac c0       	rjmp	.+344    	; 0x38f0 <realloc+0x186>
    3798:	d9 01       	movw	r26, r18
    379a:	0d 91       	ld	r16, X+
    379c:	1c 91       	ld	r17, X
    379e:	11 97       	sbiw	r26, 0x01	; 1
    37a0:	06 17       	cp	r16, r22
    37a2:	17 07       	cpc	r17, r23
    37a4:	b0 f0       	brcs	.+44     	; 0x37d2 <realloc+0x68>
    37a6:	05 30       	cpi	r16, 0x05	; 5
    37a8:	11 05       	cpc	r17, r1
    37aa:	08 f4       	brcc	.+2      	; 0x37ae <realloc+0x44>
    37ac:	9f c0       	rjmp	.+318    	; 0x38ec <realloc+0x182>
    37ae:	c8 01       	movw	r24, r16
    37b0:	04 97       	sbiw	r24, 0x04	; 4
    37b2:	86 17       	cp	r24, r22
    37b4:	97 07       	cpc	r25, r23
    37b6:	08 f4       	brcc	.+2      	; 0x37ba <realloc+0x50>
    37b8:	99 c0       	rjmp	.+306    	; 0x38ec <realloc+0x182>
    37ba:	02 50       	subi	r16, 0x02	; 2
    37bc:	11 09       	sbc	r17, r1
    37be:	06 1b       	sub	r16, r22
    37c0:	17 0b       	sbc	r17, r23
    37c2:	01 93       	st	Z+, r16
    37c4:	11 93       	st	Z+, r17
    37c6:	6d 93       	st	X+, r22
    37c8:	7c 93       	st	X, r23
    37ca:	cf 01       	movw	r24, r30
    37cc:	0e 94 1d 1b 	call	0x363a	; 0x363a <free>
    37d0:	8d c0       	rjmp	.+282    	; 0x38ec <realloc+0x182>
    37d2:	5b 01       	movw	r10, r22
    37d4:	a0 1a       	sub	r10, r16
    37d6:	b1 0a       	sbc	r11, r17
    37d8:	4c 01       	movw	r8, r24
    37da:	80 0e       	add	r8, r16
    37dc:	91 1e       	adc	r9, r17
    37de:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <__flp>
    37e2:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <__flp+0x1>
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	e1 2c       	mov	r14, r1
    37ec:	f1 2c       	mov	r15, r1
    37ee:	10 97       	sbiw	r26, 0x00	; 0
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <realloc+0x8a>
    37f2:	4a c0       	rjmp	.+148    	; 0x3888 <realloc+0x11e>
    37f4:	a8 15       	cp	r26, r8
    37f6:	b9 05       	cpc	r27, r9
    37f8:	d1 f5       	brne	.+116    	; 0x386e <realloc+0x104>
    37fa:	6d 90       	ld	r6, X+
    37fc:	7c 90       	ld	r7, X
    37fe:	11 97       	sbiw	r26, 0x01	; 1
    3800:	63 01       	movw	r12, r6
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	c8 0e       	add	r12, r24
    3806:	d1 1c       	adc	r13, r1
    3808:	ca 14       	cp	r12, r10
    380a:	db 04       	cpc	r13, r11
    380c:	80 f1       	brcs	.+96     	; 0x386e <realloc+0x104>
    380e:	a3 01       	movw	r20, r6
    3810:	4a 19       	sub	r20, r10
    3812:	5b 09       	sbc	r21, r11
    3814:	6a 01       	movw	r12, r20
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	c8 0e       	add	r12, r24
    381a:	d1 1c       	adc	r13, r1
    381c:	12 96       	adiw	r26, 0x02	; 2
    381e:	bc 90       	ld	r11, X
    3820:	12 97       	sbiw	r26, 0x02	; 2
    3822:	13 96       	adiw	r26, 0x03	; 3
    3824:	ac 91       	ld	r26, X
    3826:	b5 e0       	ldi	r27, 0x05	; 5
    3828:	cb 16       	cp	r12, r27
    382a:	d1 04       	cpc	r13, r1
    382c:	40 f0       	brcs	.+16     	; 0x383e <realloc+0xd4>
    382e:	b2 82       	std	Z+2, r11	; 0x02
    3830:	a3 83       	std	Z+3, r26	; 0x03
    3832:	51 83       	std	Z+1, r21	; 0x01
    3834:	40 83       	st	Z, r20
    3836:	d9 01       	movw	r26, r18
    3838:	6d 93       	st	X+, r22
    383a:	7c 93       	st	X, r23
    383c:	0a c0       	rjmp	.+20     	; 0x3852 <realloc+0xe8>
    383e:	0e 5f       	subi	r16, 0xFE	; 254
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	c3 01       	movw	r24, r6
    3844:	80 0f       	add	r24, r16
    3846:	91 1f       	adc	r25, r17
    3848:	f9 01       	movw	r30, r18
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    384e:	eb 2d       	mov	r30, r11
    3850:	fa 2f       	mov	r31, r26
    3852:	e1 14       	cp	r14, r1
    3854:	f1 04       	cpc	r15, r1
    3856:	31 f0       	breq	.+12     	; 0x3864 <realloc+0xfa>
    3858:	d7 01       	movw	r26, r14
    385a:	13 96       	adiw	r26, 0x03	; 3
    385c:	fc 93       	st	X, r31
    385e:	ee 93       	st	-X, r30
    3860:	12 97       	sbiw	r26, 0x02	; 2
    3862:	44 c0       	rjmp	.+136    	; 0x38ec <realloc+0x182>
    3864:	f0 93 69 03 	sts	0x0369, r31	; 0x800369 <__flp+0x1>
    3868:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <__flp>
    386c:	3f c0       	rjmp	.+126    	; 0x38ec <realloc+0x182>
    386e:	8d 91       	ld	r24, X+
    3870:	9c 91       	ld	r25, X
    3872:	11 97       	sbiw	r26, 0x01	; 1
    3874:	48 17       	cp	r20, r24
    3876:	59 07       	cpc	r21, r25
    3878:	08 f4       	brcc	.+2      	; 0x387c <realloc+0x112>
    387a:	ac 01       	movw	r20, r24
    387c:	7d 01       	movw	r14, r26
    387e:	12 96       	adiw	r26, 0x02	; 2
    3880:	0d 90       	ld	r0, X+
    3882:	bc 91       	ld	r27, X
    3884:	a0 2d       	mov	r26, r0
    3886:	b3 cf       	rjmp	.-154    	; 0x37ee <realloc+0x84>
    3888:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <__brkval>
    388c:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <__brkval+0x1>
    3890:	88 15       	cp	r24, r8
    3892:	99 05       	cpc	r25, r9
    3894:	e1 f4       	brne	.+56     	; 0x38ce <realloc+0x164>
    3896:	46 17       	cp	r20, r22
    3898:	57 07       	cpc	r21, r23
    389a:	c8 f4       	brcc	.+50     	; 0x38ce <realloc+0x164>
    389c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    38a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	41 f4       	brne	.+16     	; 0x38b8 <realloc+0x14e>
    38a8:	8d b7       	in	r24, 0x3d	; 61
    38aa:	9e b7       	in	r25, 0x3e	; 62
    38ac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    38b0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    38b4:	84 1b       	sub	r24, r20
    38b6:	95 0b       	sbc	r25, r21
    38b8:	e8 17       	cp	r30, r24
    38ba:	f9 07       	cpc	r31, r25
    38bc:	c8 f4       	brcc	.+50     	; 0x38f0 <realloc+0x186>
    38be:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__brkval+0x1>
    38c2:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__brkval>
    38c6:	f9 01       	movw	r30, r18
    38c8:	71 83       	std	Z+1, r23	; 0x01
    38ca:	60 83       	st	Z, r22
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <realloc+0x182>
    38ce:	cb 01       	movw	r24, r22
    38d0:	0e 94 88 1a 	call	0x3510	; 0x3510 <malloc>
    38d4:	7c 01       	movw	r14, r24
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	59 f0       	breq	.+22     	; 0x38f0 <realloc+0x186>
    38da:	a8 01       	movw	r20, r16
    38dc:	be 01       	movw	r22, r28
    38de:	0e 94 b3 1c 	call	0x3966	; 0x3966 <memcpy>
    38e2:	ce 01       	movw	r24, r28
    38e4:	0e 94 1d 1b 	call	0x363a	; 0x363a <free>
    38e8:	c7 01       	movw	r24, r14
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <realloc+0x18a>
    38ec:	ce 01       	movw	r24, r28
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <realloc+0x18a>
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	ee e0       	ldi	r30, 0x0E	; 14
    38fa:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__epilogue_restores__+0x8>

000038fe <atof>:
    38fe:	66 27       	eor	r22, r22
    3900:	77 27       	eor	r23, r23
    3902:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <strtod>

00003906 <atol>:
    3906:	1f 93       	push	r17
    3908:	fc 01       	movw	r30, r24
    390a:	99 27       	eor	r25, r25
    390c:	88 27       	eor	r24, r24
    390e:	bc 01       	movw	r22, r24
    3910:	e8 94       	clt
    3912:	11 91       	ld	r17, Z+
    3914:	10 32       	cpi	r17, 0x20	; 32
    3916:	e9 f3       	breq	.-6      	; 0x3912 <atol+0xc>
    3918:	19 30       	cpi	r17, 0x09	; 9
    391a:	10 f0       	brcs	.+4      	; 0x3920 <atol+0x1a>
    391c:	1e 30       	cpi	r17, 0x0E	; 14
    391e:	c8 f3       	brcs	.-14     	; 0x3912 <atol+0xc>
    3920:	1b 32       	cpi	r17, 0x2B	; 43
    3922:	51 f0       	breq	.+20     	; 0x3938 <atol+0x32>
    3924:	1d 32       	cpi	r17, 0x2D	; 45
    3926:	49 f4       	brne	.+18     	; 0x393a <atol+0x34>
    3928:	68 94       	set
    392a:	06 c0       	rjmp	.+12     	; 0x3938 <atol+0x32>
    392c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsi_const_10>
    3930:	61 0f       	add	r22, r17
    3932:	71 1d       	adc	r23, r1
    3934:	81 1d       	adc	r24, r1
    3936:	91 1d       	adc	r25, r1
    3938:	11 91       	ld	r17, Z+
    393a:	10 53       	subi	r17, 0x30	; 48
    393c:	1a 30       	cpi	r17, 0x0A	; 10
    393e:	b0 f3       	brcs	.-20     	; 0x392c <atol+0x26>
    3940:	3e f4       	brtc	.+14     	; 0x3950 <atol+0x4a>
    3942:	90 95       	com	r25
    3944:	80 95       	com	r24
    3946:	70 95       	com	r23
    3948:	61 95       	neg	r22
    394a:	7f 4f       	sbci	r23, 0xFF	; 255
    394c:	8f 4f       	sbci	r24, 0xFF	; 255
    394e:	9f 4f       	sbci	r25, 0xFF	; 255
    3950:	1f 91       	pop	r17
    3952:	08 95       	ret

00003954 <isspace>:
    3954:	91 11       	cpse	r25, r1
    3956:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__ctype_isfalse>
    395a:	80 32       	cpi	r24, 0x20	; 32
    395c:	19 f0       	breq	.+6      	; 0x3964 <isspace+0x10>
    395e:	89 50       	subi	r24, 0x09	; 9
    3960:	85 50       	subi	r24, 0x05	; 5
    3962:	c8 f7       	brcc	.-14     	; 0x3956 <isspace+0x2>
    3964:	08 95       	ret

00003966 <memcpy>:
    3966:	fb 01       	movw	r30, r22
    3968:	dc 01       	movw	r26, r24
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <memcpy+0xa>
    396c:	01 90       	ld	r0, Z+
    396e:	0d 92       	st	X+, r0
    3970:	41 50       	subi	r20, 0x01	; 1
    3972:	50 40       	sbci	r21, 0x00	; 0
    3974:	d8 f7       	brcc	.-10     	; 0x396c <memcpy+0x6>
    3976:	08 95       	ret

00003978 <strcmp>:
    3978:	fb 01       	movw	r30, r22
    397a:	dc 01       	movw	r26, r24
    397c:	8d 91       	ld	r24, X+
    397e:	01 90       	ld	r0, Z+
    3980:	80 19       	sub	r24, r0
    3982:	01 10       	cpse	r0, r1
    3984:	d9 f3       	breq	.-10     	; 0x397c <strcmp+0x4>
    3986:	99 0b       	sbc	r25, r25
    3988:	08 95       	ret

0000398a <strcpy>:
    398a:	fb 01       	movw	r30, r22
    398c:	dc 01       	movw	r26, r24
    398e:	01 90       	ld	r0, Z+
    3990:	0d 92       	st	X+, r0
    3992:	00 20       	and	r0, r0
    3994:	e1 f7       	brne	.-8      	; 0x398e <strcpy+0x4>
    3996:	08 95       	ret

00003998 <strncmp>:
    3998:	fb 01       	movw	r30, r22
    399a:	dc 01       	movw	r26, r24
    399c:	41 50       	subi	r20, 0x01	; 1
    399e:	50 40       	sbci	r21, 0x00	; 0
    39a0:	30 f0       	brcs	.+12     	; 0x39ae <strncmp+0x16>
    39a2:	8d 91       	ld	r24, X+
    39a4:	01 90       	ld	r0, Z+
    39a6:	80 19       	sub	r24, r0
    39a8:	19 f4       	brne	.+6      	; 0x39b0 <strncmp+0x18>
    39aa:	00 20       	and	r0, r0
    39ac:	b9 f7       	brne	.-18     	; 0x399c <strncmp+0x4>
    39ae:	88 1b       	sub	r24, r24
    39b0:	99 0b       	sbc	r25, r25
    39b2:	08 95       	ret

000039b4 <itoa>:
    39b4:	45 32       	cpi	r20, 0x25	; 37
    39b6:	51 05       	cpc	r21, r1
    39b8:	20 f4       	brcc	.+8      	; 0x39c2 <itoa+0xe>
    39ba:	42 30       	cpi	r20, 0x02	; 2
    39bc:	10 f0       	brcs	.+4      	; 0x39c2 <itoa+0xe>
    39be:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__itoa_ncheck>
    39c2:	fb 01       	movw	r30, r22
    39c4:	10 82       	st	Z, r1
    39c6:	cb 01       	movw	r24, r22
    39c8:	08 95       	ret

000039ca <__itoa_ncheck>:
    39ca:	bb 27       	eor	r27, r27
    39cc:	4a 30       	cpi	r20, 0x0A	; 10
    39ce:	31 f4       	brne	.+12     	; 0x39dc <__itoa_ncheck+0x12>
    39d0:	99 23       	and	r25, r25
    39d2:	22 f4       	brpl	.+8      	; 0x39dc <__itoa_ncheck+0x12>
    39d4:	bd e2       	ldi	r27, 0x2D	; 45
    39d6:	90 95       	com	r25
    39d8:	81 95       	neg	r24
    39da:	9f 4f       	sbci	r25, 0xFF	; 255
    39dc:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__utoa_common>

000039e0 <__mulsi_const_10>:
    39e0:	59 2f       	mov	r21, r25
    39e2:	48 2f       	mov	r20, r24
    39e4:	37 2f       	mov	r19, r23
    39e6:	26 2f       	mov	r18, r22
    39e8:	66 0f       	add	r22, r22
    39ea:	77 1f       	adc	r23, r23
    39ec:	88 1f       	adc	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	66 0f       	add	r22, r22
    39f2:	77 1f       	adc	r23, r23
    39f4:	88 1f       	adc	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	62 0f       	add	r22, r18
    39fa:	73 1f       	adc	r23, r19
    39fc:	84 1f       	adc	r24, r20
    39fe:	95 1f       	adc	r25, r21
    3a00:	66 0f       	add	r22, r22
    3a02:	77 1f       	adc	r23, r23
    3a04:	88 1f       	adc	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	08 95       	ret

00003a0a <ultoa>:
    3a0a:	25 32       	cpi	r18, 0x25	; 37
    3a0c:	31 05       	cpc	r19, r1
    3a0e:	20 f4       	brcc	.+8      	; 0x3a18 <ultoa+0xe>
    3a10:	22 30       	cpi	r18, 0x02	; 2
    3a12:	10 f0       	brcs	.+4      	; 0x3a18 <ultoa+0xe>
    3a14:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__ultoa_ncheck>
    3a18:	fa 01       	movw	r30, r20
    3a1a:	10 82       	st	Z, r1
    3a1c:	ca 01       	movw	r24, r20
    3a1e:	08 95       	ret

00003a20 <__ultoa_ncheck>:
    3a20:	bb 27       	eor	r27, r27

00003a22 <__ultoa_common>:
    3a22:	fa 01       	movw	r30, r20
    3a24:	a6 2f       	mov	r26, r22
    3a26:	62 17       	cp	r22, r18
    3a28:	71 05       	cpc	r23, r1
    3a2a:	81 05       	cpc	r24, r1
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	33 0b       	sbc	r19, r19
    3a30:	30 fb       	bst	r19, 0
    3a32:	66 f0       	brts	.+24     	; 0x3a4c <__ultoa_common+0x2a>
    3a34:	aa 27       	eor	r26, r26
    3a36:	66 0f       	add	r22, r22
    3a38:	77 1f       	adc	r23, r23
    3a3a:	88 1f       	adc	r24, r24
    3a3c:	99 1f       	adc	r25, r25
    3a3e:	aa 1f       	adc	r26, r26
    3a40:	a2 17       	cp	r26, r18
    3a42:	10 f0       	brcs	.+4      	; 0x3a48 <__ultoa_common+0x26>
    3a44:	a2 1b       	sub	r26, r18
    3a46:	63 95       	inc	r22
    3a48:	38 50       	subi	r19, 0x08	; 8
    3a4a:	a9 f7       	brne	.-22     	; 0x3a36 <__ultoa_common+0x14>
    3a4c:	a0 5d       	subi	r26, 0xD0	; 208
    3a4e:	aa 33       	cpi	r26, 0x3A	; 58
    3a50:	08 f0       	brcs	.+2      	; 0x3a54 <__ultoa_common+0x32>
    3a52:	a9 5d       	subi	r26, 0xD9	; 217
    3a54:	a1 93       	st	Z+, r26
    3a56:	36 f7       	brtc	.-52     	; 0x3a24 <__ultoa_common+0x2>
    3a58:	b1 11       	cpse	r27, r1
    3a5a:	b1 93       	st	Z+, r27
    3a5c:	10 82       	st	Z, r1
    3a5e:	ca 01       	movw	r24, r20
    3a60:	0c 94 35 21 	jmp	0x426a	; 0x426a <strrev>

00003a64 <utoa>:
    3a64:	45 32       	cpi	r20, 0x25	; 37
    3a66:	51 05       	cpc	r21, r1
    3a68:	20 f4       	brcc	.+8      	; 0x3a72 <utoa+0xe>
    3a6a:	42 30       	cpi	r20, 0x02	; 2
    3a6c:	10 f0       	brcs	.+4      	; 0x3a72 <utoa+0xe>
    3a6e:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__utoa_ncheck>
    3a72:	fb 01       	movw	r30, r22
    3a74:	10 82       	st	Z, r1
    3a76:	cb 01       	movw	r24, r22
    3a78:	08 95       	ret

00003a7a <__utoa_ncheck>:
    3a7a:	bb 27       	eor	r27, r27

00003a7c <__utoa_common>:
    3a7c:	fb 01       	movw	r30, r22
    3a7e:	55 27       	eor	r21, r21
    3a80:	aa 27       	eor	r26, r26
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	aa 1f       	adc	r26, r26
    3a88:	a4 17       	cp	r26, r20
    3a8a:	10 f0       	brcs	.+4      	; 0x3a90 <__utoa_common+0x14>
    3a8c:	a4 1b       	sub	r26, r20
    3a8e:	83 95       	inc	r24
    3a90:	50 51       	subi	r21, 0x10	; 16
    3a92:	b9 f7       	brne	.-18     	; 0x3a82 <__utoa_common+0x6>
    3a94:	a0 5d       	subi	r26, 0xD0	; 208
    3a96:	aa 33       	cpi	r26, 0x3A	; 58
    3a98:	08 f0       	brcs	.+2      	; 0x3a9c <__utoa_common+0x20>
    3a9a:	a9 5d       	subi	r26, 0xD9	; 217
    3a9c:	a1 93       	st	Z+, r26
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	79 f7       	brne	.-34     	; 0x3a80 <__utoa_common+0x4>
    3aa2:	b1 11       	cpse	r27, r1
    3aa4:	b1 93       	st	Z+, r27
    3aa6:	11 92       	st	Z+, r1
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	0c 94 35 21 	jmp	0x426a	; 0x426a <strrev>

00003aae <dtoa_prf>:
    3aae:	4f 92       	push	r4
    3ab0:	5f 92       	push	r5
    3ab2:	6f 92       	push	r6
    3ab4:	7f 92       	push	r7
    3ab6:	9f 92       	push	r9
    3ab8:	af 92       	push	r10
    3aba:	bf 92       	push	r11
    3abc:	cf 92       	push	r12
    3abe:	df 92       	push	r13
    3ac0:	ef 92       	push	r14
    3ac2:	ff 92       	push	r15
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	29 97       	sbiw	r28, 0x09	; 9
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	6a 01       	movw	r12, r20
    3ade:	12 2f       	mov	r17, r18
    3ae0:	b0 2e       	mov	r11, r16
    3ae2:	2b e3       	ldi	r18, 0x3B	; 59
    3ae4:	20 17       	cp	r18, r16
    3ae6:	20 f0       	brcs	.+8      	; 0x3af0 <dtoa_prf+0x42>
    3ae8:	ff 24       	eor	r15, r15
    3aea:	f3 94       	inc	r15
    3aec:	f0 0e       	add	r15, r16
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <dtoa_prf+0x46>
    3af0:	bc e3       	ldi	r27, 0x3C	; 60
    3af2:	fb 2e       	mov	r15, r27
    3af4:	0f 2d       	mov	r16, r15
    3af6:	27 e0       	ldi	r18, 0x07	; 7
    3af8:	ae 01       	movw	r20, r28
    3afa:	4f 5f       	subi	r20, 0xFF	; 255
    3afc:	5f 4f       	sbci	r21, 0xFF	; 255
    3afe:	0e 94 42 20 	call	0x4084	; 0x4084 <__ftoa_engine>
    3b02:	ac 01       	movw	r20, r24
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	98 2f       	mov	r25, r24
    3b08:	99 70       	andi	r25, 0x09	; 9
    3b0a:	91 30       	cpi	r25, 0x01	; 1
    3b0c:	31 f0       	breq	.+12     	; 0x3b1a <dtoa_prf+0x6c>
    3b0e:	e1 fc       	sbrc	r14, 1
    3b10:	06 c0       	rjmp	.+12     	; 0x3b1e <dtoa_prf+0x70>
    3b12:	e0 fe       	sbrs	r14, 0
    3b14:	06 c0       	rjmp	.+12     	; 0x3b22 <dtoa_prf+0x74>
    3b16:	90 e2       	ldi	r25, 0x20	; 32
    3b18:	05 c0       	rjmp	.+10     	; 0x3b24 <dtoa_prf+0x76>
    3b1a:	9d e2       	ldi	r25, 0x2D	; 45
    3b1c:	03 c0       	rjmp	.+6      	; 0x3b24 <dtoa_prf+0x76>
    3b1e:	9b e2       	ldi	r25, 0x2B	; 43
    3b20:	01 c0       	rjmp	.+2      	; 0x3b24 <dtoa_prf+0x76>
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	ee 2d       	mov	r30, r14
    3b26:	e0 71       	andi	r30, 0x10	; 16
    3b28:	83 ff       	sbrs	r24, 3
    3b2a:	3c c0       	rjmp	.+120    	; 0x3ba4 <dtoa_prf+0xf6>
    3b2c:	91 11       	cpse	r25, r1
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <dtoa_prf+0x86>
    3b30:	83 e0       	ldi	r24, 0x03	; 3
    3b32:	01 c0       	rjmp	.+2      	; 0x3b36 <dtoa_prf+0x88>
    3b34:	84 e0       	ldi	r24, 0x04	; 4
    3b36:	81 17       	cp	r24, r17
    3b38:	18 f4       	brcc	.+6      	; 0x3b40 <dtoa_prf+0x92>
    3b3a:	21 2f       	mov	r18, r17
    3b3c:	28 1b       	sub	r18, r24
    3b3e:	01 c0       	rjmp	.+2      	; 0x3b42 <dtoa_prf+0x94>
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	e1 11       	cpse	r30, r1
    3b44:	0b c0       	rjmp	.+22     	; 0x3b5c <dtoa_prf+0xae>
    3b46:	f6 01       	movw	r30, r12
    3b48:	82 2f       	mov	r24, r18
    3b4a:	30 e2       	ldi	r19, 0x20	; 32
    3b4c:	88 23       	and	r24, r24
    3b4e:	19 f0       	breq	.+6      	; 0x3b56 <dtoa_prf+0xa8>
    3b50:	31 93       	st	Z+, r19
    3b52:	81 50       	subi	r24, 0x01	; 1
    3b54:	fb cf       	rjmp	.-10     	; 0x3b4c <dtoa_prf+0x9e>
    3b56:	c2 0e       	add	r12, r18
    3b58:	d1 1c       	adc	r13, r1
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	99 23       	and	r25, r25
    3b5e:	29 f0       	breq	.+10     	; 0x3b6a <dtoa_prf+0xbc>
    3b60:	d6 01       	movw	r26, r12
    3b62:	9c 93       	st	X, r25
    3b64:	f6 01       	movw	r30, r12
    3b66:	31 96       	adiw	r30, 0x01	; 1
    3b68:	6f 01       	movw	r12, r30
    3b6a:	c6 01       	movw	r24, r12
    3b6c:	03 96       	adiw	r24, 0x03	; 3
    3b6e:	e2 fe       	sbrs	r14, 2
    3b70:	0a c0       	rjmp	.+20     	; 0x3b86 <dtoa_prf+0xd8>
    3b72:	3e e4       	ldi	r19, 0x4E	; 78
    3b74:	d6 01       	movw	r26, r12
    3b76:	3c 93       	st	X, r19
    3b78:	41 e4       	ldi	r20, 0x41	; 65
    3b7a:	11 96       	adiw	r26, 0x01	; 1
    3b7c:	4c 93       	st	X, r20
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
    3b80:	12 96       	adiw	r26, 0x02	; 2
    3b82:	3c 93       	st	X, r19
    3b84:	06 c0       	rjmp	.+12     	; 0x3b92 <dtoa_prf+0xe4>
    3b86:	3e e6       	ldi	r19, 0x6E	; 110
    3b88:	f6 01       	movw	r30, r12
    3b8a:	30 83       	st	Z, r19
    3b8c:	41 e6       	ldi	r20, 0x61	; 97
    3b8e:	41 83       	std	Z+1, r20	; 0x01
    3b90:	32 83       	std	Z+2, r19	; 0x02
    3b92:	fc 01       	movw	r30, r24
    3b94:	32 2f       	mov	r19, r18
    3b96:	40 e2       	ldi	r20, 0x20	; 32
    3b98:	33 23       	and	r19, r19
    3b9a:	09 f4       	brne	.+2      	; 0x3b9e <dtoa_prf+0xf0>
    3b9c:	42 c0       	rjmp	.+132    	; 0x3c22 <dtoa_prf+0x174>
    3b9e:	41 93       	st	Z+, r20
    3ba0:	31 50       	subi	r19, 0x01	; 1
    3ba2:	fa cf       	rjmp	.-12     	; 0x3b98 <dtoa_prf+0xea>
    3ba4:	82 ff       	sbrs	r24, 2
    3ba6:	44 c0       	rjmp	.+136    	; 0x3c30 <dtoa_prf+0x182>
    3ba8:	91 11       	cpse	r25, r1
    3baa:	02 c0       	rjmp	.+4      	; 0x3bb0 <dtoa_prf+0x102>
    3bac:	83 e0       	ldi	r24, 0x03	; 3
    3bae:	01 c0       	rjmp	.+2      	; 0x3bb2 <dtoa_prf+0x104>
    3bb0:	84 e0       	ldi	r24, 0x04	; 4
    3bb2:	81 17       	cp	r24, r17
    3bb4:	18 f4       	brcc	.+6      	; 0x3bbc <dtoa_prf+0x10e>
    3bb6:	21 2f       	mov	r18, r17
    3bb8:	28 1b       	sub	r18, r24
    3bba:	01 c0       	rjmp	.+2      	; 0x3bbe <dtoa_prf+0x110>
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	e1 11       	cpse	r30, r1
    3bc0:	0b c0       	rjmp	.+22     	; 0x3bd8 <dtoa_prf+0x12a>
    3bc2:	f6 01       	movw	r30, r12
    3bc4:	82 2f       	mov	r24, r18
    3bc6:	30 e2       	ldi	r19, 0x20	; 32
    3bc8:	88 23       	and	r24, r24
    3bca:	19 f0       	breq	.+6      	; 0x3bd2 <dtoa_prf+0x124>
    3bcc:	31 93       	st	Z+, r19
    3bce:	81 50       	subi	r24, 0x01	; 1
    3bd0:	fb cf       	rjmp	.-10     	; 0x3bc8 <dtoa_prf+0x11a>
    3bd2:	c2 0e       	add	r12, r18
    3bd4:	d1 1c       	adc	r13, r1
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	99 23       	and	r25, r25
    3bda:	29 f0       	breq	.+10     	; 0x3be6 <dtoa_prf+0x138>
    3bdc:	d6 01       	movw	r26, r12
    3bde:	9c 93       	st	X, r25
    3be0:	f6 01       	movw	r30, r12
    3be2:	31 96       	adiw	r30, 0x01	; 1
    3be4:	6f 01       	movw	r12, r30
    3be6:	c6 01       	movw	r24, r12
    3be8:	03 96       	adiw	r24, 0x03	; 3
    3bea:	e2 fe       	sbrs	r14, 2
    3bec:	0b c0       	rjmp	.+22     	; 0x3c04 <dtoa_prf+0x156>
    3bee:	39 e4       	ldi	r19, 0x49	; 73
    3bf0:	d6 01       	movw	r26, r12
    3bf2:	3c 93       	st	X, r19
    3bf4:	3e e4       	ldi	r19, 0x4E	; 78
    3bf6:	11 96       	adiw	r26, 0x01	; 1
    3bf8:	3c 93       	st	X, r19
    3bfa:	11 97       	sbiw	r26, 0x01	; 1
    3bfc:	36 e4       	ldi	r19, 0x46	; 70
    3bfe:	12 96       	adiw	r26, 0x02	; 2
    3c00:	3c 93       	st	X, r19
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <dtoa_prf+0x164>
    3c04:	39 e6       	ldi	r19, 0x69	; 105
    3c06:	f6 01       	movw	r30, r12
    3c08:	30 83       	st	Z, r19
    3c0a:	3e e6       	ldi	r19, 0x6E	; 110
    3c0c:	31 83       	std	Z+1, r19	; 0x01
    3c0e:	36 e6       	ldi	r19, 0x66	; 102
    3c10:	32 83       	std	Z+2, r19	; 0x02
    3c12:	fc 01       	movw	r30, r24
    3c14:	32 2f       	mov	r19, r18
    3c16:	40 e2       	ldi	r20, 0x20	; 32
    3c18:	33 23       	and	r19, r19
    3c1a:	19 f0       	breq	.+6      	; 0x3c22 <dtoa_prf+0x174>
    3c1c:	41 93       	st	Z+, r20
    3c1e:	31 50       	subi	r19, 0x01	; 1
    3c20:	fb cf       	rjmp	.-10     	; 0x3c18 <dtoa_prf+0x16a>
    3c22:	fc 01       	movw	r30, r24
    3c24:	e2 0f       	add	r30, r18
    3c26:	f1 1d       	adc	r31, r1
    3c28:	10 82       	st	Z, r1
    3c2a:	8e ef       	ldi	r24, 0xFE	; 254
    3c2c:	9f ef       	ldi	r25, 0xFF	; 255
    3c2e:	b7 c0       	rjmp	.+366    	; 0x3d9e <dtoa_prf+0x2f0>
    3c30:	f1 e0       	ldi	r31, 0x01	; 1
    3c32:	91 11       	cpse	r25, r1
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <dtoa_prf+0x18a>
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	6f 2f       	mov	r22, r31
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	14 16       	cp	r1, r20
    3c3e:	15 06       	cpc	r1, r21
    3c40:	24 f4       	brge	.+8      	; 0x3c4a <dtoa_prf+0x19c>
    3c42:	9a 01       	movw	r18, r20
    3c44:	2f 5f       	subi	r18, 0xFF	; 255
    3c46:	3f 4f       	sbci	r19, 0xFF	; 255
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <dtoa_prf+0x1a0>
    3c4a:	21 e0       	ldi	r18, 0x01	; 1
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	26 0f       	add	r18, r22
    3c50:	37 1f       	adc	r19, r23
    3c52:	bb 20       	and	r11, r11
    3c54:	29 f0       	breq	.+10     	; 0x3c60 <dtoa_prf+0x1b2>
    3c56:	6b 2d       	mov	r22, r11
    3c58:	70 e0       	ldi	r23, 0x00	; 0
    3c5a:	6f 5f       	subi	r22, 0xFF	; 255
    3c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5e:	02 c0       	rjmp	.+4      	; 0x3c64 <dtoa_prf+0x1b6>
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	26 0f       	add	r18, r22
    3c66:	37 1f       	adc	r19, r23
    3c68:	61 2f       	mov	r22, r17
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	26 17       	cp	r18, r22
    3c6e:	37 07       	cpc	r19, r23
    3c70:	1c f4       	brge	.+6      	; 0x3c78 <dtoa_prf+0x1ca>
    3c72:	12 1b       	sub	r17, r18
    3c74:	21 2f       	mov	r18, r17
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <dtoa_prf+0x1cc>
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3e 2d       	mov	r19, r14
    3c7c:	38 71       	andi	r19, 0x18	; 24
    3c7e:	59 f4       	brne	.+22     	; 0x3c96 <dtoa_prf+0x1e8>
    3c80:	d6 01       	movw	r26, r12
    3c82:	32 2f       	mov	r19, r18
    3c84:	60 e2       	ldi	r22, 0x20	; 32
    3c86:	33 23       	and	r19, r19
    3c88:	19 f0       	breq	.+6      	; 0x3c90 <dtoa_prf+0x1e2>
    3c8a:	6d 93       	st	X+, r22
    3c8c:	31 50       	subi	r19, 0x01	; 1
    3c8e:	fb cf       	rjmp	.-10     	; 0x3c86 <dtoa_prf+0x1d8>
    3c90:	c2 0e       	add	r12, r18
    3c92:	d1 1c       	adc	r13, r1
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	ff 23       	and	r31, r31
    3c98:	31 f0       	breq	.+12     	; 0x3ca6 <dtoa_prf+0x1f8>
    3c9a:	d6 01       	movw	r26, r12
    3c9c:	9c 93       	st	X, r25
    3c9e:	b6 01       	movw	r22, r12
    3ca0:	6f 5f       	subi	r22, 0xFF	; 255
    3ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca4:	6b 01       	movw	r12, r22
    3ca6:	e1 11       	cpse	r30, r1
    3ca8:	0b c0       	rjmp	.+22     	; 0x3cc0 <dtoa_prf+0x212>
    3caa:	f6 01       	movw	r30, r12
    3cac:	92 2f       	mov	r25, r18
    3cae:	30 e3       	ldi	r19, 0x30	; 48
    3cb0:	99 23       	and	r25, r25
    3cb2:	19 f0       	breq	.+6      	; 0x3cba <dtoa_prf+0x20c>
    3cb4:	31 93       	st	Z+, r19
    3cb6:	91 50       	subi	r25, 0x01	; 1
    3cb8:	fb cf       	rjmp	.-10     	; 0x3cb0 <dtoa_prf+0x202>
    3cba:	c2 0e       	add	r12, r18
    3cbc:	d1 1c       	adc	r13, r1
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	9f 2d       	mov	r25, r15
    3cc2:	94 0f       	add	r25, r20
    3cc4:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc6:	78 2f       	mov	r23, r24
    3cc8:	70 71       	andi	r23, 0x10	; 16
    3cca:	a7 2e       	mov	r10, r23
    3ccc:	84 ff       	sbrs	r24, 4
    3cce:	03 c0       	rjmp	.+6      	; 0x3cd6 <dtoa_prf+0x228>
    3cd0:	31 33       	cpi	r19, 0x31	; 49
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <dtoa_prf+0x228>
    3cd4:	91 50       	subi	r25, 0x01	; 1
    3cd6:	19 16       	cp	r1, r25
    3cd8:	24 f4       	brge	.+8      	; 0x3ce2 <dtoa_prf+0x234>
    3cda:	99 30       	cpi	r25, 0x09	; 9
    3cdc:	18 f0       	brcs	.+6      	; 0x3ce4 <dtoa_prf+0x236>
    3cde:	98 e0       	ldi	r25, 0x08	; 8
    3ce0:	01 c0       	rjmp	.+2      	; 0x3ce4 <dtoa_prf+0x236>
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	e4 2f       	mov	r30, r20
    3ce6:	85 2f       	mov	r24, r21
    3ce8:	57 ff       	sbrs	r21, 7
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <dtoa_prf+0x242>
    3cec:	e0 e0       	ldi	r30, 0x00	; 0
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	6e 2f       	mov	r22, r30
    3cf2:	78 2f       	mov	r23, r24
    3cf4:	e0 e0       	ldi	r30, 0x00	; 0
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	ae e2       	ldi	r26, 0x2E	; 46
    3cfa:	9a 2e       	mov	r9, r26
    3cfc:	3a 01       	movw	r6, r20
    3cfe:	69 1a       	sub	r6, r25
    3d00:	71 08       	sbc	r7, r1
    3d02:	2a 01       	movw	r4, r20
    3d04:	46 1a       	sub	r4, r22
    3d06:	57 0a       	sbc	r5, r23
    3d08:	0b 2d       	mov	r16, r11
    3d0a:	10 e0       	ldi	r17, 0x00	; 0
    3d0c:	11 95       	neg	r17
    3d0e:	01 95       	neg	r16
    3d10:	11 09       	sbc	r17, r1
    3d12:	6f 3f       	cpi	r22, 0xFF	; 255
    3d14:	8f ef       	ldi	r24, 0xFF	; 255
    3d16:	78 07       	cpc	r23, r24
    3d18:	29 f4       	brne	.+10     	; 0x3d24 <dtoa_prf+0x276>
    3d1a:	d6 01       	movw	r26, r12
    3d1c:	9c 92       	st	X, r9
    3d1e:	c6 01       	movw	r24, r12
    3d20:	01 96       	adiw	r24, 0x01	; 1
    3d22:	6c 01       	movw	r12, r24
    3d24:	46 17       	cp	r20, r22
    3d26:	57 07       	cpc	r21, r23
    3d28:	84 f0       	brlt	.+32     	; 0x3d4a <dtoa_prf+0x29c>
    3d2a:	66 16       	cp	r6, r22
    3d2c:	77 06       	cpc	r7, r23
    3d2e:	6c f4       	brge	.+26     	; 0x3d4a <dtoa_prf+0x29c>
    3d30:	7f 01       	movw	r14, r30
    3d32:	e4 0c       	add	r14, r4
    3d34:	f5 1c       	adc	r15, r5
    3d36:	a1 e0       	ldi	r26, 0x01	; 1
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	ac 0f       	add	r26, r28
    3d3c:	bd 1f       	adc	r27, r29
    3d3e:	ea 0e       	add	r14, r26
    3d40:	fb 1e       	adc	r15, r27
    3d42:	d7 01       	movw	r26, r14
    3d44:	11 96       	adiw	r26, 0x01	; 1
    3d46:	bc 90       	ld	r11, X
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <dtoa_prf+0x2a0>
    3d4a:	90 e3       	ldi	r25, 0x30	; 48
    3d4c:	b9 2e       	mov	r11, r25
    3d4e:	61 50       	subi	r22, 0x01	; 1
    3d50:	71 09       	sbc	r23, r1
    3d52:	31 96       	adiw	r30, 0x01	; 1
    3d54:	c6 01       	movw	r24, r12
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	7c 01       	movw	r14, r24
    3d5a:	60 17       	cp	r22, r16
    3d5c:	71 07       	cpc	r23, r17
    3d5e:	24 f0       	brlt	.+8      	; 0x3d68 <dtoa_prf+0x2ba>
    3d60:	d6 01       	movw	r26, r12
    3d62:	bc 92       	st	X, r11
    3d64:	6c 01       	movw	r12, r24
    3d66:	d5 cf       	rjmp	.-86     	; 0x3d12 <dtoa_prf+0x264>
    3d68:	64 17       	cp	r22, r20
    3d6a:	75 07       	cpc	r23, r21
    3d6c:	41 f4       	brne	.+16     	; 0x3d7e <dtoa_prf+0x2d0>
    3d6e:	36 33       	cpi	r19, 0x36	; 54
    3d70:	20 f4       	brcc	.+8      	; 0x3d7a <dtoa_prf+0x2cc>
    3d72:	35 33       	cpi	r19, 0x35	; 53
    3d74:	21 f4       	brne	.+8      	; 0x3d7e <dtoa_prf+0x2d0>
    3d76:	a1 10       	cpse	r10, r1
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <dtoa_prf+0x2d0>
    3d7a:	81 e3       	ldi	r24, 0x31	; 49
    3d7c:	b8 2e       	mov	r11, r24
    3d7e:	f6 01       	movw	r30, r12
    3d80:	b0 82       	st	Z, r11
    3d82:	f7 01       	movw	r30, r14
    3d84:	82 2f       	mov	r24, r18
    3d86:	90 e2       	ldi	r25, 0x20	; 32
    3d88:	88 23       	and	r24, r24
    3d8a:	19 f0       	breq	.+6      	; 0x3d92 <dtoa_prf+0x2e4>
    3d8c:	91 93       	st	Z+, r25
    3d8e:	81 50       	subi	r24, 0x01	; 1
    3d90:	fb cf       	rjmp	.-10     	; 0x3d88 <dtoa_prf+0x2da>
    3d92:	f7 01       	movw	r30, r14
    3d94:	e2 0f       	add	r30, r18
    3d96:	f1 1d       	adc	r31, r1
    3d98:	10 82       	st	Z, r1
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	29 96       	adiw	r28, 0x09	; 9
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	df 91       	pop	r29
    3dac:	cf 91       	pop	r28
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	ff 90       	pop	r15
    3db4:	ef 90       	pop	r14
    3db6:	df 90       	pop	r13
    3db8:	cf 90       	pop	r12
    3dba:	bf 90       	pop	r11
    3dbc:	af 90       	pop	r10
    3dbe:	9f 90       	pop	r9
    3dc0:	7f 90       	pop	r7
    3dc2:	6f 90       	pop	r6
    3dc4:	5f 90       	pop	r5
    3dc6:	4f 90       	pop	r4
    3dc8:	08 95       	ret

00003dca <strtod>:
    3dca:	a0 e0       	ldi	r26, 0x00	; 0
    3dcc:	b0 e0       	ldi	r27, 0x00	; 0
    3dce:	eb ee       	ldi	r30, 0xEB	; 235
    3dd0:	fe e1       	ldi	r31, 0x1E	; 30
    3dd2:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__prologue_saves__+0x8>
    3dd6:	ec 01       	movw	r28, r24
    3dd8:	7b 01       	movw	r14, r22
    3dda:	61 15       	cp	r22, r1
    3ddc:	71 05       	cpc	r23, r1
    3dde:	19 f0       	breq	.+6      	; 0x3de6 <strtod+0x1c>
    3de0:	db 01       	movw	r26, r22
    3de2:	8d 93       	st	X+, r24
    3de4:	9c 93       	st	X, r25
    3de6:	8e 01       	movw	r16, r28
    3de8:	0f 5f       	subi	r16, 0xFF	; 255
    3dea:	1f 4f       	sbci	r17, 0xFF	; 255
    3dec:	78 80       	ld	r7, Y
    3dee:	87 2d       	mov	r24, r7
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <isspace>
    3df6:	89 2b       	or	r24, r25
    3df8:	11 f0       	breq	.+4      	; 0x3dfe <strtod+0x34>
    3dfa:	e8 01       	movw	r28, r16
    3dfc:	f4 cf       	rjmp	.-24     	; 0x3de6 <strtod+0x1c>
    3dfe:	bd e2       	ldi	r27, 0x2D	; 45
    3e00:	7b 12       	cpse	r7, r27
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <strtod+0x44>
    3e04:	0f 5f       	subi	r16, 0xFF	; 255
    3e06:	1f 4f       	sbci	r17, 0xFF	; 255
    3e08:	79 80       	ldd	r7, Y+1	; 0x01
    3e0a:	c1 e0       	ldi	r28, 0x01	; 1
    3e0c:	08 c0       	rjmp	.+16     	; 0x3e1e <strtod+0x54>
    3e0e:	eb e2       	ldi	r30, 0x2B	; 43
    3e10:	7e 12       	cpse	r7, r30
    3e12:	04 c0       	rjmp	.+8      	; 0x3e1c <strtod+0x52>
    3e14:	8e 01       	movw	r16, r28
    3e16:	0e 5f       	subi	r16, 0xFE	; 254
    3e18:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1a:	79 80       	ldd	r7, Y+1	; 0x01
    3e1c:	c0 e0       	ldi	r28, 0x00	; 0
    3e1e:	68 01       	movw	r12, r16
    3e20:	f1 e0       	ldi	r31, 0x01	; 1
    3e22:	cf 1a       	sub	r12, r31
    3e24:	d1 08       	sbc	r13, r1
    3e26:	43 e0       	ldi	r20, 0x03	; 3
    3e28:	50 e0       	ldi	r21, 0x00	; 0
    3e2a:	62 ef       	ldi	r22, 0xF2	; 242
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	c6 01       	movw	r24, r12
    3e30:	0e 94 1d 21 	call	0x423a	; 0x423a <strncasecmp_P>
    3e34:	89 2b       	or	r24, r25
    3e36:	f1 f4       	brne	.+60     	; 0x3e74 <strtod+0xaa>
    3e38:	68 01       	movw	r12, r16
    3e3a:	22 e0       	ldi	r18, 0x02	; 2
    3e3c:	c2 0e       	add	r12, r18
    3e3e:	d1 1c       	adc	r13, r1
    3e40:	45 e0       	ldi	r20, 0x05	; 5
    3e42:	50 e0       	ldi	r21, 0x00	; 0
    3e44:	6d ee       	ldi	r22, 0xED	; 237
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	c6 01       	movw	r24, r12
    3e4a:	0e 94 1d 21 	call	0x423a	; 0x423a <strncasecmp_P>
    3e4e:	89 2b       	or	r24, r25
    3e50:	21 f4       	brne	.+8      	; 0x3e5a <strtod+0x90>
    3e52:	68 01       	movw	r12, r16
    3e54:	87 e0       	ldi	r24, 0x07	; 7
    3e56:	c8 0e       	add	r12, r24
    3e58:	d1 1c       	adc	r13, r1
    3e5a:	e1 14       	cp	r14, r1
    3e5c:	f1 04       	cpc	r15, r1
    3e5e:	19 f0       	breq	.+6      	; 0x3e66 <strtod+0x9c>
    3e60:	d7 01       	movw	r26, r14
    3e62:	cd 92       	st	X+, r12
    3e64:	dc 92       	st	X, r13
    3e66:	c1 11       	cpse	r28, r1
    3e68:	ff c0       	rjmp	.+510    	; 0x4068 <strtod+0x29e>
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	70 e0       	ldi	r23, 0x00	; 0
    3e6e:	80 e8       	ldi	r24, 0x80	; 128
    3e70:	9f e7       	ldi	r25, 0x7F	; 127
    3e72:	03 c1       	rjmp	.+518    	; 0x407a <strtod+0x2b0>
    3e74:	43 e0       	ldi	r20, 0x03	; 3
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	6a ee       	ldi	r22, 0xEA	; 234
    3e7a:	70 e0       	ldi	r23, 0x00	; 0
    3e7c:	c6 01       	movw	r24, r12
    3e7e:	0e 94 1d 21 	call	0x423a	; 0x423a <strncasecmp_P>
    3e82:	89 2b       	or	r24, r25
    3e84:	51 f4       	brne	.+20     	; 0x3e9a <strtod+0xd0>
    3e86:	e1 14       	cp	r14, r1
    3e88:	f1 04       	cpc	r15, r1
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <strtod+0xc4>
    3e8c:	f2 c0       	rjmp	.+484    	; 0x4072 <strtod+0x2a8>
    3e8e:	0e 5f       	subi	r16, 0xFE	; 254
    3e90:	1f 4f       	sbci	r17, 0xFF	; 255
    3e92:	f7 01       	movw	r30, r14
    3e94:	11 83       	std	Z+1, r17	; 0x01
    3e96:	00 83       	st	Z, r16
    3e98:	ec c0       	rjmp	.+472    	; 0x4072 <strtod+0x2a8>
    3e9a:	68 01       	movw	r12, r16
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	70 e0       	ldi	r23, 0x00	; 0
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	00 e0       	ldi	r16, 0x00	; 0
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	f6 01       	movw	r30, r12
    3ea8:	d0 ed       	ldi	r29, 0xD0	; 208
    3eaa:	d7 0d       	add	r29, r7
    3eac:	da 30       	cpi	r29, 0x0A	; 10
    3eae:	58 f5       	brcc	.+86     	; 0x3f06 <strtod+0x13c>
    3eb0:	2c 2f       	mov	r18, r28
    3eb2:	22 60       	ori	r18, 0x02	; 2
    3eb4:	62 2e       	mov	r6, r18
    3eb6:	2c 2f       	mov	r18, r28
    3eb8:	28 70       	andi	r18, 0x08	; 8
    3eba:	c2 ff       	sbrs	r28, 2
    3ebc:	05 c0       	rjmp	.+10     	; 0x3ec8 <strtod+0xfe>
    3ebe:	21 11       	cpse	r18, r1
    3ec0:	28 c0       	rjmp	.+80     	; 0x3f12 <strtod+0x148>
    3ec2:	0f 5f       	subi	r16, 0xFF	; 255
    3ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec6:	25 c0       	rjmp	.+74     	; 0x3f12 <strtod+0x148>
    3ec8:	22 23       	and	r18, r18
    3eca:	11 f0       	breq	.+4      	; 0x3ed0 <strtod+0x106>
    3ecc:	01 50       	subi	r16, 0x01	; 1
    3ece:	11 09       	sbc	r17, r1
    3ed0:	a5 e0       	ldi	r26, 0x05	; 5
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	9b 01       	movw	r18, r22
    3ed6:	ac 01       	movw	r20, r24
    3ed8:	0e 94 45 21 	call	0x428a	; 0x428a <__muluhisi3>
    3edc:	4b 01       	movw	r8, r22
    3ede:	5c 01       	movw	r10, r24
    3ee0:	88 0c       	add	r8, r8
    3ee2:	99 1c       	adc	r9, r9
    3ee4:	aa 1c       	adc	r10, r10
    3ee6:	bb 1c       	adc	r11, r11
    3ee8:	c5 01       	movw	r24, r10
    3eea:	b4 01       	movw	r22, r8
    3eec:	6d 0f       	add	r22, r29
    3eee:	71 1d       	adc	r23, r1
    3ef0:	81 1d       	adc	r24, r1
    3ef2:	91 1d       	adc	r25, r1
    3ef4:	68 39       	cpi	r22, 0x98	; 152
    3ef6:	a9 e9       	ldi	r26, 0x99	; 153
    3ef8:	7a 07       	cpc	r23, r26
    3efa:	8a 07       	cpc	r24, r26
    3efc:	a9 e1       	ldi	r26, 0x19	; 25
    3efe:	9a 07       	cpc	r25, r26
    3f00:	40 f0       	brcs	.+16     	; 0x3f12 <strtod+0x148>
    3f02:	c6 60       	ori	r28, 0x06	; 6
    3f04:	05 c0       	rjmp	.+10     	; 0x3f10 <strtod+0x146>
    3f06:	de 3f       	cpi	r29, 0xFE	; 254
    3f08:	51 f4       	brne	.+20     	; 0x3f1e <strtod+0x154>
    3f0a:	c3 fd       	sbrc	r28, 3
    3f0c:	44 c0       	rjmp	.+136    	; 0x3f96 <strtod+0x1cc>
    3f0e:	c8 60       	ori	r28, 0x08	; 8
    3f10:	6c 2e       	mov	r6, r28
    3f12:	bf ef       	ldi	r27, 0xFF	; 255
    3f14:	cb 1a       	sub	r12, r27
    3f16:	db 0a       	sbc	r13, r27
    3f18:	70 80       	ld	r7, Z
    3f1a:	c6 2d       	mov	r28, r6
    3f1c:	c4 cf       	rjmp	.-120    	; 0x3ea6 <strtod+0xdc>
    3f1e:	2d 2f       	mov	r18, r29
    3f20:	2f 7d       	andi	r18, 0xDF	; 223
    3f22:	25 31       	cpi	r18, 0x15	; 21
    3f24:	c1 f5       	brne	.+112    	; 0x3f96 <strtod+0x1cc>
    3f26:	40 81       	ld	r20, Z
    3f28:	4d 32       	cpi	r20, 0x2D	; 45
    3f2a:	11 f4       	brne	.+4      	; 0x3f30 <strtod+0x166>
    3f2c:	c0 61       	ori	r28, 0x10	; 16
    3f2e:	06 c0       	rjmp	.+12     	; 0x3f3c <strtod+0x172>
    3f30:	4b 32       	cpi	r20, 0x2B	; 43
    3f32:	21 f0       	breq	.+8      	; 0x3f3c <strtod+0x172>
    3f34:	31 96       	adiw	r30, 0x01	; 1
    3f36:	21 e0       	ldi	r18, 0x01	; 1
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	06 c0       	rjmp	.+12     	; 0x3f48 <strtod+0x17e>
    3f3c:	32 96       	adiw	r30, 0x02	; 2
    3f3e:	d6 01       	movw	r26, r12
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	4c 91       	ld	r20, X
    3f44:	22 e0       	ldi	r18, 0x02	; 2
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	a0 ed       	ldi	r26, 0xD0	; 208
    3f4a:	a4 0f       	add	r26, r20
    3f4c:	aa 30       	cpi	r26, 0x0A	; 10
    3f4e:	18 f0       	brcs	.+6      	; 0x3f56 <strtod+0x18c>
    3f50:	e2 1b       	sub	r30, r18
    3f52:	f3 0b       	sbc	r31, r19
    3f54:	20 c0       	rjmp	.+64     	; 0x3f96 <strtod+0x1cc>
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	50 e0       	ldi	r21, 0x00	; 0
    3f5a:	40 38       	cpi	r20, 0x80	; 128
    3f5c:	bc e0       	ldi	r27, 0x0C	; 12
    3f5e:	5b 07       	cpc	r21, r27
    3f60:	5c f4       	brge	.+22     	; 0x3f78 <strtod+0x1ae>
    3f62:	9a 01       	movw	r18, r20
    3f64:	22 0f       	add	r18, r18
    3f66:	33 1f       	adc	r19, r19
    3f68:	22 0f       	add	r18, r18
    3f6a:	33 1f       	adc	r19, r19
    3f6c:	42 0f       	add	r20, r18
    3f6e:	53 1f       	adc	r21, r19
    3f70:	44 0f       	add	r20, r20
    3f72:	55 1f       	adc	r21, r21
    3f74:	4a 0f       	add	r20, r26
    3f76:	51 1d       	adc	r21, r1
    3f78:	31 96       	adiw	r30, 0x01	; 1
    3f7a:	df 01       	movw	r26, r30
    3f7c:	11 97       	sbiw	r26, 0x01	; 1
    3f7e:	2c 91       	ld	r18, X
    3f80:	a0 ed       	ldi	r26, 0xD0	; 208
    3f82:	a2 0f       	add	r26, r18
    3f84:	aa 30       	cpi	r26, 0x0A	; 10
    3f86:	48 f3       	brcs	.-46     	; 0x3f5a <strtod+0x190>
    3f88:	c4 ff       	sbrs	r28, 4
    3f8a:	03 c0       	rjmp	.+6      	; 0x3f92 <strtod+0x1c8>
    3f8c:	51 95       	neg	r21
    3f8e:	41 95       	neg	r20
    3f90:	51 09       	sbc	r21, r1
    3f92:	04 0f       	add	r16, r20
    3f94:	15 1f       	adc	r17, r21
    3f96:	c1 ff       	sbrs	r28, 1
    3f98:	07 c0       	rjmp	.+14     	; 0x3fa8 <strtod+0x1de>
    3f9a:	e1 14       	cp	r14, r1
    3f9c:	f1 04       	cpc	r15, r1
    3f9e:	21 f0       	breq	.+8      	; 0x3fa8 <strtod+0x1de>
    3fa0:	31 97       	sbiw	r30, 0x01	; 1
    3fa2:	d7 01       	movw	r26, r14
    3fa4:	ed 93       	st	X+, r30
    3fa6:	fc 93       	st	X, r31
    3fa8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__floatunsisf>
    3fac:	c3 70       	andi	r28, 0x03	; 3
    3fae:	c3 30       	cpi	r28, 0x03	; 3
    3fb0:	19 f0       	breq	.+6      	; 0x3fb8 <strtod+0x1ee>
    3fb2:	6b 01       	movw	r12, r22
    3fb4:	7c 01       	movw	r14, r24
    3fb6:	06 c0       	rjmp	.+12     	; 0x3fc4 <strtod+0x1fa>
    3fb8:	6b 01       	movw	r12, r22
    3fba:	7c 01       	movw	r14, r24
    3fbc:	f7 fa       	bst	r15, 7
    3fbe:	f0 94       	com	r15
    3fc0:	f7 f8       	bld	r15, 7
    3fc2:	f0 94       	com	r15
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	a9 01       	movw	r20, r18
    3fca:	c7 01       	movw	r24, r14
    3fcc:	b6 01       	movw	r22, r12
    3fce:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__cmpsf2>
    3fd2:	88 23       	and	r24, r24
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <strtod+0x20e>
    3fd6:	45 c0       	rjmp	.+138    	; 0x4062 <strtod+0x298>
    3fd8:	17 ff       	sbrs	r17, 7
    3fda:	06 c0       	rjmp	.+12     	; 0x3fe8 <strtod+0x21e>
    3fdc:	11 95       	neg	r17
    3fde:	01 95       	neg	r16
    3fe0:	11 09       	sbc	r17, r1
    3fe2:	c9 e0       	ldi	r28, 0x09	; 9
    3fe4:	d1 e0       	ldi	r29, 0x01	; 1
    3fe6:	02 c0       	rjmp	.+4      	; 0x3fec <strtod+0x222>
    3fe8:	c1 e2       	ldi	r28, 0x21	; 33
    3fea:	d1 e0       	ldi	r29, 0x01	; 1
    3fec:	5e 01       	movw	r10, r28
    3fee:	b8 e1       	ldi	r27, 0x18	; 24
    3ff0:	ab 1a       	sub	r10, r27
    3ff2:	b1 08       	sbc	r11, r1
    3ff4:	46 01       	movw	r8, r12
    3ff6:	be 2d       	mov	r27, r14
    3ff8:	af 2d       	mov	r26, r15
    3ffa:	90 e2       	ldi	r25, 0x20	; 32
    3ffc:	e9 2e       	mov	r14, r25
    3ffe:	f1 2c       	mov	r15, r1
    4000:	0e 15       	cp	r16, r14
    4002:	1f 05       	cpc	r17, r15
    4004:	84 f0       	brlt	.+32     	; 0x4026 <strtod+0x25c>
    4006:	fe 01       	movw	r30, r28
    4008:	25 91       	lpm	r18, Z+
    400a:	35 91       	lpm	r19, Z+
    400c:	45 91       	lpm	r20, Z+
    400e:	54 91       	lpm	r21, Z
    4010:	b4 01       	movw	r22, r8
    4012:	8b 2f       	mov	r24, r27
    4014:	9a 2f       	mov	r25, r26
    4016:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
    401a:	4b 01       	movw	r8, r22
    401c:	b8 2f       	mov	r27, r24
    401e:	a9 2f       	mov	r26, r25
    4020:	0e 19       	sub	r16, r14
    4022:	1f 09       	sbc	r17, r15
    4024:	ed cf       	rjmp	.-38     	; 0x4000 <strtod+0x236>
    4026:	24 97       	sbiw	r28, 0x04	; 4
    4028:	f5 94       	asr	r15
    402a:	e7 94       	ror	r14
    402c:	ca 15       	cp	r28, r10
    402e:	db 05       	cpc	r29, r11
    4030:	39 f7       	brne	.-50     	; 0x4000 <strtod+0x236>
    4032:	64 01       	movw	r12, r8
    4034:	eb 2e       	mov	r14, r27
    4036:	fa 2e       	mov	r15, r26
    4038:	8e 2d       	mov	r24, r14
    403a:	88 0f       	add	r24, r24
    403c:	8f 2d       	mov	r24, r15
    403e:	88 1f       	adc	r24, r24
    4040:	8f 3f       	cpi	r24, 0xFF	; 255
    4042:	49 f0       	breq	.+18     	; 0x4056 <strtod+0x28c>
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	a9 01       	movw	r20, r18
    404a:	c7 01       	movw	r24, r14
    404c:	b6 01       	movw	r22, r12
    404e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__cmpsf2>
    4052:	81 11       	cpse	r24, r1
    4054:	06 c0       	rjmp	.+12     	; 0x4062 <strtod+0x298>
    4056:	82 e2       	ldi	r24, 0x22	; 34
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <errno+0x1>
    405e:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <errno>
    4062:	c7 01       	movw	r24, r14
    4064:	b6 01       	movw	r22, r12
    4066:	09 c0       	rjmp	.+18     	; 0x407a <strtod+0x2b0>
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	80 e8       	ldi	r24, 0x80	; 128
    406e:	9f ef       	ldi	r25, 0xFF	; 255
    4070:	04 c0       	rjmp	.+8      	; 0x407a <strtod+0x2b0>
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	80 ec       	ldi	r24, 0xC0	; 192
    4078:	9f e7       	ldi	r25, 0x7F	; 127
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	ee e0       	ldi	r30, 0x0E	; 14
    4080:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__epilogue_restores__+0x8>

00004084 <__ftoa_engine>:
    4084:	28 30       	cpi	r18, 0x08	; 8
    4086:	08 f0       	brcs	.+2      	; 0x408a <__ftoa_engine+0x6>
    4088:	27 e0       	ldi	r18, 0x07	; 7
    408a:	33 27       	eor	r19, r19
    408c:	da 01       	movw	r26, r20
    408e:	99 0f       	add	r25, r25
    4090:	31 1d       	adc	r19, r1
    4092:	87 fd       	sbrc	r24, 7
    4094:	91 60       	ori	r25, 0x01	; 1
    4096:	00 96       	adiw	r24, 0x00	; 0
    4098:	61 05       	cpc	r22, r1
    409a:	71 05       	cpc	r23, r1
    409c:	39 f4       	brne	.+14     	; 0x40ac <__ftoa_engine+0x28>
    409e:	32 60       	ori	r19, 0x02	; 2
    40a0:	2e 5f       	subi	r18, 0xFE	; 254
    40a2:	3d 93       	st	X+, r19
    40a4:	30 e3       	ldi	r19, 0x30	; 48
    40a6:	2a 95       	dec	r18
    40a8:	e1 f7       	brne	.-8      	; 0x40a2 <__ftoa_engine+0x1e>
    40aa:	08 95       	ret
    40ac:	9f 3f       	cpi	r25, 0xFF	; 255
    40ae:	30 f0       	brcs	.+12     	; 0x40bc <__ftoa_engine+0x38>
    40b0:	80 38       	cpi	r24, 0x80	; 128
    40b2:	71 05       	cpc	r23, r1
    40b4:	61 05       	cpc	r22, r1
    40b6:	09 f0       	breq	.+2      	; 0x40ba <__ftoa_engine+0x36>
    40b8:	3c 5f       	subi	r19, 0xFC	; 252
    40ba:	3c 5f       	subi	r19, 0xFC	; 252
    40bc:	3d 93       	st	X+, r19
    40be:	91 30       	cpi	r25, 0x01	; 1
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <__ftoa_engine+0x40>
    40c2:	80 68       	ori	r24, 0x80	; 128
    40c4:	91 1d       	adc	r25, r1
    40c6:	df 93       	push	r29
    40c8:	cf 93       	push	r28
    40ca:	1f 93       	push	r17
    40cc:	0f 93       	push	r16
    40ce:	ff 92       	push	r15
    40d0:	ef 92       	push	r14
    40d2:	19 2f       	mov	r17, r25
    40d4:	98 7f       	andi	r25, 0xF8	; 248
    40d6:	96 95       	lsr	r25
    40d8:	e9 2f       	mov	r30, r25
    40da:	96 95       	lsr	r25
    40dc:	96 95       	lsr	r25
    40de:	e9 0f       	add	r30, r25
    40e0:	ff 27       	eor	r31, r31
    40e2:	e1 58       	subi	r30, 0x81	; 129
    40e4:	fe 4f       	sbci	r31, 0xFE	; 254
    40e6:	99 27       	eor	r25, r25
    40e8:	33 27       	eor	r19, r19
    40ea:	ee 24       	eor	r14, r14
    40ec:	ff 24       	eor	r15, r15
    40ee:	a7 01       	movw	r20, r14
    40f0:	e7 01       	movw	r28, r14
    40f2:	05 90       	lpm	r0, Z+
    40f4:	08 94       	sec
    40f6:	07 94       	ror	r0
    40f8:	28 f4       	brcc	.+10     	; 0x4104 <__ftoa_engine+0x80>
    40fa:	36 0f       	add	r19, r22
    40fc:	e7 1e       	adc	r14, r23
    40fe:	f8 1e       	adc	r15, r24
    4100:	49 1f       	adc	r20, r25
    4102:	51 1d       	adc	r21, r1
    4104:	66 0f       	add	r22, r22
    4106:	77 1f       	adc	r23, r23
    4108:	88 1f       	adc	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	06 94       	lsr	r0
    410e:	a1 f7       	brne	.-24     	; 0x40f8 <__ftoa_engine+0x74>
    4110:	05 90       	lpm	r0, Z+
    4112:	07 94       	ror	r0
    4114:	28 f4       	brcc	.+10     	; 0x4120 <__ftoa_engine+0x9c>
    4116:	e7 0e       	add	r14, r23
    4118:	f8 1e       	adc	r15, r24
    411a:	49 1f       	adc	r20, r25
    411c:	56 1f       	adc	r21, r22
    411e:	c1 1d       	adc	r28, r1
    4120:	77 0f       	add	r23, r23
    4122:	88 1f       	adc	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	66 1f       	adc	r22, r22
    4128:	06 94       	lsr	r0
    412a:	a1 f7       	brne	.-24     	; 0x4114 <__ftoa_engine+0x90>
    412c:	05 90       	lpm	r0, Z+
    412e:	07 94       	ror	r0
    4130:	28 f4       	brcc	.+10     	; 0x413c <__ftoa_engine+0xb8>
    4132:	f8 0e       	add	r15, r24
    4134:	49 1f       	adc	r20, r25
    4136:	56 1f       	adc	r21, r22
    4138:	c7 1f       	adc	r28, r23
    413a:	d1 1d       	adc	r29, r1
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	66 1f       	adc	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	06 94       	lsr	r0
    4146:	a1 f7       	brne	.-24     	; 0x4130 <__ftoa_engine+0xac>
    4148:	05 90       	lpm	r0, Z+
    414a:	07 94       	ror	r0
    414c:	20 f4       	brcc	.+8      	; 0x4156 <__ftoa_engine+0xd2>
    414e:	49 0f       	add	r20, r25
    4150:	56 1f       	adc	r21, r22
    4152:	c7 1f       	adc	r28, r23
    4154:	d8 1f       	adc	r29, r24
    4156:	99 0f       	add	r25, r25
    4158:	66 1f       	adc	r22, r22
    415a:	77 1f       	adc	r23, r23
    415c:	88 1f       	adc	r24, r24
    415e:	06 94       	lsr	r0
    4160:	a9 f7       	brne	.-22     	; 0x414c <__ftoa_engine+0xc8>
    4162:	84 91       	lpm	r24, Z
    4164:	10 95       	com	r17
    4166:	17 70       	andi	r17, 0x07	; 7
    4168:	41 f0       	breq	.+16     	; 0x417a <__ftoa_engine+0xf6>
    416a:	d6 95       	lsr	r29
    416c:	c7 95       	ror	r28
    416e:	57 95       	ror	r21
    4170:	47 95       	ror	r20
    4172:	f7 94       	ror	r15
    4174:	e7 94       	ror	r14
    4176:	1a 95       	dec	r17
    4178:	c1 f7       	brne	.-16     	; 0x416a <__ftoa_engine+0xe6>
    417a:	e5 e2       	ldi	r30, 0x25	; 37
    417c:	f1 e0       	ldi	r31, 0x01	; 1
    417e:	68 94       	set
    4180:	15 90       	lpm	r1, Z+
    4182:	15 91       	lpm	r17, Z+
    4184:	35 91       	lpm	r19, Z+
    4186:	65 91       	lpm	r22, Z+
    4188:	95 91       	lpm	r25, Z+
    418a:	05 90       	lpm	r0, Z+
    418c:	7f e2       	ldi	r23, 0x2F	; 47
    418e:	73 95       	inc	r23
    4190:	e1 18       	sub	r14, r1
    4192:	f1 0a       	sbc	r15, r17
    4194:	43 0b       	sbc	r20, r19
    4196:	56 0b       	sbc	r21, r22
    4198:	c9 0b       	sbc	r28, r25
    419a:	d0 09       	sbc	r29, r0
    419c:	c0 f7       	brcc	.-16     	; 0x418e <__ftoa_engine+0x10a>
    419e:	e1 0c       	add	r14, r1
    41a0:	f1 1e       	adc	r15, r17
    41a2:	43 1f       	adc	r20, r19
    41a4:	56 1f       	adc	r21, r22
    41a6:	c9 1f       	adc	r28, r25
    41a8:	d0 1d       	adc	r29, r0
    41aa:	7e f4       	brtc	.+30     	; 0x41ca <__ftoa_engine+0x146>
    41ac:	70 33       	cpi	r23, 0x30	; 48
    41ae:	11 f4       	brne	.+4      	; 0x41b4 <__ftoa_engine+0x130>
    41b0:	8a 95       	dec	r24
    41b2:	e6 cf       	rjmp	.-52     	; 0x4180 <__ftoa_engine+0xfc>
    41b4:	e8 94       	clt
    41b6:	01 50       	subi	r16, 0x01	; 1
    41b8:	30 f0       	brcs	.+12     	; 0x41c6 <__ftoa_engine+0x142>
    41ba:	08 0f       	add	r16, r24
    41bc:	0a f4       	brpl	.+2      	; 0x41c0 <__ftoa_engine+0x13c>
    41be:	00 27       	eor	r16, r16
    41c0:	02 17       	cp	r16, r18
    41c2:	08 f4       	brcc	.+2      	; 0x41c6 <__ftoa_engine+0x142>
    41c4:	20 2f       	mov	r18, r16
    41c6:	23 95       	inc	r18
    41c8:	02 2f       	mov	r16, r18
    41ca:	7a 33       	cpi	r23, 0x3A	; 58
    41cc:	28 f0       	brcs	.+10     	; 0x41d8 <__ftoa_engine+0x154>
    41ce:	79 e3       	ldi	r23, 0x39	; 57
    41d0:	7d 93       	st	X+, r23
    41d2:	2a 95       	dec	r18
    41d4:	e9 f7       	brne	.-6      	; 0x41d0 <__ftoa_engine+0x14c>
    41d6:	10 c0       	rjmp	.+32     	; 0x41f8 <__ftoa_engine+0x174>
    41d8:	7d 93       	st	X+, r23
    41da:	2a 95       	dec	r18
    41dc:	89 f6       	brne	.-94     	; 0x4180 <__ftoa_engine+0xfc>
    41de:	06 94       	lsr	r0
    41e0:	97 95       	ror	r25
    41e2:	67 95       	ror	r22
    41e4:	37 95       	ror	r19
    41e6:	17 95       	ror	r17
    41e8:	17 94       	ror	r1
    41ea:	e1 18       	sub	r14, r1
    41ec:	f1 0a       	sbc	r15, r17
    41ee:	43 0b       	sbc	r20, r19
    41f0:	56 0b       	sbc	r21, r22
    41f2:	c9 0b       	sbc	r28, r25
    41f4:	d0 09       	sbc	r29, r0
    41f6:	98 f0       	brcs	.+38     	; 0x421e <__ftoa_engine+0x19a>
    41f8:	23 95       	inc	r18
    41fa:	7e 91       	ld	r23, -X
    41fc:	73 95       	inc	r23
    41fe:	7a 33       	cpi	r23, 0x3A	; 58
    4200:	08 f0       	brcs	.+2      	; 0x4204 <__ftoa_engine+0x180>
    4202:	70 e3       	ldi	r23, 0x30	; 48
    4204:	7c 93       	st	X, r23
    4206:	20 13       	cpse	r18, r16
    4208:	b8 f7       	brcc	.-18     	; 0x41f8 <__ftoa_engine+0x174>
    420a:	7e 91       	ld	r23, -X
    420c:	70 61       	ori	r23, 0x10	; 16
    420e:	7d 93       	st	X+, r23
    4210:	30 f0       	brcs	.+12     	; 0x421e <__ftoa_engine+0x19a>
    4212:	83 95       	inc	r24
    4214:	71 e3       	ldi	r23, 0x31	; 49
    4216:	7d 93       	st	X+, r23
    4218:	70 e3       	ldi	r23, 0x30	; 48
    421a:	2a 95       	dec	r18
    421c:	e1 f7       	brne	.-8      	; 0x4216 <__ftoa_engine+0x192>
    421e:	11 24       	eor	r1, r1
    4220:	ef 90       	pop	r14
    4222:	ff 90       	pop	r15
    4224:	0f 91       	pop	r16
    4226:	1f 91       	pop	r17
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	99 27       	eor	r25, r25
    422e:	87 fd       	sbrc	r24, 7
    4230:	90 95       	com	r25
    4232:	08 95       	ret

00004234 <__ctype_isfalse>:
    4234:	99 27       	eor	r25, r25
    4236:	88 27       	eor	r24, r24

00004238 <__ctype_istrue>:
    4238:	08 95       	ret

0000423a <strncasecmp_P>:
    423a:	fb 01       	movw	r30, r22
    423c:	dc 01       	movw	r26, r24
    423e:	41 50       	subi	r20, 0x01	; 1
    4240:	50 40       	sbci	r21, 0x00	; 0
    4242:	88 f0       	brcs	.+34     	; 0x4266 <strncasecmp_P+0x2c>
    4244:	8d 91       	ld	r24, X+
    4246:	81 34       	cpi	r24, 0x41	; 65
    4248:	1c f0       	brlt	.+6      	; 0x4250 <strncasecmp_P+0x16>
    424a:	8b 35       	cpi	r24, 0x5B	; 91
    424c:	0c f4       	brge	.+2      	; 0x4250 <strncasecmp_P+0x16>
    424e:	80 5e       	subi	r24, 0xE0	; 224
    4250:	65 91       	lpm	r22, Z+
    4252:	61 34       	cpi	r22, 0x41	; 65
    4254:	1c f0       	brlt	.+6      	; 0x425c <strncasecmp_P+0x22>
    4256:	6b 35       	cpi	r22, 0x5B	; 91
    4258:	0c f4       	brge	.+2      	; 0x425c <strncasecmp_P+0x22>
    425a:	60 5e       	subi	r22, 0xE0	; 224
    425c:	86 1b       	sub	r24, r22
    425e:	61 11       	cpse	r22, r1
    4260:	71 f3       	breq	.-36     	; 0x423e <strncasecmp_P+0x4>
    4262:	99 0b       	sbc	r25, r25
    4264:	08 95       	ret
    4266:	88 1b       	sub	r24, r24
    4268:	fc cf       	rjmp	.-8      	; 0x4262 <strncasecmp_P+0x28>

0000426a <strrev>:
    426a:	dc 01       	movw	r26, r24
    426c:	fc 01       	movw	r30, r24
    426e:	67 2f       	mov	r22, r23
    4270:	71 91       	ld	r23, Z+
    4272:	77 23       	and	r23, r23
    4274:	e1 f7       	brne	.-8      	; 0x426e <strrev+0x4>
    4276:	32 97       	sbiw	r30, 0x02	; 2
    4278:	04 c0       	rjmp	.+8      	; 0x4282 <strrev+0x18>
    427a:	7c 91       	ld	r23, X
    427c:	6d 93       	st	X+, r22
    427e:	70 83       	st	Z, r23
    4280:	62 91       	ld	r22, -Z
    4282:	ae 17       	cp	r26, r30
    4284:	bf 07       	cpc	r27, r31
    4286:	c8 f3       	brcs	.-14     	; 0x427a <strrev+0x10>
    4288:	08 95       	ret

0000428a <__muluhisi3>:
    428a:	0e 94 87 21 	call	0x430e	; 0x430e <__umulhisi3>
    428e:	a5 9f       	mul	r26, r21
    4290:	90 0d       	add	r25, r0
    4292:	b4 9f       	mul	r27, r20
    4294:	90 0d       	add	r25, r0
    4296:	a4 9f       	mul	r26, r20
    4298:	80 0d       	add	r24, r0
    429a:	91 1d       	adc	r25, r1
    429c:	11 24       	eor	r1, r1
    429e:	08 95       	ret

000042a0 <__prologue_saves__>:
    42a0:	2f 92       	push	r2
    42a2:	3f 92       	push	r3
    42a4:	4f 92       	push	r4
    42a6:	5f 92       	push	r5
    42a8:	6f 92       	push	r6
    42aa:	7f 92       	push	r7
    42ac:	8f 92       	push	r8
    42ae:	9f 92       	push	r9
    42b0:	af 92       	push	r10
    42b2:	bf 92       	push	r11
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	ca 1b       	sub	r28, r26
    42ca:	db 0b       	sbc	r29, r27
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	09 94       	ijmp

000042d8 <__epilogue_restores__>:
    42d8:	2a 88       	ldd	r2, Y+18	; 0x12
    42da:	39 88       	ldd	r3, Y+17	; 0x11
    42dc:	48 88       	ldd	r4, Y+16	; 0x10
    42de:	5f 84       	ldd	r5, Y+15	; 0x0f
    42e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    42e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    42e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    42e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    42e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    42ea:	b9 84       	ldd	r11, Y+9	; 0x09
    42ec:	c8 84       	ldd	r12, Y+8	; 0x08
    42ee:	df 80       	ldd	r13, Y+7	; 0x07
    42f0:	ee 80       	ldd	r14, Y+6	; 0x06
    42f2:	fd 80       	ldd	r15, Y+5	; 0x05
    42f4:	0c 81       	ldd	r16, Y+4	; 0x04
    42f6:	1b 81       	ldd	r17, Y+3	; 0x03
    42f8:	aa 81       	ldd	r26, Y+2	; 0x02
    42fa:	b9 81       	ldd	r27, Y+1	; 0x01
    42fc:	ce 0f       	add	r28, r30
    42fe:	d1 1d       	adc	r29, r1
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	ed 01       	movw	r28, r26
    430c:	08 95       	ret

0000430e <__umulhisi3>:
    430e:	a2 9f       	mul	r26, r18
    4310:	b0 01       	movw	r22, r0
    4312:	b3 9f       	mul	r27, r19
    4314:	c0 01       	movw	r24, r0
    4316:	a3 9f       	mul	r26, r19
    4318:	70 0d       	add	r23, r0
    431a:	81 1d       	adc	r24, r1
    431c:	11 24       	eor	r1, r1
    431e:	91 1d       	adc	r25, r1
    4320:	b2 9f       	mul	r27, r18
    4322:	70 0d       	add	r23, r0
    4324:	81 1d       	adc	r24, r1
    4326:	11 24       	eor	r1, r1
    4328:	91 1d       	adc	r25, r1
    432a:	08 95       	ret

0000432c <__do_global_dtors>:
    432c:	11 e0       	ldi	r17, 0x01	; 1
    432e:	cf e3       	ldi	r28, 0x3F	; 63
    4330:	d1 e0       	ldi	r29, 0x01	; 1
    4332:	04 c0       	rjmp	.+8      	; 0x433c <__do_global_dtors+0x10>
    4334:	fe 01       	movw	r30, r28
    4336:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__tablejump2__>
    433a:	21 96       	adiw	r28, 0x01	; 1
    433c:	c0 34       	cpi	r28, 0x40	; 64
    433e:	d1 07       	cpc	r29, r17
    4340:	c9 f7       	brne	.-14     	; 0x4334 <__do_global_dtors+0x8>
    4342:	f8 94       	cli

00004344 <__stop_program>:
    4344:	ff cf       	rjmp	.-2      	; 0x4344 <__stop_program>
